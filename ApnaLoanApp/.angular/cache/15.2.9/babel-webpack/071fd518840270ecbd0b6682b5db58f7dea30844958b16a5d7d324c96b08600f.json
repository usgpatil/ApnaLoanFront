{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { Renderer2, Directive, ElementRef, HostBinding, ChangeDetectorRef, Component, ViewChild, HostListener, Input, EventEmitter, Output, ContentChild, forwardRef, NgZone, NgModule } from '@angular/core';\nimport { throttleTime, tap, distinctUntilChanged, filter } from 'rxjs/operators';\nimport detectPassiveEvents from 'detect-passive-events';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {number} */\nconst PointerType = {\n  /** Low pointer */\n  Min: 0,\n  /** High pointer */\n  Max: 1\n};\nPointerType[PointerType.Min] = \"Min\";\nPointerType[PointerType.Max] = \"Max\";\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {number} */\nconst LabelType = {\n  /** Label above low pointer */\n  Low: 0,\n  /** Label above high pointer */\n  High: 1,\n  /** Label for minimum slider value */\n  Floor: 2,\n  /** Label for maximum slider value */\n  Ceil: 3,\n  /** Label below legend tick */\n  TickValue: 4\n};\nLabelType[LabelType.Low] = \"Low\";\nLabelType[LabelType.High] = \"High\";\nLabelType[LabelType.Floor] = \"Floor\";\nLabelType[LabelType.Ceil] = \"Ceil\";\nLabelType[LabelType.TickValue] = \"TickValue\";\n/**\n * Custom step definition\n *\n * This can be used to specify custom values and legend values for slider ticks\n * @record\n */\n\n/**\n * Slider options\n */\nclass Options {\n  constructor() {\n    /**\n     * Minimum value for a slider.\n     * Not applicable when using stepsArray.\n     */\n    this.floor = 0;\n    /**\n     * Maximum value for a slider.\n     * Not applicable when using stepsArray.\n     */\n    this.ceil = null;\n    /**\n     * Step between each value.\n     * Not applicable when using stepsArray.\n     */\n    this.step = 1;\n    /**\n     * The minimum range authorized on the slider.\n     * Applies to range slider only.\n     * When using stepsArray, expressed as index into stepsArray.\n     */\n    this.minRange = null;\n    /**\n     * The maximum range authorized on the slider.\n     * Applies to range slider only.\n     * When using stepsArray, expressed as index into stepsArray.\n     */\n    this.maxRange = null;\n    /**\n     * Set to true to have a push behavior. When the min handle goes above the max,\n     * the max is moved as well (and vice-versa). The range between min and max is\n     * defined by the step option (defaults to 1) and can also be overriden by\n     * the minRange option. Applies to range slider only.\n     */\n    this.pushRange = false;\n    /**\n     * The minimum value authorized on the slider.\n     * When using stepsArray, expressed as index into stepsArray.\n     */\n    this.minLimit = null;\n    /**\n     * The maximum value authorized on the slider.\n     * When using stepsArray, expressed as index into stepsArray.\n     */\n    this.maxLimit = null;\n    /**\n     * Custom translate function. Use this if you want to translate values displayed\n     * on the slider.\n     */\n    this.translate = null;\n    /**\n     * Custom function for combining overlapping labels in range slider.\n     * It takes the min and max values (already translated with translate fuction)\n     * and should return how these two values should be combined.\n     * If not provided, the default function will join the two values with\n     * ' - ' as separator.\n     */\n    this.combineLabels = null;\n    /**\n     * Use to display legend under ticks (thus, it needs to be used along with\n     * showTicks or showTicksValues). The function will be called with each tick\n     * value and returned content will be displayed under the tick as a legend.\n     * If the returned value is null, then no legend is displayed under\n     * the corresponding tick.You can also directly provide the legend values\n     * in the stepsArray option.\n     */\n    this.getLegend = null;\n    /**\n     * If you want to display a slider with non linear/number steps.\n     * Just pass an array with each slider value and that's it; the floor, ceil and step settings\n     * of the slider will be computed automatically.\n     * By default, the value model and valueHigh model values will be the value of the selected item\n     * in the stepsArray.\n     * They can also be bound to the index of the selected item by setting the bindIndexForStepsArray\n     * option to true.\n     */\n    this.stepsArray = null;\n    /**\n     * Set to true to bind the index of the selected item to value model and valueHigh model.\n     */\n    this.bindIndexForStepsArray = false;\n    /**\n     * When set to true and using a range slider, the range can be dragged by the selection bar.\n     * Applies to range slider only.\n     */\n    this.draggableRange = false;\n    /**\n     * Same as draggableRange but the slider range can't be changed.\n     * Applies to range slider only.\n     */\n    this.draggableRangeOnly = false;\n    /**\n     * Set to true to always show the selection bar before the slider handle.\n     */\n    this.showSelectionBar = false;\n    /**\n     * Set to true to always show the selection bar after the slider handle.\n     */\n    this.showSelectionBarEnd = false;\n    /**\n     * Set a number to draw the selection bar between this value and the slider handle.\n     * When using stepsArray, expressed as index into stepsArray.\n     */\n    this.showSelectionBarFromValue = null;\n    /**\n     * Only for range slider. Set to true to visualize in different colour the areas\n     * on the left/right (top/bottom for vertical range slider) of selection bar between the handles.\n     */\n    this.showOuterSelectionBars = false;\n    /**\n     * Set to true to hide pointer labels\n     */\n    this.hidePointerLabels = false;\n    /**\n     * Set to true to hide min / max labels\n     */\n    this.hideLimitLabels = false;\n    /**\n     * Set to false to disable the auto-hiding behavior of the limit labels.\n     */\n    this.autoHideLimitLabels = true;\n    /**\n     * Set to true to make the slider read-only.\n     */\n    this.readOnly = false;\n    /**\n     * Set to true to disable the slider.\n     */\n    this.disabled = false;\n    /**\n     * Throttle interval for mouse events in milliseconds.\n     * This is provided to avoid a flood of events when moving the slider with mouse.\n     */\n    this.mouseEventsInterval = 50;\n    /**\n     * Throttle interval for touch events in milliseconds.\n     * This is provided to avoid a flood of events when moving the slider with touch gesture.\n     */\n    this.touchEventsInterval = 50;\n    /**\n     * Throttle interval for input changes (changes to bindings or reactive form inputs)\n     * This is provided to avoid a flood of events on frequent input binding changes affecting performance.\n     */\n    this.inputEventsInterval = 100;\n    /**\n     * Throttle interval for output changes (signalling changes to output bindings and user callbacks)\n     * This is provided to avoid a flood of outgoing events affecting Angular app performance.\n     */\n    this.outputEventsInterval = 100;\n    /**\n     * Set to true to display a tick for each step of the slider.\n     */\n    this.showTicks = false;\n    /**\n     * Set to true to display a tick and the step value for each step of the slider..\n     */\n    this.showTicksValues = false;\n    /* The step between each tick to display. If not set, the step value is used.\n        Not used when ticksArray is specified. */\n    this.tickStep = null;\n    /* The step between displaying each tick step value. */\n    this.tickValueStep = 1;\n    /**\n     * Use to display ticks at specific positions.\n     * The array contains the index of the ticks that should be displayed.\n     * For example, [0, 1, 5] will display a tick for the first, second and sixth values.\n     */\n    this.ticksArray = null;\n    /**\n     * Used to display a tooltip when a tick is hovered.\n     * Set to a function that returns the tooltip content for a given value.\n     */\n    this.ticksTooltip = null;\n    /**\n     * Same as ticksTooltip but for ticks values.\n     */\n    this.ticksValuesTooltip = null;\n    /**\n     * Set to true to display the slider vertically.\n     * The slider will take the full height of its parent.\n     * Changing this value at runtime is not currently supported.\n     */\n    this.vertical = false;\n    /**\n     * Function that returns the current color of the selection bar.\n     * If your color won't change, don't use this option but set it through CSS.\n     * If the returned color depends on a model value (either value or valueHigh),\n     * you should use the argument passed to the function.\n     * Indeed, when the function is called, there is no certainty that the model\n     * has already been updated.\n     */\n    this.getSelectionBarColor = null;\n    /**\n     * Function that returns the color of a tick. showTicks must be enabled.\n     */\n    this.getTickColor = null;\n    /**\n     * Function that returns the current color of a pointer.\n     * If your color won't change, don't use this option but set it through CSS.\n     * If the returned color depends on a model value (either value or valueHigh),\n     * you should use the argument passed to the function.\n     * Indeed, when the function is called, there is no certainty that the model has already been updated.\n     * To handle range slider pointers independently, you should evaluate pointerType within the given\n     * function where \"min\" stands for value model and \"max\" for valueHigh model values.\n     */\n    this.getPointerColor = null;\n    /**\n     * Handles are focusable (on click or with tab) and can be modified using the following keyboard controls:\n     * Left/bottom arrows: -1\n     * Right/top arrows: +1\n     * Page-down: -10%\n     * Page-up: +10%\n     * Home: minimum value\n     * End: maximum value\n     */\n    this.keyboardSupport = true;\n    /**\n     * If you display the slider in an element that uses transform: scale(0.5), set the scale value to 2\n     * so that the slider is rendered properly and the events are handled correctly.\n     */\n    this.scale = 1;\n    /**\n     * Set to true to force the value to be rounded to the step, even when modified from the outside.\n     * When set to false, if the model values are modified from outside the slider, they are not rounded\n     * and can be between two steps.\n     */\n    this.enforceStep = true;\n    /**\n     * Set to true to force the value to be normalised to allowed range (floor to ceil), even when modified from the outside.\n     * When set to false, if the model values are modified from outside the slider, and they are outside allowed range,\n     * the slider may be rendered incorrectly. However, setting this to false may be useful if you want to perform custom normalisation.\n     */\n    this.enforceRange = true;\n    /**\n     * Set to true to prevent to user from switching the min and max handles. Applies to range slider only.\n     */\n    this.noSwitching = false;\n    /**\n     * Set to true to only bind events on slider handles.\n     */\n    this.onlyBindHandles = false;\n    /**\n     * Set to true to show graphs right to left.\n     * If vertical is true it will be from top to bottom and left / right arrow functions reversed.\n     */\n    this.rightToLeft = false;\n    /**\n     * Set to true to reverse keyboard navigation:\n     * Right/top arrows: -1\n     * Left/bottom arrows: +1\n     * Page-up: -10%\n     * Page-down: +10%\n     * End: minimum value\n     * Home: maximum value\n     */\n    this.reversedControls = false;\n    /**\n     * Set to true to keep the slider labels inside the slider bounds.\n     */\n    this.boundPointerLabels = true;\n    /**\n     * Set to true to use a logarithmic scale to display the slider.\n     */\n    this.logScale = false;\n    /**\n     * Function that returns the position on the slider for a given value.\n     * The position must be a percentage between 0 and 1.\n     * The function should be monotonically increasing or decreasing; otherwise the slider may behave incorrectly.\n     */\n    this.customValueToPosition = null;\n    /**\n     * Function that returns the value for a given position on the slider.\n     * The position is a percentage between 0 and 1.\n     * The function should be monotonically increasing or decreasing; otherwise the slider may behave incorrectly.\n     */\n    this.customPositionToValue = null;\n    /**\n     * Precision limit for calculated values.\n     * Values used in calculations will be rounded to this number of significant digits\n     * to prevent accumulating small floating-point errors.\n     */\n    this.precisionLimit = 12;\n    /**\n     * Use to display the selection bar as a gradient.\n     * The given object must contain from and to properties which are colors.\n     */\n    this.selectionBarGradient = null;\n    /**\n     * Use to add a label directly to the slider for accessibility. Adds the aria-label attribute.\n     */\n    this.ariaLabel = null;\n    /**\n     * Use instead of ariaLabel to reference the id of an element which will be used to label the slider.\n     * Adds the aria-labelledby attribute.\n     */\n    this.ariaLabelledBy = null;\n    /**\n     * Use to add a label directly to the slider range for accessibility. Adds the aria-label attribute.\n     */\n    this.ariaLabelHigh = null;\n    /**\n     * Use instead of ariaLabelHigh to reference the id of an element which will be used to label the slider range.\n     * Adds the aria-labelledby attribute.\n     */\n    this.ariaLabelledByHigh = null;\n    /**\n     * Use to increase rendering performance. If the value is not provided, the slider calculates the with/height of the handle\n     */\n    this.handleDimension = null;\n    /**\n     * Use to increase rendering performance. If the value is not provided, the slider calculates the with/height of the bar\n     */\n    this.barDimension = null;\n    /**\n     * Enable/disable CSS animations\n     */\n    this.animate = true;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass ChangeContext {}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n *  Collection of functions to handle conversions/lookups of values\n */\nclass ValueHelper {\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  static isNullOrUndefined(value) {\n    return value === undefined || value === null;\n  }\n  /**\n   * @param {?} val\n   * @param {?} minVal\n   * @param {?} maxVal\n   * @return {?}\n   */\n  static linearValueToPosition(val, minVal, maxVal) {\n    const /** @type {?} */range = maxVal - minVal;\n    return (val - minVal) / range;\n  }\n  /**\n   * @param {?} val\n   * @param {?} minVal\n   * @param {?} maxVal\n   * @return {?}\n   */\n  static logValueToPosition(val, minVal, maxVal) {\n    val = Math.log(val);\n    minVal = Math.log(minVal);\n    maxVal = Math.log(maxVal);\n    const /** @type {?} */range = maxVal - minVal;\n    return (val - minVal) / range;\n  }\n  /**\n   * @param {?} percent\n   * @param {?} minVal\n   * @param {?} maxVal\n   * @return {?}\n   */\n  static linearPositionToValue(percent, minVal, maxVal) {\n    return percent * (maxVal - minVal) + minVal;\n  }\n  /**\n   * @param {?} percent\n   * @param {?} minVal\n   * @param {?} maxVal\n   * @return {?}\n   */\n  static logPositionToValue(percent, minVal, maxVal) {\n    minVal = Math.log(minVal);\n    maxVal = Math.log(maxVal);\n    const /** @type {?} */value = percent * (maxVal - minVal) + minVal;\n    return Math.exp(value);\n  }\n  /**\n   * @param {?} modelValue\n   * @param {?} stepsArray\n   * @return {?}\n   */\n  static findStepIndex(modelValue, stepsArray) {\n    const /** @type {?} */differences = stepsArray.map(step => Math.abs(modelValue - step.value));\n    let /** @type {?} */minDifferenceIndex = 0;\n    for (let /** @type {?} */index = 0; index < stepsArray.length; index++) {\n      if (differences[index] !== differences[minDifferenceIndex] && differences[index] < differences[minDifferenceIndex]) {\n        minDifferenceIndex = index;\n      }\n    }\n    return minDifferenceIndex;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Helper with compatibility functions to support different browsers\n */\nclass CompatibilityHelper {\n  /**\n   * Workaround for TouchEvent constructor sadly not being available on all browsers (e.g. Firefox, Safari)\n   * @param {?} event\n   * @return {?}\n   */\n  static isTouchEvent(event) {\n    if ( /** @type {?} */window.TouchEvent !== undefined) {\n      return event instanceof TouchEvent;\n    }\n    return event.touches !== undefined;\n  }\n  /**\n   * Detect presence of ResizeObserver API\n   * @return {?}\n   */\n  static isResizeObserverAvailable() {\n    return (/** @type {?} */window.ResizeObserver !== undefined\n    );\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Helper with mathematical functions\n */\nclass MathHelper {\n  /**\n   * @param {?} value\n   * @param {?} precisionLimit\n   * @return {?}\n   */\n  static roundToPrecisionLimit(value, precisionLimit) {\n    return +value.toPrecision(precisionLimit);\n  }\n  /**\n   * @param {?} value\n   * @param {?} floor\n   * @param {?} ceil\n   * @return {?}\n   */\n  static clampToRange(value, floor, ceil) {\n    return Math.min(Math.max(value, floor), ceil);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass EventListener {\n  constructor() {\n    this.eventName = null;\n    this.events = null;\n    this.eventsSubscription = null;\n    this.teardownCallback = null;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Helper class to attach event listeners to DOM elements with debounce support using rxjs\n */\nclass EventListenerHelper {\n  /**\n   * @param {?} renderer\n   */\n  constructor(renderer) {\n    this.renderer = renderer;\n  }\n  /**\n   * @param {?} nativeElement\n   * @param {?} eventName\n   * @param {?} callback\n   * @param {?=} throttleInterval\n   * @return {?}\n   */\n  attachPassiveEventListener(nativeElement, eventName, callback, throttleInterval) {\n    // Only use passive event listeners if the browser supports it\n    if (detectPassiveEvents.hasSupport !== true) {\n      return this.attachEventListener(nativeElement, eventName, callback, throttleInterval);\n    }\n    // Angular doesn't support passive event handlers (yet), so we need to roll our own code using native functions\n    const /** @type {?} */listener = new EventListener();\n    listener.eventName = eventName;\n    listener.events = new Subject();\n    const /** @type {?} */observerCallback = event => {\n      listener.events.next(event);\n    };\n    nativeElement.addEventListener(eventName, observerCallback, {\n      passive: true,\n      capture: false\n    });\n    listener.teardownCallback = () => {\n      nativeElement.removeEventListener(eventName, observerCallback, {\n        passive: true,\n        capture: false\n      });\n    };\n    listener.eventsSubscription = listener.events.pipe(!ValueHelper.isNullOrUndefined(throttleInterval) ? throttleTime(throttleInterval, undefined, {\n      leading: true,\n      trailing: true\n    }) : tap(() => {}) // no-op\n    ).subscribe(event => {\n      callback(event);\n    });\n    return listener;\n  }\n  /**\n   * @param {?} eventListener\n   * @return {?}\n   */\n  detachEventListener(eventListener) {\n    if (!ValueHelper.isNullOrUndefined(eventListener.eventsSubscription)) {\n      eventListener.eventsSubscription.unsubscribe();\n      eventListener.eventsSubscription = null;\n    }\n    if (!ValueHelper.isNullOrUndefined(eventListener.events)) {\n      eventListener.events.complete();\n      eventListener.events = null;\n    }\n    if (!ValueHelper.isNullOrUndefined(eventListener.teardownCallback)) {\n      eventListener.teardownCallback();\n      eventListener.teardownCallback = null;\n    }\n  }\n  /**\n   * @param {?} nativeElement\n   * @param {?} eventName\n   * @param {?} callback\n   * @param {?=} throttleInterval\n   * @return {?}\n   */\n  attachEventListener(nativeElement, eventName, callback, throttleInterval) {\n    const /** @type {?} */listener = new EventListener();\n    listener.eventName = eventName;\n    listener.events = new Subject();\n    const /** @type {?} */observerCallback = event => {\n      listener.events.next(event);\n    };\n    listener.teardownCallback = this.renderer.listen(nativeElement, eventName, observerCallback);\n    listener.eventsSubscription = listener.events.pipe(!ValueHelper.isNullOrUndefined(throttleInterval) ? throttleTime(throttleInterval, undefined, {\n      leading: true,\n      trailing: true\n    }) : tap(() => {}) // no-op\n    ).subscribe(event => {\n      callback(event);\n    });\n    return listener;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass SliderElementDirective {\n  /**\n   * @param {?} elemRef\n   * @param {?} renderer\n   * @param {?} changeDetectionRef\n   */\n  constructor(elemRef, renderer, changeDetectionRef) {\n    this.elemRef = elemRef;\n    this.renderer = renderer;\n    this.changeDetectionRef = changeDetectionRef;\n    this._position = 0;\n    this._dimension = 0;\n    this._alwaysHide = false;\n    this._vertical = false;\n    this._scale = 1;\n    this.opacity = 1;\n    this.visibility = 'visible';\n    this.left = '';\n    this.bottom = '';\n    this.height = '';\n    this.width = '';\n    this.eventListeners = [];\n    this.eventListenerHelper = new EventListenerHelper(this.renderer);\n  }\n  /**\n   * @return {?}\n   */\n  get position() {\n    return this._position;\n  }\n  /**\n   * @return {?}\n   */\n  get dimension() {\n    return this._dimension;\n  }\n  /**\n   * @return {?}\n   */\n  get alwaysHide() {\n    return this._alwaysHide;\n  }\n  /**\n   * @return {?}\n   */\n  get vertical() {\n    return this._vertical;\n  }\n  /**\n   * @return {?}\n   */\n  get scale() {\n    return this._scale;\n  }\n  /**\n   * @param {?} hide\n   * @return {?}\n   */\n  setAlwaysHide(hide) {\n    this._alwaysHide = hide;\n    if (hide) {\n      this.visibility = 'hidden';\n    } else {\n      this.visibility = 'visible';\n    }\n  }\n  /**\n   * @return {?}\n   */\n  hide() {\n    this.opacity = 0;\n  }\n  /**\n   * @return {?}\n   */\n  show() {\n    if (this.alwaysHide) {\n      return;\n    }\n    this.opacity = 1;\n  }\n  /**\n   * @return {?}\n   */\n  isVisible() {\n    if (this.alwaysHide) {\n      return false;\n    }\n    return this.opacity !== 0;\n  }\n  /**\n   * @param {?} vertical\n   * @return {?}\n   */\n  setVertical(vertical) {\n    this._vertical = vertical;\n    if (this._vertical) {\n      this.left = '';\n      this.width = '';\n    } else {\n      this.bottom = '';\n      this.height = '';\n    }\n  }\n  /**\n   * @param {?} scale\n   * @return {?}\n   */\n  setScale(scale) {\n    this._scale = scale;\n  }\n  /**\n   * @param {?} pos\n   * @return {?}\n   */\n  setPosition(pos) {\n    if (this._position !== pos && !this.isRefDestroyed()) {\n      this.changeDetectionRef.markForCheck();\n    }\n    this._position = pos;\n    if (this._vertical) {\n      this.bottom = Math.round(pos) + 'px';\n    } else {\n      this.left = Math.round(pos) + 'px';\n    }\n  }\n  /**\n   * @return {?}\n   */\n  calculateDimension() {\n    const /** @type {?} */val = this.getBoundingClientRect();\n    if (this.vertical) {\n      this._dimension = (val.bottom - val.top) * this.scale;\n    } else {\n      this._dimension = (val.right - val.left) * this.scale;\n    }\n  }\n  /**\n   * @param {?} dim\n   * @return {?}\n   */\n  setDimension(dim) {\n    if (this._dimension !== dim && !this.isRefDestroyed()) {\n      this.changeDetectionRef.markForCheck();\n    }\n    this._dimension = dim;\n    if (this._vertical) {\n      this.height = Math.round(dim) + 'px';\n    } else {\n      this.width = Math.round(dim) + 'px';\n    }\n  }\n  /**\n   * @return {?}\n   */\n  getBoundingClientRect() {\n    return this.elemRef.nativeElement.getBoundingClientRect();\n  }\n  /**\n   * @param {?} eventName\n   * @param {?} callback\n   * @param {?=} debounceInterval\n   * @return {?}\n   */\n  on(eventName, callback, debounceInterval) {\n    const /** @type {?} */listener = this.eventListenerHelper.attachEventListener(this.elemRef.nativeElement, eventName, callback, debounceInterval);\n    this.eventListeners.push(listener);\n  }\n  /**\n   * @param {?} eventName\n   * @param {?} callback\n   * @param {?=} debounceInterval\n   * @return {?}\n   */\n  onPassive(eventName, callback, debounceInterval) {\n    const /** @type {?} */listener = this.eventListenerHelper.attachPassiveEventListener(this.elemRef.nativeElement, eventName, callback, debounceInterval);\n    this.eventListeners.push(listener);\n  }\n  /**\n   * @param {?=} eventName\n   * @return {?}\n   */\n  off(eventName) {\n    let /** @type {?} */listenersToKeep;\n    let /** @type {?} */listenersToRemove;\n    if (!ValueHelper.isNullOrUndefined(eventName)) {\n      listenersToKeep = this.eventListeners.filter(event => event.eventName !== eventName);\n      listenersToRemove = this.eventListeners.filter(event => event.eventName === eventName);\n    } else {\n      listenersToKeep = [];\n      listenersToRemove = this.eventListeners;\n    }\n    for (const /** @type {?} */listener of listenersToRemove) {\n      this.eventListenerHelper.detachEventListener(listener);\n    }\n    this.eventListeners = listenersToKeep;\n  }\n  /**\n   * @return {?}\n   */\n  isRefDestroyed() {\n    return ValueHelper.isNullOrUndefined(this.changeDetectionRef) || this.changeDetectionRef['destroyed'];\n  }\n}\nSliderElementDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[ng5SliderElement]'\n  }]\n}];\n/** @nocollapse */\nSliderElementDirective.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Renderer2\n}, {\n  type: ChangeDetectorRef\n}];\nSliderElementDirective.propDecorators = {\n  \"opacity\": [{\n    type: HostBinding,\n    args: ['style.opacity']\n  }],\n  \"visibility\": [{\n    type: HostBinding,\n    args: ['style.visibility']\n  }],\n  \"left\": [{\n    type: HostBinding,\n    args: ['style.left']\n  }],\n  \"bottom\": [{\n    type: HostBinding,\n    args: ['style.bottom']\n  }],\n  \"height\": [{\n    type: HostBinding,\n    args: ['style.height']\n  }],\n  \"width\": [{\n    type: HostBinding,\n    args: ['style.width']\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass SliderHandleDirective extends SliderElementDirective {\n  /**\n   * @param {?} elemRef\n   * @param {?} renderer\n   * @param {?} changeDetectionRef\n   */\n  constructor(elemRef, renderer, changeDetectionRef) {\n    super(elemRef, renderer, changeDetectionRef);\n    this.active = false;\n    this.role = '';\n    this.tabindex = '';\n    this.ariaOrientation = '';\n    this.ariaLabel = '';\n    this.ariaLabelledBy = '';\n    this.ariaValueNow = '';\n    this.ariaValueText = '';\n    this.ariaValueMin = '';\n    this.ariaValueMax = '';\n  }\n  /**\n   * @return {?}\n   */\n  focus() {\n    this.elemRef.nativeElement.focus();\n  }\n}\nSliderHandleDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[ng5SliderHandle]'\n  }]\n}];\n/** @nocollapse */\nSliderHandleDirective.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Renderer2\n}, {\n  type: ChangeDetectorRef\n}];\nSliderHandleDirective.propDecorators = {\n  \"active\": [{\n    type: HostBinding,\n    args: ['class.ng5-slider-active']\n  }],\n  \"role\": [{\n    type: HostBinding,\n    args: ['attr.role']\n  }],\n  \"tabindex\": [{\n    type: HostBinding,\n    args: ['attr.tabindex']\n  }],\n  \"ariaOrientation\": [{\n    type: HostBinding,\n    args: ['attr.aria-orientation']\n  }],\n  \"ariaLabel\": [{\n    type: HostBinding,\n    args: ['attr.aria-label']\n  }],\n  \"ariaLabelledBy\": [{\n    type: HostBinding,\n    args: ['attr.aria-labelledby']\n  }],\n  \"ariaValueNow\": [{\n    type: HostBinding,\n    args: ['attr.aria-valuenow']\n  }],\n  \"ariaValueText\": [{\n    type: HostBinding,\n    args: ['attr.aria-valuetext']\n  }],\n  \"ariaValueMin\": [{\n    type: HostBinding,\n    args: ['attr.aria-valuemin']\n  }],\n  \"ariaValueMax\": [{\n    type: HostBinding,\n    args: ['attr.aria-valuemax']\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass SliderLabelDirective extends SliderElementDirective {\n  /**\n   * @param {?} elemRef\n   * @param {?} renderer\n   * @param {?} changeDetectionRef\n   */\n  constructor(elemRef, renderer, changeDetectionRef) {\n    super(elemRef, renderer, changeDetectionRef);\n    this._value = null;\n  }\n  /**\n   * @return {?}\n   */\n  get value() {\n    return this._value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  setValue(value) {\n    let /** @type {?} */recalculateDimension = false;\n    if (!this.alwaysHide && (ValueHelper.isNullOrUndefined(this.value) || this.value.length !== value.length || this.value.length > 0 && this.dimension === 0)) {\n      recalculateDimension = true;\n    }\n    this._value = value;\n    this.elemRef.nativeElement.innerHTML = value;\n    // Update dimension only when length of the label have changed\n    if (recalculateDimension) {\n      this.calculateDimension();\n    }\n  }\n}\nSliderLabelDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[ng5SliderLabel]'\n  }]\n}];\n/** @nocollapse */\nSliderLabelDirective.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Renderer2\n}, {\n  type: ChangeDetectorRef\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass Tick {\n  constructor() {\n    this.selected = false;\n    this.style = {};\n    this.tooltip = null;\n    this.tooltipPlacement = null;\n    this.value = null;\n    this.valueTooltip = null;\n    this.valueTooltipPlacement = null;\n    this.legend = null;\n  }\n}\nclass Dragging {\n  constructor() {\n    this.active = false;\n    this.value = 0;\n    this.difference = 0;\n    this.position = 0;\n    this.lowLimit = 0;\n    this.highLimit = 0;\n  }\n}\nclass ModelValues {\n  /**\n   * @param {?=} x\n   * @param {?=} y\n   * @return {?}\n   */\n  static compare(x, y) {\n    if (ValueHelper.isNullOrUndefined(x) && ValueHelper.isNullOrUndefined(y)) {\n      return false;\n    }\n    if (ValueHelper.isNullOrUndefined(x) !== ValueHelper.isNullOrUndefined(y)) {\n      return false;\n    }\n    return x.value === y.value && x.highValue === y.highValue;\n  }\n}\nclass ModelChange extends ModelValues {\n  /**\n   * @param {?=} x\n   * @param {?=} y\n   * @return {?}\n   */\n  static compare(x, y) {\n    if (ValueHelper.isNullOrUndefined(x) && ValueHelper.isNullOrUndefined(y)) {\n      return false;\n    }\n    if (ValueHelper.isNullOrUndefined(x) !== ValueHelper.isNullOrUndefined(y)) {\n      return false;\n    }\n    return x.value === y.value && x.highValue === y.highValue && x.forceChange === y.forceChange;\n  }\n}\nconst NG5_SLIDER_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => SliderComponent),\n  multi: true\n};\nclass SliderComponent {\n  /**\n   * @param {?} renderer\n   * @param {?} elementRef\n   * @param {?} changeDetectionRef\n   * @param {?} zone\n   */\n  constructor(renderer, elementRef, changeDetectionRef, zone) {\n    this.renderer = renderer;\n    this.elementRef = elementRef;\n    this.changeDetectionRef = changeDetectionRef;\n    this.zone = zone;\n    // Model for low value of slider. For simple slider, this is the only input. For range slider, this is the low value.\n    this.value = null;\n    // Output for low value slider to support two-way bindings\n    this.valueChange = new EventEmitter();\n    // Model for high value of slider. Not used in simple slider. For range slider, this is the high value.\n    this.highValue = null;\n    // Output for high value slider to support two-way bindings\n    this.highValueChange = new EventEmitter();\n    // An object with all the other options of the slider.\n    // Each option can be updated at runtime and the slider will automatically be re-rendered.\n    this.options = new Options();\n    // Event emitted when user starts interaction with the slider\n    this.userChangeStart = new EventEmitter();\n    // Event emitted on each change coming from user interaction\n    this.userChange = new EventEmitter();\n    // Event emitted when user finishes interaction with the slider\n    this.userChangeEnd = new EventEmitter();\n    this.initHasRun = false;\n    this.inputModelChangeSubject = new Subject();\n    this.inputModelChangeSubscription = null;\n    this.outputModelChangeSubject = new Subject();\n    this.outputModelChangeSubscription = null;\n    this.viewLowValue = null;\n    this.viewHighValue = null;\n    this.viewOptions = new Options();\n    this.handleHalfDimension = 0;\n    this.maxHandlePosition = 0;\n    this.currentTrackingPointer = null;\n    this.currentFocusPointer = null;\n    this.firstKeyDown = false;\n    this.touchId = null;\n    this.dragging = new Dragging();\n    // Host element class bindings\n    this.sliderElementVerticalClass = false;\n    this.sliderElementAnimateClass = false;\n    this.sliderElementDisabledAttr = null;\n    this.barStyle = {};\n    this.minPointerStyle = {};\n    this.maxPointerStyle = {};\n    this.fullBarTransparentClass = false;\n    this.selectionBarDraggableClass = false;\n    this.ticksUnderValuesClass = false;\n    this.intermediateTicks = false;\n    this.ticks = [];\n    this.eventListenerHelper = null;\n    this.onMoveEventListener = null;\n    this.onEndEventListener = null;\n    this.resizeObserver = null;\n    this.onTouchedCallback = null;\n    this.onChangeCallback = null;\n    this.eventListenerHelper = new EventListenerHelper(this.renderer);\n  }\n  /**\n   * @param {?} manualRefresh\n   * @return {?}\n   */\n  set manualRefresh(manualRefresh) {\n    this.unsubscribeManualRefresh();\n    this.manualRefreshSubscription = manualRefresh.subscribe(() => {\n      setTimeout(() => this.calculateViewDimensionsAndDetectChanges());\n    });\n  }\n  /**\n   * @param {?} triggerFocus\n   * @return {?}\n   */\n  set triggerFocus(triggerFocus) {\n    this.unsubscribeTriggerFocus();\n    this.triggerFocusSubscription = triggerFocus.subscribe(pointerType => {\n      this.focusPointer(pointerType);\n    });\n  }\n  /**\n   * @return {?}\n   */\n  get range() {\n    return !ValueHelper.isNullOrUndefined(this.value) && !ValueHelper.isNullOrUndefined(this.highValue);\n  }\n  /**\n   * @return {?}\n   */\n  get showTicks() {\n    return this.viewOptions.showTicks;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this.viewOptions = new Options();\n    Object.assign(this.viewOptions, this.options);\n    // We need to run these two things first, before the rest of the init in ngAfterViewInit(),\n    // because these two settings are set through @HostBinding and Angular change detection\n    // mechanism doesn't like them changing in ngAfterViewInit()\n    this.updateDisabledState();\n    this.updateVerticalState();\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterViewInit() {\n    this.applyOptions();\n    this.subscribeInputModelChangeSubject(this.viewOptions.inputEventsInterval);\n    this.subscribeOutputModelChangeSubject(this.viewOptions.outputEventsInterval);\n    // Once we apply options, we need to normalise model values for the first time\n    this.renormaliseModelValues();\n    this.viewLowValue = this.modelValueToViewValue(this.value);\n    if (this.range) {\n      this.viewHighValue = this.modelValueToViewValue(this.highValue);\n    } else {\n      this.viewHighValue = null;\n    }\n    this.updateVerticalState(); // need to run this again to cover changes to slider elements\n    this.manageElementsStyle();\n    this.updateDisabledState();\n    this.calculateViewDimensions();\n    this.addAccessibility();\n    this.updateCeilLabel();\n    this.updateFloorLabel();\n    this.initHandles();\n    this.manageEventsBindings();\n    this.subscribeResizeObserver();\n    this.initHasRun = true;\n    // Run change detection manually to resolve some issues when init procedure changes values used in the view\n    if (!this.isRefDestroyed()) {\n      this.changeDetectionRef.detectChanges();\n    }\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    // Always apply options first\n    if (!ValueHelper.isNullOrUndefined(changes[\"options\"])) {\n      this.onChangeOptions();\n    }\n    // Then value changes\n    if (!ValueHelper.isNullOrUndefined(changes[\"value\"]) || !ValueHelper.isNullOrUndefined(changes[\"highValue\"])) {\n      this.inputModelChangeSubject.next({\n        value: this.value,\n        highValue: this.highValue,\n        forceChange: false,\n        internalChange: false\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.unbindEvents();\n    this.unsubscribeResizeObserver();\n    this.unsubscribeInputModelChangeSubject();\n    this.unsubscribeOutputModelChangeSubject();\n    this.unsubscribeManualRefresh();\n    this.unsubscribeTriggerFocus();\n  }\n  /**\n   * @param {?} obj\n   * @return {?}\n   */\n  writeValue(obj) {\n    if (obj instanceof Array) {\n      this.value = obj[0];\n      this.highValue = obj[1];\n    } else {\n      this.value = obj;\n    }\n    // ngOnChanges() is not called in this instance, so we need to communicate the change manually\n    this.inputModelChangeSubject.next({\n      value: this.value,\n      highValue: this.highValue,\n      forceChange: false,\n      internalChange: false\n    });\n  }\n  /**\n   * @param {?} onChangeCallback\n   * @return {?}\n   */\n  registerOnChange(onChangeCallback) {\n    this.onChangeCallback = onChangeCallback;\n  }\n  /**\n   * @param {?} onTouchedCallback\n   * @return {?}\n   */\n  registerOnTouched(onTouchedCallback) {\n    this.onTouchedCallback = onTouchedCallback;\n  }\n  /**\n   * @param {?} isDisabled\n   * @return {?}\n   */\n  setDisabledState(isDisabled) {\n    this.viewOptions.disabled = isDisabled;\n    this.updateDisabledState();\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  onResize(event) {\n    this.calculateViewDimensionsAndDetectChanges();\n  }\n  /**\n   * @param {?=} interval\n   * @return {?}\n   */\n  subscribeInputModelChangeSubject(interval) {\n    this.inputModelChangeSubscription = this.inputModelChangeSubject.pipe(distinctUntilChanged(ModelChange.compare),\n    // Hack to reset the status of the distinctUntilChanged() - if a \"fake\" event comes through with forceChange=true,\n    // we forcefully by-pass distinctUntilChanged(), but otherwise drop the event\n    filter(modelChange => !modelChange.forceChange && !modelChange.internalChange), !ValueHelper.isNullOrUndefined(interval) ? throttleTime(interval, undefined, {\n      leading: true,\n      trailing: true\n    }) : tap(() => {}) // no-op\n    ).subscribe(modelChange => this.applyInputModelChange(modelChange));\n  }\n  /**\n   * @param {?=} interval\n   * @return {?}\n   */\n  subscribeOutputModelChangeSubject(interval) {\n    this.outputModelChangeSubscription = this.outputModelChangeSubject.pipe(distinctUntilChanged(ModelChange.compare), !ValueHelper.isNullOrUndefined(interval) ? throttleTime(interval, undefined, {\n      leading: true,\n      trailing: true\n    }) : tap(() => {}) // no-op\n    ).subscribe(modelChange => this.publishOutputModelChange(modelChange));\n  }\n  /**\n   * @return {?}\n   */\n  subscribeResizeObserver() {\n    if (CompatibilityHelper.isResizeObserverAvailable()) {\n      this.resizeObserver = new ResizeObserver(() => this.calculateViewDimensionsAndDetectChanges());\n      this.resizeObserver.observe(this.elementRef.nativeElement);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  unsubscribeResizeObserver() {\n    if (CompatibilityHelper.isResizeObserverAvailable() && this.resizeObserver !== null) {\n      this.resizeObserver.disconnect();\n      this.resizeObserver = null;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  unsubscribeOnMove() {\n    if (!ValueHelper.isNullOrUndefined(this.onMoveEventListener)) {\n      this.eventListenerHelper.detachEventListener(this.onMoveEventListener);\n      this.onMoveEventListener = null;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  unsubscribeOnEnd() {\n    if (!ValueHelper.isNullOrUndefined(this.onEndEventListener)) {\n      this.eventListenerHelper.detachEventListener(this.onEndEventListener);\n      this.onEndEventListener = null;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  unsubscribeInputModelChangeSubject() {\n    if (!ValueHelper.isNullOrUndefined(this.inputModelChangeSubscription)) {\n      this.inputModelChangeSubscription.unsubscribe();\n      this.inputModelChangeSubscription = null;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  unsubscribeOutputModelChangeSubject() {\n    if (!ValueHelper.isNullOrUndefined(this.outputModelChangeSubscription)) {\n      this.outputModelChangeSubscription.unsubscribe();\n      this.outputModelChangeSubscription = null;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  unsubscribeManualRefresh() {\n    if (!ValueHelper.isNullOrUndefined(this.manualRefreshSubscription)) {\n      this.manualRefreshSubscription.unsubscribe();\n      this.manualRefreshSubscription = null;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  unsubscribeTriggerFocus() {\n    if (!ValueHelper.isNullOrUndefined(this.triggerFocusSubscription)) {\n      this.triggerFocusSubscription.unsubscribe();\n      this.triggerFocusSubscription = null;\n    }\n  }\n  /**\n   * @param {?} pointerType\n   * @return {?}\n   */\n  getPointerElement(pointerType) {\n    if (pointerType === PointerType.Min) {\n      return this.minHandleElement;\n    } else if (pointerType === PointerType.Max) {\n      return this.maxHandleElement;\n    }\n    return null;\n  }\n  /**\n   * @return {?}\n   */\n  getCurrentTrackingValue() {\n    if (this.currentTrackingPointer === PointerType.Min) {\n      return this.viewLowValue;\n    } else if (this.currentTrackingPointer === PointerType.Max) {\n      return this.viewHighValue;\n    }\n    return null;\n  }\n  /**\n   * @param {?} modelValue\n   * @return {?}\n   */\n  modelValueToViewValue(modelValue) {\n    if (ValueHelper.isNullOrUndefined(modelValue)) {\n      return NaN;\n    }\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) && !this.viewOptions.bindIndexForStepsArray) {\n      return ValueHelper.findStepIndex(+modelValue, this.viewOptions.stepsArray);\n    }\n    return +modelValue;\n  }\n  /**\n   * @param {?} viewValue\n   * @return {?}\n   */\n  viewValueToModelValue(viewValue) {\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) && !this.viewOptions.bindIndexForStepsArray) {\n      return this.getStepValue(viewValue);\n    }\n    return viewValue;\n  }\n  /**\n   * @param {?} sliderValue\n   * @return {?}\n   */\n  getStepValue(sliderValue) {\n    const /** @type {?} */step = this.viewOptions.stepsArray[sliderValue];\n    return !ValueHelper.isNullOrUndefined(step) ? step.value : NaN;\n  }\n  /**\n   * @return {?}\n   */\n  applyViewChange() {\n    this.value = this.viewValueToModelValue(this.viewLowValue);\n    if (this.range) {\n      this.highValue = this.viewValueToModelValue(this.viewHighValue);\n    }\n    this.outputModelChangeSubject.next({\n      value: this.value,\n      highValue: this.highValue,\n      userEventInitiated: true,\n      forceChange: false\n    });\n    // At this point all changes are applied and outputs are emitted, so we should be done.\n    // However, input changes are communicated in different stream and we need to be ready to\n    // act on the next input change even if it is exactly the same as last input change.\n    // Therefore, we send a special event to reset the stream.\n    this.inputModelChangeSubject.next({\n      value: this.value,\n      highValue: this.highValue,\n      forceChange: false,\n      internalChange: true\n    });\n  }\n  /**\n   * @param {?} modelChange\n   * @return {?}\n   */\n  applyInputModelChange(modelChange) {\n    const /** @type {?} */normalisedModelChange = this.normaliseModelValues(modelChange);\n    // If normalised model change is different, apply the change to the model values\n    const /** @type {?} */normalisationChange = !ModelValues.compare(modelChange, normalisedModelChange);\n    if (normalisationChange) {\n      this.value = normalisedModelChange.value;\n      this.highValue = normalisedModelChange.highValue;\n    }\n    this.viewLowValue = this.modelValueToViewValue(normalisedModelChange.value);\n    if (this.range) {\n      this.viewHighValue = this.modelValueToViewValue(normalisedModelChange.highValue);\n    } else {\n      this.viewHighValue = null;\n    }\n    this.updateLowHandle(this.valueToPosition(this.viewLowValue));\n    if (this.range) {\n      this.updateHighHandle(this.valueToPosition(this.viewHighValue));\n    }\n    this.updateSelectionBar();\n    this.updateTicksScale();\n    this.updateAriaAttributes();\n    if (this.range) {\n      this.updateCombinedLabel();\n    }\n    // At the end, we need to communicate the model change to the outputs as well\n    // Normalisation changes are also always forced out to ensure that subscribers always end up in correct state\n    this.outputModelChangeSubject.next({\n      value: normalisedModelChange.value,\n      highValue: normalisedModelChange.highValue,\n      forceChange: normalisationChange,\n      userEventInitiated: false\n    });\n  }\n  /**\n   * @param {?} modelChange\n   * @return {?}\n   */\n  publishOutputModelChange(modelChange) {\n    const /** @type {?} */emitOutputs = () => {\n      this.valueChange.emit(modelChange.value);\n      if (this.range) {\n        this.highValueChange.emit(modelChange.highValue);\n      }\n      if (!ValueHelper.isNullOrUndefined(this.onChangeCallback)) {\n        if (this.range) {\n          this.onChangeCallback([modelChange.value, modelChange.highValue]);\n        } else {\n          this.onChangeCallback(modelChange.value);\n        }\n      }\n      if (!ValueHelper.isNullOrUndefined(this.onTouchedCallback)) {\n        if (this.range) {\n          this.onTouchedCallback([modelChange.value, modelChange.highValue]);\n        } else {\n          this.onTouchedCallback(modelChange.value);\n        }\n      }\n    };\n    if (modelChange.userEventInitiated) {\n      // If this change was initiated by a user event, we can emit outputs in the same tick\n      emitOutputs();\n      this.userChange.emit(this.getChangeContext());\n    } else {\n      // But, if the change was initated by something else like a change in input bindings,\n      // we need to wait until next tick to emit the outputs to keep Angular change detection happy\n      setTimeout(() => {\n        emitOutputs();\n      });\n    }\n  }\n  /**\n   * @param {?} input\n   * @return {?}\n   */\n  normaliseModelValues(input) {\n    const /** @type {?} */normalisedInput = new ModelValues();\n    normalisedInput.value = input.value;\n    normalisedInput.highValue = input.highValue;\n    if (this.viewOptions.enforceStep) {\n      normalisedInput.value = this.roundStep(normalisedInput.value);\n      if (this.range) {\n        normalisedInput.highValue = this.roundStep(normalisedInput.highValue);\n      }\n    }\n    // Don't attempt to normalise further when using steps array (steps may be out of order and that is perfectly fine)\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) || !this.viewOptions.enforceRange) {\n      return normalisedInput;\n    }\n    normalisedInput.value = MathHelper.clampToRange(normalisedInput.value, this.viewOptions.floor, this.viewOptions.ceil);\n    if (this.range) {\n      normalisedInput.highValue = MathHelper.clampToRange(normalisedInput.highValue, this.viewOptions.floor, this.viewOptions.ceil);\n    }\n    // Make sure that range slider invariant (value <= highValue) is always satisfied\n    if (this.range && input.value > input.highValue) {\n      // We know that both values are now clamped correctly, they may just be in the wrong order\n      // So the easy solution is to swap them... except swapping is sometimes disabled in options, so we make the two values the same\n      if (this.viewOptions.noSwitching) {\n        normalisedInput.value = normalisedInput.highValue;\n      } else {\n        const /** @type {?} */tempValue = input.value;\n        normalisedInput.value = input.highValue;\n        normalisedInput.highValue = tempValue;\n      }\n    }\n    return normalisedInput;\n  }\n  /**\n   * @return {?}\n   */\n  renormaliseModelValues() {\n    const /** @type {?} */previousModelValues = {\n      value: this.value,\n      highValue: this.highValue\n    };\n    const /** @type {?} */normalisedModelValues = this.normaliseModelValues(previousModelValues);\n    if (!ModelValues.compare(normalisedModelValues, previousModelValues)) {\n      this.value = normalisedModelValues.value;\n      this.highValue = normalisedModelValues.highValue;\n      this.outputModelChangeSubject.next({\n        value: this.value,\n        highValue: this.highValue,\n        forceChange: true,\n        userEventInitiated: false\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n  onChangeOptions() {\n    if (!this.initHasRun) {\n      return;\n    }\n    const /** @type {?} */previousInputEventsInterval = this.viewOptions.inputEventsInterval;\n    const /** @type {?} */previousOutputEventsInterval = this.viewOptions.outputEventsInterval;\n    this.applyOptions();\n    if (previousInputEventsInterval !== this.viewOptions.inputEventsInterval) {\n      this.unsubscribeInputModelChangeSubject();\n      this.subscribeInputModelChangeSubject(this.viewOptions.inputEventsInterval);\n    }\n    if (previousOutputEventsInterval !== this.viewOptions.outputEventsInterval) {\n      this.unsubscribeInputModelChangeSubject();\n      this.subscribeInputModelChangeSubject(this.viewOptions.outputEventsInterval);\n    }\n    // With new options, we need to re-normalise model values if necessary\n    this.renormaliseModelValues();\n    this.viewLowValue = this.modelValueToViewValue(this.value);\n    if (this.range) {\n      this.viewHighValue = this.modelValueToViewValue(this.highValue);\n    } else {\n      this.viewHighValue = null;\n    }\n    this.resetSlider();\n  }\n  /**\n   * @return {?}\n   */\n  applyOptions() {\n    this.viewOptions = new Options();\n    Object.assign(this.viewOptions, this.options);\n    this.viewOptions.draggableRange = this.range && this.viewOptions.draggableRange;\n    this.viewOptions.draggableRangeOnly = this.range && this.viewOptions.draggableRangeOnly;\n    if (this.viewOptions.draggableRangeOnly) {\n      this.viewOptions.draggableRange = true;\n    }\n    this.viewOptions.showTicks = this.viewOptions.showTicks || this.viewOptions.showTicksValues || !ValueHelper.isNullOrUndefined(this.viewOptions.ticksArray);\n    if (this.viewOptions.showTicks && (!ValueHelper.isNullOrUndefined(this.viewOptions.tickStep) || !ValueHelper.isNullOrUndefined(this.viewOptions.ticksArray))) {\n      this.intermediateTicks = true;\n    }\n    this.viewOptions.showSelectionBar = this.viewOptions.showSelectionBar || this.viewOptions.showSelectionBarEnd || !ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue);\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray)) {\n      this.applyStepsArrayOptions();\n    } else {\n      this.applyFloorCeilOptions();\n    }\n    if (ValueHelper.isNullOrUndefined(this.viewOptions.combineLabels)) {\n      this.viewOptions.combineLabels = (minValue, maxValue) => {\n        return minValue + ' - ' + maxValue;\n      };\n    }\n    if (this.viewOptions.logScale && this.viewOptions.floor === 0) {\n      throw Error('Can\\'t use floor=0 with logarithmic scale');\n    }\n  }\n  /**\n   * @return {?}\n   */\n  applyStepsArrayOptions() {\n    this.viewOptions.floor = 0;\n    this.viewOptions.ceil = this.viewOptions.stepsArray.length - 1;\n    this.viewOptions.step = 1;\n    if (ValueHelper.isNullOrUndefined(this.viewOptions.translate)) {\n      this.viewOptions.translate = modelValue => {\n        if (this.viewOptions.bindIndexForStepsArray) {\n          return String(this.getStepValue(modelValue));\n        }\n        return String(modelValue);\n      };\n    }\n    this.viewOptions.getLegend = index => {\n      const /** @type {?} */step = this.viewOptions.stepsArray[index];\n      return step.legend;\n    };\n  }\n  /**\n   * @return {?}\n   */\n  applyFloorCeilOptions() {\n    if (ValueHelper.isNullOrUndefined(this.viewOptions.step)) {\n      this.viewOptions.step = 1;\n    } else {\n      this.viewOptions.step = +this.viewOptions.step;\n      if (this.viewOptions.step <= 0) {\n        this.viewOptions.step = 1;\n      }\n    }\n    if (ValueHelper.isNullOrUndefined(this.viewOptions.ceil) || ValueHelper.isNullOrUndefined(this.viewOptions.floor)) {\n      throw Error('floor and ceil options must be supplied');\n    }\n    this.viewOptions.ceil = +this.viewOptions.ceil;\n    this.viewOptions.floor = +this.viewOptions.floor;\n    if (ValueHelper.isNullOrUndefined(this.viewOptions.translate)) {\n      this.viewOptions.translate = value => String(value);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  resetSlider() {\n    this.manageElementsStyle();\n    this.addAccessibility();\n    this.updateCeilLabel();\n    this.updateFloorLabel();\n    this.unbindEvents();\n    this.manageEventsBindings();\n    this.updateDisabledState();\n    this.calculateViewDimensions();\n    this.refocusPointerIfNeeded();\n  }\n  /**\n   * @param {?} pointerType\n   * @return {?}\n   */\n  focusPointer(pointerType) {\n    // If not supplied, use min pointer as default\n    if (pointerType !== PointerType.Min && pointerType !== PointerType.Max) {\n      pointerType = PointerType.Min;\n    }\n    if (pointerType === PointerType.Min) {\n      this.minHandleElement.focus();\n    } else if (this.range && pointerType === PointerType.Max) {\n      this.maxHandleElement.focus();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  refocusPointerIfNeeded() {\n    if (!ValueHelper.isNullOrUndefined(this.currentFocusPointer)) {\n      this.onPointerFocus(this.currentFocusPointer);\n      const /** @type {?} */element = this.getPointerElement(this.currentFocusPointer);\n      element.focus();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  manageElementsStyle() {\n    this.updateScale();\n    this.floorLabelElement.setAlwaysHide(this.viewOptions.showTicksValues || this.viewOptions.hideLimitLabels);\n    this.ceilLabelElement.setAlwaysHide(this.viewOptions.showTicksValues || this.viewOptions.hideLimitLabels);\n    const /** @type {?} */hideLabelsForTicks = this.viewOptions.showTicksValues && !this.intermediateTicks;\n    this.minHandleLabelElement.setAlwaysHide(hideLabelsForTicks || this.viewOptions.hidePointerLabels);\n    this.maxHandleLabelElement.setAlwaysHide(hideLabelsForTicks || !this.range || this.viewOptions.hidePointerLabels);\n    this.combinedLabelElement.setAlwaysHide(hideLabelsForTicks || !this.range || this.viewOptions.hidePointerLabels);\n    this.selectionBarElement.setAlwaysHide(!this.range && !this.viewOptions.showSelectionBar);\n    this.leftOuterSelectionBarElement.setAlwaysHide(!this.range || !this.viewOptions.showOuterSelectionBars);\n    this.rightOuterSelectionBarElement.setAlwaysHide(!this.range || !this.viewOptions.showOuterSelectionBars);\n    this.fullBarTransparentClass = this.range && this.viewOptions.showOuterSelectionBars;\n    this.selectionBarDraggableClass = this.viewOptions.draggableRange && !this.viewOptions.onlyBindHandles;\n    this.ticksUnderValuesClass = this.intermediateTicks && this.options.showTicksValues;\n    if (this.sliderElementVerticalClass !== this.viewOptions.vertical) {\n      this.updateVerticalState();\n      // The above change in host component class will not be applied until the end of this cycle\n      // However, functions calculating the slider position expect the slider to be already styled as vertical\n      // So as a workaround, we need to reset the slider once again to compute the correct values\n      setTimeout(() => {\n        this.resetSlider();\n      });\n    }\n    // Changing animate class may interfere with slider reset/initialisation, so we should set it separately,\n    // after all is properly set up\n    if (this.sliderElementAnimateClass !== this.viewOptions.animate) {\n      setTimeout(() => {\n        this.sliderElementAnimateClass = this.viewOptions.animate;\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n  manageEventsBindings() {\n    if (this.viewOptions.disabled || this.viewOptions.readOnly) {\n      this.unbindEvents();\n    } else {\n      this.bindEvents();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  updateDisabledState() {\n    this.sliderElementDisabledAttr = this.viewOptions.disabled ? 'disabled' : null;\n  }\n  /**\n   * @return {?}\n   */\n  updateVerticalState() {\n    this.sliderElementVerticalClass = this.viewOptions.vertical;\n    for (const /** @type {?} */element of this.getAllSliderElements()) {\n      // This is also called before ngAfterInit, so need to check that view child bindings work\n      if (!ValueHelper.isNullOrUndefined(element)) {\n        element.setVertical(this.viewOptions.vertical);\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  updateScale() {\n    for (const /** @type {?} */element of this.getAllSliderElements()) {\n      element.setScale(this.viewOptions.scale);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  getAllSliderElements() {\n    return [this.leftOuterSelectionBarElement, this.rightOuterSelectionBarElement, this.fullBarElement, this.selectionBarElement, this.minHandleElement, this.maxHandleElement, this.floorLabelElement, this.ceilLabelElement, this.minHandleLabelElement, this.maxHandleLabelElement, this.combinedLabelElement, this.ticksElement];\n  }\n  /**\n   * @return {?}\n   */\n  initHandles() {\n    this.updateLowHandle(this.valueToPosition(this.viewLowValue));\n    /*\n       the order here is important since the selection bar should be\n       updated after the high handle but before the combined label\n       */\n    if (this.range) {\n      this.updateHighHandle(this.valueToPosition(this.viewHighValue));\n    }\n    this.updateSelectionBar();\n    if (this.range) {\n      this.updateCombinedLabel();\n    }\n    this.updateTicksScale();\n  }\n  /**\n   * @return {?}\n   */\n  addAccessibility() {\n    this.updateAriaAttributes();\n    this.minHandleElement.role = 'slider';\n    if (this.viewOptions.keyboardSupport && !(this.viewOptions.readOnly || this.viewOptions.disabled)) {\n      this.minHandleElement.tabindex = '0';\n    } else {\n      this.minHandleElement.tabindex = '';\n    }\n    if (this.viewOptions.vertical) {\n      this.minHandleElement.ariaOrientation = 'vertical';\n    }\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabel)) {\n      this.minHandleElement.ariaLabel = this.viewOptions.ariaLabel;\n    } else if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabelledBy)) {\n      this.minHandleElement.ariaLabelledBy = this.viewOptions.ariaLabelledBy;\n    }\n    if (this.range) {\n      this.maxHandleElement.role = 'slider';\n      if (this.viewOptions.keyboardSupport && !(this.viewOptions.readOnly || this.viewOptions.disabled)) {\n        this.maxHandleElement.tabindex = '0';\n      } else {\n        this.maxHandleElement.tabindex = '';\n      }\n      this.maxHandleElement.ariaOrientation = this.viewOptions.vertical ? 'vertical' : 'horizontal';\n      if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabelHigh)) {\n        this.maxHandleElement.ariaLabel = this.viewOptions.ariaLabelHigh;\n      } else if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabelledByHigh)) {\n        this.maxHandleElement.ariaLabelledBy = this.viewOptions.ariaLabelledByHigh;\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  updateAriaAttributes() {\n    this.minHandleElement.ariaValueNow = (+this.value).toString();\n    this.minHandleElement.ariaValueText = this.viewOptions.translate(+this.value, LabelType.Low);\n    this.minHandleElement.ariaValueMin = this.viewOptions.floor.toString();\n    this.minHandleElement.ariaValueMax = this.viewOptions.ceil.toString();\n    if (this.range) {\n      this.maxHandleElement.ariaValueNow = (+this.highValue).toString();\n      this.maxHandleElement.ariaValueText = this.viewOptions.translate(+this.highValue, LabelType.High);\n      this.maxHandleElement.ariaValueMin = this.viewOptions.floor.toString();\n      this.maxHandleElement.ariaValueMax = this.viewOptions.ceil.toString();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  calculateViewDimensions() {\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.handleDimension)) {\n      this.minHandleElement.setDimension(this.viewOptions.handleDimension);\n    } else {\n      this.minHandleElement.calculateDimension();\n    }\n    const /** @type {?} */handleWidth = this.minHandleElement.dimension;\n    this.handleHalfDimension = handleWidth / 2;\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.barDimension)) {\n      this.fullBarElement.setDimension(this.viewOptions.barDimension);\n    } else {\n      this.fullBarElement.calculateDimension();\n    }\n    this.maxHandlePosition = this.fullBarElement.dimension - handleWidth;\n    if (this.initHasRun) {\n      this.updateFloorLabel();\n      this.updateCeilLabel();\n      this.initHandles();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  calculateViewDimensionsAndDetectChanges() {\n    this.calculateViewDimensions();\n    if (!this.isRefDestroyed()) {\n      this.changeDetectionRef.detectChanges();\n    }\n  }\n  /**\n   * If the slider reference is already destroyed\n   * @return {?} boolean - true if ref is destroyed\n   */\n  isRefDestroyed() {\n    return this.changeDetectionRef['destroyed'];\n  }\n  /**\n   * @return {?}\n   */\n  updateTicksScale() {\n    if (!this.viewOptions.showTicks) {\n      return;\n    }\n    const /** @type {?} */ticksArray = !ValueHelper.isNullOrUndefined(this.viewOptions.ticksArray) ? this.viewOptions.ticksArray : this.getTicksArray();\n    const /** @type {?} */translate = this.viewOptions.vertical ? 'translateY' : 'translateX';\n    if (this.viewOptions.rightToLeft) {\n      ticksArray.reverse();\n    }\n    const /** @type {?} */newTicks = ticksArray.map(value => {\n      let /** @type {?} */position = this.valueToPosition(value);\n      if (this.viewOptions.vertical) {\n        position = this.maxHandlePosition - position;\n      }\n      const /** @type {?} */translation = translate + '(' + Math.round(position) + 'px)';\n      const /** @type {?} */tick = new Tick();\n      tick.selected = this.isTickSelected(value);\n      tick.style = {\n        '-webkit-transform': translation,\n        '-moz-transform': translation,\n        '-o-transform': translation,\n        '-ms-transform': translation,\n        transform: translation\n      };\n      if (tick.selected && !ValueHelper.isNullOrUndefined(this.viewOptions.getSelectionBarColor)) {\n        tick.style['background-color'] = this.getSelectionBarColor();\n      }\n      if (!tick.selected && !ValueHelper.isNullOrUndefined(this.viewOptions.getTickColor)) {\n        tick.style['background-color'] = this.getTickColor(value);\n      }\n      if (!ValueHelper.isNullOrUndefined(this.viewOptions.ticksTooltip)) {\n        tick.tooltip = this.viewOptions.ticksTooltip(value);\n        tick.tooltipPlacement = this.viewOptions.vertical ? 'right' : 'top';\n      }\n      if (this.viewOptions.showTicksValues && value % this.viewOptions.tickValueStep === 0) {\n        tick.value = this.getDisplayValue(value, LabelType.TickValue);\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.ticksValuesTooltip)) {\n          tick.valueTooltip = this.viewOptions.ticksValuesTooltip(value);\n          tick.valueTooltipPlacement = this.viewOptions.vertical ? 'right' : 'top';\n        }\n      }\n      if (!ValueHelper.isNullOrUndefined(this.viewOptions.getLegend)) {\n        const /** @type {?} */legend = this.viewOptions.getLegend(value);\n        if (!ValueHelper.isNullOrUndefined(legend)) {\n          tick.legend = legend;\n        }\n      }\n      return tick;\n    });\n    // We should avoid re-creating the ticks array if possible\n    // This both improves performance and makes CSS animations work correctly\n    if (!ValueHelper.isNullOrUndefined(this.ticks) && this.ticks.length === newTicks.length) {\n      for (let /** @type {?} */i = 0; i < newTicks.length; ++i) {\n        Object.assign(this.ticks[i], newTicks[i]);\n      }\n    } else {\n      this.ticks = newTicks;\n    }\n    if (!this.isRefDestroyed()) {\n      this.changeDetectionRef.detectChanges();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  getTicksArray() {\n    const /** @type {?} */step = !ValueHelper.isNullOrUndefined(this.viewOptions.tickStep) ? this.viewOptions.tickStep : this.viewOptions.step;\n    const /** @type {?} */ticksArray = [];\n    for (let /** @type {?} */value = this.viewOptions.floor; value <= this.viewOptions.ceil; value += step) {\n      ticksArray.push(value);\n    }\n    return ticksArray;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  isTickSelected(value) {\n    if (!this.range) {\n      if (!ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue)) {\n        const /** @type {?} */center = this.viewOptions.showSelectionBarFromValue;\n        if (this.viewLowValue > center && value >= center && value <= this.viewLowValue) {\n          return true;\n        } else if (this.viewLowValue < center && value <= center && value >= this.viewLowValue) {\n          return true;\n        }\n      } else if (this.viewOptions.showSelectionBarEnd) {\n        if (value >= this.viewLowValue) {\n          return true;\n        }\n      } else if (this.viewOptions.showSelectionBar && value <= this.viewLowValue) {\n        return true;\n      }\n    }\n    if (this.range && value >= this.viewLowValue && value <= this.viewHighValue) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * @return {?}\n   */\n  updateFloorLabel() {\n    if (!this.floorLabelElement.alwaysHide) {\n      this.floorLabelElement.setValue(this.getDisplayValue(this.viewOptions.floor, LabelType.Floor));\n      this.floorLabelElement.calculateDimension();\n      const /** @type {?} */position = this.viewOptions.rightToLeft ? this.fullBarElement.dimension - this.floorLabelElement.dimension : 0;\n      this.floorLabelElement.setPosition(position);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  updateCeilLabel() {\n    if (!this.ceilLabelElement.alwaysHide) {\n      this.ceilLabelElement.setValue(this.getDisplayValue(this.viewOptions.ceil, LabelType.Ceil));\n      this.ceilLabelElement.calculateDimension();\n      const /** @type {?} */position = this.viewOptions.rightToLeft ? 0 : this.fullBarElement.dimension - this.ceilLabelElement.dimension;\n      this.ceilLabelElement.setPosition(position);\n    }\n  }\n  /**\n   * @param {?} which\n   * @param {?} newPos\n   * @return {?}\n   */\n  updateHandles(which, newPos) {\n    if (which === PointerType.Min) {\n      this.updateLowHandle(newPos);\n    } else if (which === PointerType.Max) {\n      this.updateHighHandle(newPos);\n    }\n    this.updateSelectionBar();\n    this.updateTicksScale();\n    if (this.range) {\n      this.updateCombinedLabel();\n    }\n  }\n  /**\n   * @param {?} labelType\n   * @param {?} newPos\n   * @return {?}\n   */\n  getHandleLabelPos(labelType, newPos) {\n    const /** @type {?} */labelDimension = labelType === PointerType.Min ? this.minHandleLabelElement.dimension : this.maxHandleLabelElement.dimension;\n    const /** @type {?} */nearHandlePos = newPos - labelDimension / 2 + this.handleHalfDimension;\n    const /** @type {?} */endOfBarPos = this.fullBarElement.dimension - labelDimension;\n    if (!this.viewOptions.boundPointerLabels) {\n      return nearHandlePos;\n    }\n    if (this.viewOptions.rightToLeft && labelType === PointerType.Min || !this.viewOptions.rightToLeft && labelType === PointerType.Max) {\n      return Math.min(nearHandlePos, endOfBarPos);\n    } else {\n      return Math.min(Math.max(nearHandlePos, 0), endOfBarPos);\n    }\n  }\n  /**\n   * @param {?} newPos\n   * @return {?}\n   */\n  updateLowHandle(newPos) {\n    this.minHandleElement.setPosition(newPos);\n    this.minHandleLabelElement.setValue(this.getDisplayValue(this.viewLowValue, LabelType.Low));\n    this.minHandleLabelElement.setPosition(this.getHandleLabelPos(PointerType.Min, newPos));\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.getPointerColor)) {\n      this.minPointerStyle = {\n        backgroundColor: this.getPointerColor(PointerType.Min)\n      };\n    }\n    if (this.viewOptions.autoHideLimitLabels) {\n      this.updateFloorAndCeilLabelsVisibility();\n    }\n  }\n  /**\n   * @param {?} newPos\n   * @return {?}\n   */\n  updateHighHandle(newPos) {\n    this.maxHandleElement.setPosition(newPos);\n    this.maxHandleLabelElement.setValue(this.getDisplayValue(this.viewHighValue, LabelType.High));\n    this.maxHandleLabelElement.setPosition(this.getHandleLabelPos(PointerType.Max, newPos));\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.getPointerColor)) {\n      this.maxPointerStyle = {\n        backgroundColor: this.getPointerColor(PointerType.Max)\n      };\n    }\n    if (this.viewOptions.autoHideLimitLabels) {\n      this.updateFloorAndCeilLabelsVisibility();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  updateFloorAndCeilLabelsVisibility() {\n    // Show based only on hideLimitLabels if pointer labels are hidden\n    if (this.viewOptions.hidePointerLabels) {\n      return;\n    }\n    let /** @type {?} */floorLabelHidden = false;\n    let /** @type {?} */ceilLabelHidden = false;\n    const /** @type {?} */isMinLabelAtFloor = this.isLabelBelowFloorLabel(this.minHandleLabelElement);\n    const /** @type {?} */isMinLabelAtCeil = this.isLabelAboveCeilLabel(this.minHandleLabelElement);\n    const /** @type {?} */isMaxLabelAtCeil = this.isLabelAboveCeilLabel(this.maxHandleLabelElement);\n    const /** @type {?} */isCombinedLabelAtFloor = this.isLabelBelowFloorLabel(this.combinedLabelElement);\n    const /** @type {?} */isCombinedLabelAtCeil = this.isLabelAboveCeilLabel(this.combinedLabelElement);\n    if (isMinLabelAtFloor) {\n      floorLabelHidden = true;\n      this.floorLabelElement.hide();\n    } else {\n      floorLabelHidden = false;\n      this.floorLabelElement.show();\n    }\n    if (isMinLabelAtCeil) {\n      ceilLabelHidden = true;\n      this.ceilLabelElement.hide();\n    } else {\n      ceilLabelHidden = false;\n      this.ceilLabelElement.show();\n    }\n    if (this.range) {\n      const /** @type {?} */hideCeil = this.combinedLabelElement.isVisible() ? isCombinedLabelAtCeil : isMaxLabelAtCeil;\n      const /** @type {?} */hideFloor = this.combinedLabelElement.isVisible() ? isCombinedLabelAtFloor : isMinLabelAtFloor;\n      if (hideCeil) {\n        this.ceilLabelElement.hide();\n      } else if (!ceilLabelHidden) {\n        this.ceilLabelElement.show();\n      }\n      // Hide or show floor label\n      if (hideFloor) {\n        this.floorLabelElement.hide();\n      } else if (!floorLabelHidden) {\n        this.floorLabelElement.show();\n      }\n    }\n  }\n  /**\n   * @param {?} label\n   * @return {?}\n   */\n  isLabelBelowFloorLabel(label) {\n    const /** @type {?} */pos = label.position;\n    const /** @type {?} */dim = label.dimension;\n    const /** @type {?} */floorPos = this.floorLabelElement.position;\n    const /** @type {?} */floorDim = this.floorLabelElement.dimension;\n    return this.viewOptions.rightToLeft ? pos + dim >= floorPos - 2 : pos <= floorPos + floorDim + 2;\n  }\n  /**\n   * @param {?} label\n   * @return {?}\n   */\n  isLabelAboveCeilLabel(label) {\n    const /** @type {?} */pos = label.position;\n    const /** @type {?} */dim = label.dimension;\n    const /** @type {?} */ceilPos = this.ceilLabelElement.position;\n    const /** @type {?} */ceilDim = this.ceilLabelElement.dimension;\n    return this.viewOptions.rightToLeft ? pos <= ceilPos + ceilDim + 2 : pos + dim >= ceilPos - 2;\n  }\n  /**\n   * @return {?}\n   */\n  updateSelectionBar() {\n    let /** @type {?} */position = 0;\n    let /** @type {?} */dimension = 0;\n    const /** @type {?} */isSelectionBarFromRight = this.viewOptions.rightToLeft ? !this.viewOptions.showSelectionBarEnd : this.viewOptions.showSelectionBarEnd;\n    const /** @type {?} */positionForRange = this.viewOptions.rightToLeft ? this.maxHandleElement.position + this.handleHalfDimension : this.minHandleElement.position + this.handleHalfDimension;\n    if (this.range) {\n      dimension = Math.abs(this.maxHandleElement.position - this.minHandleElement.position);\n      position = positionForRange;\n    } else {\n      if (!ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue)) {\n        const /** @type {?} */center = this.viewOptions.showSelectionBarFromValue;\n        const /** @type {?} */centerPosition = this.valueToPosition(center);\n        const /** @type {?} */isModelGreaterThanCenter = this.viewOptions.rightToLeft ? this.viewLowValue <= center : this.viewLowValue > center;\n        if (isModelGreaterThanCenter) {\n          dimension = this.minHandleElement.position - centerPosition;\n          position = centerPosition + this.handleHalfDimension;\n        } else {\n          dimension = centerPosition - this.minHandleElement.position;\n          position = this.minHandleElement.position + this.handleHalfDimension;\n        }\n      } else if (isSelectionBarFromRight) {\n        dimension = Math.ceil(Math.abs(this.maxHandlePosition - this.minHandleElement.position) + this.handleHalfDimension);\n        position = Math.floor(this.minHandleElement.position + this.handleHalfDimension);\n      } else {\n        dimension = this.minHandleElement.position + this.handleHalfDimension;\n        position = 0;\n      }\n    }\n    this.selectionBarElement.setDimension(dimension);\n    this.selectionBarElement.setPosition(position);\n    if (this.range && this.viewOptions.showOuterSelectionBars) {\n      if (this.viewOptions.rightToLeft) {\n        this.rightOuterSelectionBarElement.setDimension(position);\n        this.rightOuterSelectionBarElement.setPosition(0);\n        this.fullBarElement.calculateDimension();\n        this.leftOuterSelectionBarElement.setDimension(this.fullBarElement.dimension - (position + dimension));\n        this.leftOuterSelectionBarElement.setPosition(position + dimension);\n      } else {\n        this.leftOuterSelectionBarElement.setDimension(position);\n        this.leftOuterSelectionBarElement.setPosition(0);\n        this.fullBarElement.calculateDimension();\n        this.rightOuterSelectionBarElement.setDimension(this.fullBarElement.dimension - (position + dimension));\n        this.rightOuterSelectionBarElement.setPosition(position + dimension);\n      }\n    }\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.getSelectionBarColor)) {\n      const /** @type {?} */color = this.getSelectionBarColor();\n      this.barStyle = {\n        backgroundColor: color\n      };\n    } else if (!ValueHelper.isNullOrUndefined(this.viewOptions.selectionBarGradient)) {\n      const /** @type {?} */offset = !ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue) ? this.valueToPosition(this.viewOptions.showSelectionBarFromValue) : 0;\n      const /** @type {?} */reversed = offset - position > 0 && !isSelectionBarFromRight || offset - position <= 0 && isSelectionBarFromRight;\n      const /** @type {?} */direction = this.viewOptions.vertical ? reversed ? 'bottom' : 'top' : reversed ? 'left' : 'right';\n      this.barStyle = {\n        backgroundImage: 'linear-gradient(to ' + direction + ', ' + this.viewOptions.selectionBarGradient.from + ' 0%,' + this.viewOptions.selectionBarGradient.to + ' 100%)'\n      };\n      if (this.viewOptions.vertical) {\n        this.barStyle.backgroundPosition = 'center ' + (offset + dimension + position + (reversed ? -this.handleHalfDimension : 0)) + 'px';\n        this.barStyle.backgroundSize = '100% ' + (this.fullBarElement.dimension - this.handleHalfDimension) + 'px';\n      } else {\n        this.barStyle.backgroundPosition = offset - position + (reversed ? this.handleHalfDimension : 0) + 'px center';\n        this.barStyle.backgroundSize = this.fullBarElement.dimension - this.handleHalfDimension + 'px 100%';\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  getSelectionBarColor() {\n    if (this.range) {\n      return this.viewOptions.getSelectionBarColor(this.value, this.highValue);\n    }\n    return this.viewOptions.getSelectionBarColor(this.value);\n  }\n  /**\n   * @param {?} pointerType\n   * @return {?}\n   */\n  getPointerColor(pointerType) {\n    if (pointerType === PointerType.Max) {\n      return this.viewOptions.getPointerColor(this.highValue, pointerType);\n    }\n    return this.viewOptions.getPointerColor(this.value, pointerType);\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  getTickColor(value) {\n    return this.viewOptions.getTickColor(value);\n  }\n  /**\n   * @return {?}\n   */\n  updateCombinedLabel() {\n    let /** @type {?} */isLabelOverlap = null;\n    if (this.viewOptions.rightToLeft) {\n      isLabelOverlap = this.minHandleLabelElement.position - this.minHandleLabelElement.dimension - 10 <= this.maxHandleLabelElement.position;\n    } else {\n      isLabelOverlap = this.minHandleLabelElement.position + this.minHandleLabelElement.dimension + 10 >= this.maxHandleLabelElement.position;\n    }\n    if (isLabelOverlap) {\n      const /** @type {?} */lowDisplayValue = this.getDisplayValue(this.viewLowValue, LabelType.Low);\n      const /** @type {?} */highDisplayValue = this.getDisplayValue(this.viewHighValue, LabelType.High);\n      const /** @type {?} */combinedLabelValue = this.viewOptions.rightToLeft ? this.viewOptions.combineLabels(highDisplayValue, lowDisplayValue) : this.viewOptions.combineLabels(lowDisplayValue, highDisplayValue);\n      this.combinedLabelElement.setValue(combinedLabelValue);\n      const /** @type {?} */pos = this.viewOptions.boundPointerLabels ? Math.min(Math.max(this.selectionBarElement.position + this.selectionBarElement.dimension / 2 - this.combinedLabelElement.dimension / 2, 0), this.fullBarElement.dimension - this.combinedLabelElement.dimension) : this.selectionBarElement.position + this.selectionBarElement.dimension / 2 - this.combinedLabelElement.dimension / 2;\n      this.combinedLabelElement.setPosition(pos);\n      this.minHandleLabelElement.hide();\n      this.maxHandleLabelElement.hide();\n      this.combinedLabelElement.show();\n    } else {\n      this.updateHighHandle(this.valueToPosition(this.viewHighValue));\n      this.updateLowHandle(this.valueToPosition(this.viewLowValue));\n      this.maxHandleLabelElement.show();\n      this.minHandleLabelElement.show();\n      this.combinedLabelElement.hide();\n    }\n    if (this.viewOptions.autoHideLimitLabels) {\n      this.updateFloorAndCeilLabelsVisibility();\n    }\n  }\n  /**\n   * @param {?} value\n   * @param {?} which\n   * @return {?}\n   */\n  getDisplayValue(value, which) {\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) && !this.viewOptions.bindIndexForStepsArray) {\n      value = this.getStepValue(value);\n    }\n    return this.viewOptions.translate(value, which);\n  }\n  /**\n   * @param {?} value\n   * @param {?=} customStep\n   * @return {?}\n   */\n  roundStep(value, customStep) {\n    const /** @type {?} */step = !ValueHelper.isNullOrUndefined(customStep) ? customStep : this.viewOptions.step;\n    let /** @type {?} */steppedDifference = MathHelper.roundToPrecisionLimit((value - this.viewOptions.floor) / step, this.viewOptions.precisionLimit);\n    steppedDifference = Math.round(steppedDifference) * step;\n    return MathHelper.roundToPrecisionLimit(this.viewOptions.floor + steppedDifference, this.viewOptions.precisionLimit);\n  }\n  /**\n   * @param {?} val\n   * @return {?}\n   */\n  valueToPosition(val) {\n    let /** @type {?} */fn = ValueHelper.linearValueToPosition;\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.customValueToPosition)) {\n      fn = this.viewOptions.customValueToPosition;\n    } else if (this.viewOptions.logScale) {\n      fn = ValueHelper.logValueToPosition;\n    }\n    val = MathHelper.clampToRange(val, this.viewOptions.floor, this.viewOptions.ceil);\n    let /** @type {?} */percent = fn(val, this.viewOptions.floor, this.viewOptions.ceil);\n    if (ValueHelper.isNullOrUndefined(percent)) {\n      percent = 0;\n    }\n    if (this.viewOptions.rightToLeft) {\n      percent = 1 - percent;\n    }\n    return percent * this.maxHandlePosition;\n  }\n  /**\n   * @param {?} position\n   * @return {?}\n   */\n  positionToValue(position) {\n    let /** @type {?} */percent = position / this.maxHandlePosition;\n    if (this.viewOptions.rightToLeft) {\n      percent = 1 - percent;\n    }\n    let /** @type {?} */fn = ValueHelper.linearPositionToValue;\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.customPositionToValue)) {\n      fn = this.viewOptions.customPositionToValue;\n    } else if (this.viewOptions.logScale) {\n      fn = ValueHelper.logPositionToValue;\n    }\n    const /** @type {?} */value = fn(percent, this.viewOptions.floor, this.viewOptions.ceil);\n    return !ValueHelper.isNullOrUndefined(value) ? value : 0;\n  }\n  /**\n   * @param {?} event\n   * @param {?=} targetTouchId\n   * @return {?}\n   */\n  getEventXY(event, targetTouchId) {\n    if (event instanceof MouseEvent) {\n      return this.viewOptions.vertical ? event.clientY : event.clientX;\n    }\n    let /** @type {?} */touchIndex = 0;\n    const /** @type {?} */touches = event.touches;\n    if (!ValueHelper.isNullOrUndefined(targetTouchId)) {\n      for (let /** @type {?} */i = 0; i < touches.length; i++) {\n        if (touches[i].identifier === targetTouchId) {\n          touchIndex = i;\n          break;\n        }\n      }\n    }\n    // Return the target touch or if the target touch was not found in the event\n    // returns the coordinates of the first touch\n    return this.viewOptions.vertical ? touches[touchIndex].clientY : touches[touchIndex].clientX;\n  }\n  /**\n   * @param {?} event\n   * @param {?=} targetTouchId\n   * @return {?}\n   */\n  getEventPosition(event, targetTouchId) {\n    const /** @type {?} */sliderElementBoundingRect = this.elementRef.nativeElement.getBoundingClientRect();\n    const /** @type {?} */sliderPos = this.viewOptions.vertical ? sliderElementBoundingRect.bottom : sliderElementBoundingRect.left;\n    let /** @type {?} */eventPos = 0;\n    if (this.viewOptions.vertical) {\n      eventPos = -this.getEventXY(event, targetTouchId) + sliderPos;\n    } else {\n      eventPos = this.getEventXY(event, targetTouchId) - sliderPos;\n    }\n    return eventPos * this.viewOptions.scale - this.handleHalfDimension;\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  getNearestHandle(event) {\n    if (!this.range) {\n      return PointerType.Min;\n    }\n    const /** @type {?} */position = this.getEventPosition(event);\n    const /** @type {?} */distanceMin = Math.abs(position - this.minHandleElement.position);\n    const /** @type {?} */distanceMax = Math.abs(position - this.maxHandleElement.position);\n    if (distanceMin < distanceMax) {\n      return PointerType.Min;\n    } else if (distanceMin > distanceMax) {\n      return PointerType.Max;\n    } else if (!this.viewOptions.rightToLeft) {\n      // if event is at the same distance from min/max then if it's at left of minH, we return minH else maxH\n      return position < this.minHandleElement.position ? PointerType.Min : PointerType.Max;\n    }\n    // reverse in rtl\n    return position > this.minHandleElement.position ? PointerType.Min : PointerType.Max;\n  }\n  /**\n   * @return {?}\n   */\n  bindEvents() {\n    const /** @type {?} */draggableRange = this.viewOptions.draggableRange;\n    if (!this.viewOptions.onlyBindHandles) {\n      this.selectionBarElement.on('mousedown', event => this.onBarStart(null, draggableRange, event, true, true, true));\n    }\n    if (this.viewOptions.draggableRangeOnly) {\n      this.minHandleElement.on('mousedown', event => this.onBarStart(PointerType.Min, draggableRange, event, true, true));\n      this.maxHandleElement.on('mousedown', event => this.onBarStart(PointerType.Max, draggableRange, event, true, true));\n    } else {\n      this.minHandleElement.on('mousedown', event => this.onStart(PointerType.Min, event, true, true));\n      if (this.range) {\n        this.maxHandleElement.on('mousedown', event => this.onStart(PointerType.Max, event, true, true));\n      }\n      if (!this.viewOptions.onlyBindHandles) {\n        this.fullBarElement.on('mousedown', event => this.onStart(null, event, true, true, true));\n        this.ticksElement.on('mousedown', event => this.onStart(null, event, true, true, true, true));\n      }\n    }\n    if (!this.viewOptions.onlyBindHandles) {\n      this.selectionBarElement.onPassive('touchstart', event => this.onBarStart(null, draggableRange, event, true, true, true));\n    }\n    if (this.viewOptions.draggableRangeOnly) {\n      this.minHandleElement.onPassive('touchstart', event => this.onBarStart(PointerType.Min, draggableRange, event, true, true));\n      this.maxHandleElement.onPassive('touchstart', event => this.onBarStart(PointerType.Max, draggableRange, event, true, true));\n    } else {\n      this.minHandleElement.onPassive('touchstart', event => this.onStart(PointerType.Min, event, true, true));\n      if (this.range) {\n        this.maxHandleElement.onPassive('touchstart', event => this.onStart(PointerType.Max, event, true, true));\n      }\n      if (!this.viewOptions.onlyBindHandles) {\n        this.fullBarElement.onPassive('touchstart', event => this.onStart(null, event, true, true, true));\n        this.ticksElement.onPassive('touchstart', event => this.onStart(null, event, false, false, true, true));\n      }\n    }\n    if (this.viewOptions.keyboardSupport) {\n      this.minHandleElement.on('focus', () => this.onPointerFocus(PointerType.Min));\n      if (this.range) {\n        this.maxHandleElement.on('focus', () => this.onPointerFocus(PointerType.Max));\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  unbindEvents() {\n    this.unsubscribeOnMove();\n    this.unsubscribeOnEnd();\n    for (const /** @type {?} */element of this.getAllSliderElements()) {\n      if (!ValueHelper.isNullOrUndefined(element)) {\n        element.off();\n      }\n    }\n  }\n  /**\n   * @param {?} pointerType\n   * @param {?} draggableRange\n   * @param {?} event\n   * @param {?} bindMove\n   * @param {?} bindEnd\n   * @param {?=} simulateImmediateMove\n   * @param {?=} simulateImmediateEnd\n   * @return {?}\n   */\n  onBarStart(pointerType, draggableRange, event, bindMove, bindEnd, simulateImmediateMove, simulateImmediateEnd) {\n    if (draggableRange) {\n      this.onDragStart(pointerType, event, bindMove, bindEnd);\n    } else {\n      this.onStart(pointerType, event, bindMove, bindEnd, simulateImmediateMove, simulateImmediateEnd);\n    }\n  }\n  /**\n   * @param {?} pointerType\n   * @param {?} event\n   * @param {?} bindMove\n   * @param {?} bindEnd\n   * @param {?=} simulateImmediateMove\n   * @param {?=} simulateImmediateEnd\n   * @return {?}\n   */\n  onStart(pointerType, event, bindMove, bindEnd, simulateImmediateMove, simulateImmediateEnd) {\n    event.stopPropagation();\n    // Only call preventDefault() when handling non-passive events (passive events don't need it)\n    if (!CompatibilityHelper.isTouchEvent(event) || !detectPassiveEvents.hasSupport) {\n      event.preventDefault();\n    }\n    // We have to do this in case the HTML where the sliders are on\n    // have been animated into view.\n    this.calculateViewDimensions();\n    if (ValueHelper.isNullOrUndefined(pointerType)) {\n      pointerType = this.getNearestHandle(event);\n    }\n    this.currentTrackingPointer = pointerType;\n    const /** @type {?} */pointerElement = this.getPointerElement(pointerType);\n    pointerElement.active = true;\n    if (this.viewOptions.keyboardSupport) {\n      pointerElement.focus();\n    }\n    if (bindMove) {\n      this.unsubscribeOnMove();\n      const /** @type {?} */onMoveCallback = e => this.dragging.active ? this.onDragMove(e) : this.onMove(e);\n      if (CompatibilityHelper.isTouchEvent(event)) {\n        this.onMoveEventListener = this.eventListenerHelper.attachPassiveEventListener(document, 'touchmove', onMoveCallback, this.viewOptions.touchEventsInterval);\n      } else {\n        this.onMoveEventListener = this.eventListenerHelper.attachEventListener(document, 'mousemove', onMoveCallback, this.viewOptions.mouseEventsInterval);\n      }\n    }\n    if (bindEnd) {\n      this.unsubscribeOnEnd();\n      const /** @type {?} */onEndCallback = e => this.onEnd(e);\n      if (CompatibilityHelper.isTouchEvent(event)) {\n        this.onEndEventListener = this.eventListenerHelper.attachPassiveEventListener(document, 'touchend', onEndCallback);\n      } else {\n        this.onEndEventListener = this.eventListenerHelper.attachEventListener(document, 'mouseup', onEndCallback);\n      }\n    }\n    this.userChangeStart.emit(this.getChangeContext());\n    if (CompatibilityHelper.isTouchEvent(event) && !ValueHelper.isNullOrUndefined( /** @type {?} */event.changedTouches)) {\n      // Store the touch identifier\n      if (ValueHelper.isNullOrUndefined(this.touchId)) {\n        this.touchId = /** @type {?} */event.changedTouches[0].identifier;\n      }\n    }\n    // Click events, either with mouse or touch gesture are weird. Sometimes they result in full\n    // start, move, end sequence, and sometimes, they don't - they only invoke mousedown\n    // As a workaround, we simulate the first move event and the end event if it's necessary\n    if (simulateImmediateMove) {\n      this.onMove(event, true);\n    }\n    if (simulateImmediateEnd) {\n      this.onEnd(event);\n    }\n  }\n  /**\n   * @param {?} event\n   * @param {?=} fromTick\n   * @return {?}\n   */\n  onMove(event, fromTick) {\n    let /** @type {?} */touchForThisSlider = null;\n    if (CompatibilityHelper.isTouchEvent(event)) {\n      const /** @type {?} */changedTouches = /** @type {?} */event.changedTouches;\n      for (let /** @type {?} */i = 0; i < changedTouches.length; i++) {\n        if (changedTouches[i].identifier === this.touchId) {\n          touchForThisSlider = changedTouches[i];\n          break;\n        }\n      }\n      if (ValueHelper.isNullOrUndefined(touchForThisSlider)) {\n        return;\n      }\n    }\n    const /** @type {?} */newPos = !ValueHelper.isNullOrUndefined(touchForThisSlider) ? this.getEventPosition(event, touchForThisSlider.identifier) : this.getEventPosition(event);\n    let /** @type {?} */newValue;\n    const /** @type {?} */ceilValue = this.viewOptions.rightToLeft ? this.viewOptions.floor : this.viewOptions.ceil;\n    const /** @type {?} */floorValue = this.viewOptions.rightToLeft ? this.viewOptions.ceil : this.viewOptions.floor;\n    if (newPos <= 0) {\n      newValue = floorValue;\n    } else if (newPos >= this.maxHandlePosition) {\n      newValue = ceilValue;\n    } else {\n      newValue = this.positionToValue(newPos);\n      if (fromTick && !ValueHelper.isNullOrUndefined(this.viewOptions.tickStep)) {\n        newValue = this.roundStep(newValue, this.viewOptions.tickStep);\n      } else {\n        newValue = this.roundStep(newValue);\n      }\n    }\n    this.positionTrackingHandle(newValue);\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  onEnd(event) {\n    if (CompatibilityHelper.isTouchEvent(event)) {\n      const /** @type {?} */changedTouches = /** @type {?} */event.changedTouches;\n      if (changedTouches[0].identifier !== this.touchId) {\n        return;\n      }\n    }\n    this.touchId = null;\n    if (!this.viewOptions.keyboardSupport) {\n      this.minHandleElement.active = false;\n      this.maxHandleElement.active = false;\n      this.currentTrackingPointer = null;\n    }\n    this.dragging.active = false;\n    this.unsubscribeOnMove();\n    this.unsubscribeOnEnd();\n    this.userChangeEnd.emit(this.getChangeContext());\n  }\n  /**\n   * @param {?} pointerType\n   * @return {?}\n   */\n  onPointerFocus(pointerType) {\n    const /** @type {?} */pointerElement = this.getPointerElement(pointerType);\n    pointerElement.on('blur', () => this.onPointerBlur(pointerElement));\n    pointerElement.on('keydown', event => this.onKeyboardEvent(event));\n    pointerElement.on('keyup', () => this.onKeyUp());\n    pointerElement.active = true;\n    this.currentTrackingPointer = pointerType;\n    this.currentFocusPointer = pointerType;\n    this.firstKeyDown = true;\n  }\n  /**\n   * @return {?}\n   */\n  onKeyUp() {\n    this.firstKeyDown = true;\n    this.userChangeEnd.emit(this.getChangeContext());\n  }\n  /**\n   * @param {?} pointer\n   * @return {?}\n   */\n  onPointerBlur(pointer) {\n    pointer.off('blur');\n    pointer.off('keydown');\n    pointer.off('keyup');\n    pointer.active = false;\n    if (ValueHelper.isNullOrUndefined(this.touchId)) {\n      this.currentTrackingPointer = null;\n      this.currentFocusPointer = null;\n    }\n  }\n  /**\n   * @param {?} currentValue\n   * @return {?}\n   */\n  getKeyActions(currentValue) {\n    const /** @type {?} */valueRange = this.viewOptions.ceil - this.viewOptions.floor;\n    let /** @type {?} */increaseStep = currentValue + this.viewOptions.step;\n    let /** @type {?} */decreaseStep = currentValue - this.viewOptions.step;\n    let /** @type {?} */increasePage = currentValue + valueRange / 10;\n    let /** @type {?} */decreasePage = currentValue - valueRange / 10;\n    if (this.viewOptions.reversedControls) {\n      increaseStep = currentValue - this.viewOptions.step;\n      decreaseStep = currentValue + this.viewOptions.step;\n      increasePage = currentValue - valueRange / 10;\n      decreasePage = currentValue + valueRange / 10;\n    }\n    // Left to right default actions\n    const /** @type {?} */actions = {\n      UP: increaseStep,\n      DOWN: decreaseStep,\n      LEFT: decreaseStep,\n      RIGHT: increaseStep,\n      PAGEUP: increasePage,\n      PAGEDOWN: decreasePage,\n      HOME: this.viewOptions.reversedControls ? this.viewOptions.ceil : this.viewOptions.floor,\n      END: this.viewOptions.reversedControls ? this.viewOptions.floor : this.viewOptions.ceil\n    };\n    // right to left means swapping right and left arrows\n    if (this.viewOptions.rightToLeft) {\n      actions[\"LEFT\"] = increaseStep;\n      actions[\"RIGHT\"] = decreaseStep;\n      // right to left and vertical means we also swap up and down\n      if (this.viewOptions.vertical) {\n        actions[\"UP\"] = decreaseStep;\n        actions[\"DOWN\"] = increaseStep;\n      }\n    }\n    return actions;\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  onKeyboardEvent(event) {\n    const /** @type {?} */currentValue = this.getCurrentTrackingValue();\n    const /** @type {?} */keyCode = !ValueHelper.isNullOrUndefined(event.keyCode) ? event.keyCode : event.which;\n    const /** @type {?} */keys = {\n      38: 'UP',\n      40: 'DOWN',\n      37: 'LEFT',\n      39: 'RIGHT',\n      33: 'PAGEUP',\n      34: 'PAGEDOWN',\n      36: 'HOME',\n      35: 'END'\n    };\n    const /** @type {?} */actions = this.getKeyActions(currentValue);\n    const /** @type {?} */key = keys[keyCode];\n    const /** @type {?} */action = actions[key];\n    if (ValueHelper.isNullOrUndefined(action) || ValueHelper.isNullOrUndefined(this.currentTrackingPointer)) {\n      return;\n    }\n    event.preventDefault();\n    if (this.firstKeyDown) {\n      this.firstKeyDown = false;\n      this.userChangeStart.emit(this.getChangeContext());\n    }\n    const /** @type {?} */actionValue = MathHelper.clampToRange(action, this.viewOptions.floor, this.viewOptions.ceil);\n    const /** @type {?} */newValue = this.roundStep(actionValue);\n    if (!this.viewOptions.draggableRangeOnly) {\n      this.positionTrackingHandle(newValue);\n    } else {\n      const /** @type {?} */difference = this.viewHighValue - this.viewLowValue;\n      let /** @type {?} */newMinValue;\n      let /** @type {?} */newMaxValue;\n      if (this.currentTrackingPointer === PointerType.Min) {\n        newMinValue = newValue;\n        newMaxValue = newValue + difference;\n        if (newMaxValue > this.viewOptions.ceil) {\n          newMaxValue = this.viewOptions.ceil;\n          newMinValue = newMaxValue - difference;\n        }\n      } else if (this.currentTrackingPointer === PointerType.Max) {\n        newMaxValue = newValue;\n        newMinValue = newValue - difference;\n        if (newMinValue < this.viewOptions.floor) {\n          newMinValue = this.viewOptions.floor;\n          newMaxValue = newMinValue + difference;\n        }\n      }\n      this.positionTrackingBar(newMinValue, newMaxValue);\n    }\n  }\n  /**\n   * @param {?} pointerType\n   * @param {?} event\n   * @param {?} bindMove\n   * @param {?} bindEnd\n   * @return {?}\n   */\n  onDragStart(pointerType, event, bindMove, bindEnd) {\n    const /** @type {?} */position = this.getEventPosition(event);\n    this.dragging = new Dragging();\n    this.dragging.active = true;\n    this.dragging.value = this.positionToValue(position);\n    this.dragging.difference = this.viewHighValue - this.viewLowValue;\n    this.dragging.lowLimit = this.viewOptions.rightToLeft ? this.minHandleElement.position - position : position - this.minHandleElement.position;\n    this.dragging.highLimit = this.viewOptions.rightToLeft ? position - this.maxHandleElement.position : this.maxHandleElement.position - position;\n    this.onStart(pointerType, event, bindMove, bindEnd);\n  }\n  /**\n   * Get min value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft\n   * @param {?} newPos\n   * @param {?} outOfBounds\n   * @param {?} isAbove\n   * @return {?}\n   */\n  getMinValue(newPos, outOfBounds, isAbove) {\n    const /** @type {?} */isRTL = this.viewOptions.rightToLeft;\n    let /** @type {?} */value = null;\n    if (outOfBounds) {\n      if (isAbove) {\n        value = isRTL ? this.viewOptions.floor : this.viewOptions.ceil - this.dragging.difference;\n      } else {\n        value = isRTL ? this.viewOptions.ceil - this.dragging.difference : this.viewOptions.floor;\n      }\n    } else {\n      value = isRTL ? this.positionToValue(newPos + this.dragging.lowLimit) : this.positionToValue(newPos - this.dragging.lowLimit);\n    }\n    return this.roundStep(value);\n  }\n  /**\n   * Get max value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft\n   * @param {?} newPos\n   * @param {?} outOfBounds\n   * @param {?} isAbove\n   * @return {?}\n   */\n  getMaxValue(newPos, outOfBounds, isAbove) {\n    const /** @type {?} */isRTL = this.viewOptions.rightToLeft;\n    let /** @type {?} */value = null;\n    if (outOfBounds) {\n      if (isAbove) {\n        value = isRTL ? this.viewOptions.floor + this.dragging.difference : this.viewOptions.ceil;\n      } else {\n        value = isRTL ? this.viewOptions.ceil : this.viewOptions.floor + this.dragging.difference;\n      }\n    } else {\n      if (isRTL) {\n        value = this.positionToValue(newPos + this.dragging.lowLimit) + this.dragging.difference;\n      } else {\n        value = this.positionToValue(newPos - this.dragging.lowLimit) + this.dragging.difference;\n      }\n    }\n    return this.roundStep(value);\n  }\n  /**\n   * @param {?=} event\n   * @return {?}\n   */\n  onDragMove(event) {\n    const /** @type {?} */newPos = this.getEventPosition(event);\n    let /** @type {?} */ceilLimit, /** @type {?} */\n      floorLimit, /** @type {?} */\n      floorHandleElement, /** @type {?} */\n      ceilHandleElement;\n    if (this.viewOptions.rightToLeft) {\n      ceilLimit = this.dragging.lowLimit;\n      floorLimit = this.dragging.highLimit;\n      floorHandleElement = this.maxHandleElement;\n      ceilHandleElement = this.minHandleElement;\n    } else {\n      ceilLimit = this.dragging.highLimit;\n      floorLimit = this.dragging.lowLimit;\n      floorHandleElement = this.minHandleElement;\n      ceilHandleElement = this.maxHandleElement;\n    }\n    const /** @type {?} */isUnderFloorLimit = newPos <= floorLimit;\n    const /** @type {?} */isOverCeilLimit = newPos >= this.maxHandlePosition - ceilLimit;\n    let /** @type {?} */newMinValue;\n    let /** @type {?} */newMaxValue;\n    if (isUnderFloorLimit) {\n      if (floorHandleElement.position === 0) {\n        return;\n      }\n      newMinValue = this.getMinValue(newPos, true, false);\n      newMaxValue = this.getMaxValue(newPos, true, false);\n    } else if (isOverCeilLimit) {\n      if (ceilHandleElement.position === this.maxHandlePosition) {\n        return;\n      }\n      newMaxValue = this.getMaxValue(newPos, true, true);\n      newMinValue = this.getMinValue(newPos, true, true);\n    } else {\n      newMinValue = this.getMinValue(newPos, false, false);\n      newMaxValue = this.getMaxValue(newPos, false, false);\n    }\n    this.positionTrackingBar(newMinValue, newMaxValue);\n  }\n  /**\n   * @param {?} newMinValue\n   * @param {?} newMaxValue\n   * @return {?}\n   */\n  positionTrackingBar(newMinValue, newMaxValue) {\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.minLimit) && newMinValue < this.viewOptions.minLimit) {\n      newMinValue = this.viewOptions.minLimit;\n      newMaxValue = MathHelper.roundToPrecisionLimit(newMinValue + this.dragging.difference, this.viewOptions.precisionLimit);\n    }\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.maxLimit) && newMaxValue > this.viewOptions.maxLimit) {\n      newMaxValue = this.viewOptions.maxLimit;\n      newMinValue = MathHelper.roundToPrecisionLimit(newMaxValue - this.dragging.difference, this.viewOptions.precisionLimit);\n    }\n    this.viewLowValue = newMinValue;\n    this.viewHighValue = newMaxValue;\n    this.applyViewChange();\n    this.updateHandles(PointerType.Min, this.valueToPosition(newMinValue));\n    this.updateHandles(PointerType.Max, this.valueToPosition(newMaxValue));\n  }\n  /**\n   * @param {?} newValue\n   * @return {?}\n   */\n  positionTrackingHandle(newValue) {\n    newValue = this.applyMinMaxLimit(newValue);\n    if (this.range) {\n      if (this.viewOptions.pushRange) {\n        newValue = this.applyPushRange(newValue);\n      } else {\n        if (this.viewOptions.noSwitching) {\n          if (this.currentTrackingPointer === PointerType.Min && newValue > this.viewHighValue) {\n            newValue = this.applyMinMaxRange(this.viewHighValue);\n          } else if (this.currentTrackingPointer === PointerType.Max && newValue < this.viewLowValue) {\n            newValue = this.applyMinMaxRange(this.viewLowValue);\n          }\n        }\n        newValue = this.applyMinMaxRange(newValue);\n        /* This is to check if we need to switch the min and max handles */\n        if (this.currentTrackingPointer === PointerType.Min && newValue > this.viewHighValue) {\n          this.viewLowValue = this.viewHighValue;\n          this.applyViewChange();\n          this.updateHandles(PointerType.Min, this.maxHandleElement.position);\n          this.updateAriaAttributes();\n          this.currentTrackingPointer = PointerType.Max;\n          this.minHandleElement.active = false;\n          this.maxHandleElement.active = true;\n          if (this.viewOptions.keyboardSupport) {\n            this.maxHandleElement.focus();\n          }\n        } else if (this.currentTrackingPointer === PointerType.Max && newValue < this.viewLowValue) {\n          this.viewHighValue = this.viewLowValue;\n          this.applyViewChange();\n          this.updateHandles(PointerType.Max, this.minHandleElement.position);\n          this.updateAriaAttributes();\n          this.currentTrackingPointer = PointerType.Min;\n          this.maxHandleElement.active = false;\n          this.minHandleElement.active = true;\n          if (this.viewOptions.keyboardSupport) {\n            this.minHandleElement.focus();\n          }\n        }\n      }\n    }\n    if (this.getCurrentTrackingValue() !== newValue) {\n      if (this.currentTrackingPointer === PointerType.Min) {\n        this.viewLowValue = newValue;\n        this.applyViewChange();\n      } else if (this.currentTrackingPointer === PointerType.Max) {\n        this.viewHighValue = newValue;\n        this.applyViewChange();\n      }\n      this.updateHandles(this.currentTrackingPointer, this.valueToPosition(newValue));\n      this.updateAriaAttributes();\n    }\n  }\n  /**\n   * @param {?} newValue\n   * @return {?}\n   */\n  applyMinMaxLimit(newValue) {\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.minLimit) && newValue < this.viewOptions.minLimit) {\n      return this.viewOptions.minLimit;\n    }\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.maxLimit) && newValue > this.viewOptions.maxLimit) {\n      return this.viewOptions.maxLimit;\n    }\n    return newValue;\n  }\n  /**\n   * @param {?} newValue\n   * @return {?}\n   */\n  applyMinMaxRange(newValue) {\n    const /** @type {?} */oppositeValue = this.currentTrackingPointer === PointerType.Min ? this.viewHighValue : this.viewLowValue;\n    const /** @type {?} */difference = Math.abs(newValue - oppositeValue);\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.minRange)) {\n      if (difference < this.viewOptions.minRange) {\n        if (this.currentTrackingPointer === PointerType.Min) {\n          return MathHelper.roundToPrecisionLimit(this.viewHighValue - this.viewOptions.minRange, this.viewOptions.precisionLimit);\n        } else if (this.currentTrackingPointer === PointerType.Max) {\n          return MathHelper.roundToPrecisionLimit(this.viewLowValue + this.viewOptions.minRange, this.viewOptions.precisionLimit);\n        }\n      }\n    }\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.maxRange)) {\n      if (difference > this.viewOptions.maxRange) {\n        if (this.currentTrackingPointer === PointerType.Min) {\n          return MathHelper.roundToPrecisionLimit(this.viewHighValue - this.viewOptions.maxRange, this.viewOptions.precisionLimit);\n        } else if (this.currentTrackingPointer === PointerType.Max) {\n          return MathHelper.roundToPrecisionLimit(this.viewLowValue + this.viewOptions.maxRange, this.viewOptions.precisionLimit);\n        }\n      }\n    }\n    return newValue;\n  }\n  /**\n   * @param {?} newValue\n   * @return {?}\n   */\n  applyPushRange(newValue) {\n    const /** @type {?} */difference = this.currentTrackingPointer === PointerType.Min ? this.viewHighValue - newValue : newValue - this.viewLowValue;\n    const /** @type {?} */minRange = !ValueHelper.isNullOrUndefined(this.viewOptions.minRange) ? this.viewOptions.minRange : this.viewOptions.step;\n    const /** @type {?} */maxRange = this.viewOptions.maxRange;\n    // if smaller than minRange\n    if (difference < minRange) {\n      if (this.currentTrackingPointer === PointerType.Min) {\n        this.viewHighValue = MathHelper.roundToPrecisionLimit(Math.min(newValue + minRange, this.viewOptions.ceil), this.viewOptions.precisionLimit);\n        newValue = MathHelper.roundToPrecisionLimit(this.viewHighValue - minRange, this.viewOptions.precisionLimit);\n        this.applyViewChange();\n        this.updateHandles(PointerType.Max, this.valueToPosition(this.viewHighValue));\n      } else if (this.currentTrackingPointer === PointerType.Max) {\n        this.viewLowValue = MathHelper.roundToPrecisionLimit(Math.max(newValue - minRange, this.viewOptions.floor), this.viewOptions.precisionLimit);\n        newValue = MathHelper.roundToPrecisionLimit(this.viewLowValue + minRange, this.viewOptions.precisionLimit);\n        this.applyViewChange();\n        this.updateHandles(PointerType.Min, this.valueToPosition(this.viewLowValue));\n      }\n      this.updateAriaAttributes();\n    } else if (!ValueHelper.isNullOrUndefined(maxRange) && difference > maxRange) {\n      // if greater than maxRange\n      if (this.currentTrackingPointer === PointerType.Min) {\n        this.viewHighValue = MathHelper.roundToPrecisionLimit(newValue + maxRange, this.viewOptions.precisionLimit);\n        this.applyViewChange();\n        this.updateHandles(PointerType.Max, this.valueToPosition(this.viewHighValue));\n      } else if (this.currentTrackingPointer === PointerType.Max) {\n        this.viewLowValue = MathHelper.roundToPrecisionLimit(newValue - maxRange, this.viewOptions.precisionLimit);\n        this.applyViewChange();\n        this.updateHandles(PointerType.Min, this.valueToPosition(this.viewLowValue));\n      }\n      this.updateAriaAttributes();\n    }\n    return newValue;\n  }\n  /**\n   * @return {?}\n   */\n  getChangeContext() {\n    const /** @type {?} */changeContext = new ChangeContext();\n    changeContext.pointerType = this.currentTrackingPointer;\n    changeContext.value = +this.value;\n    if (this.range) {\n      changeContext.highValue = +this.highValue;\n    }\n    return changeContext;\n  }\n}\nSliderComponent.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'ng5-slider',\n    template: `<!-- // 0 Left selection bar outside two handles -->\n<span ng5SliderElement #leftOuterSelectionBar class=\"ng5-slider-span ng5-slider-bar-wrapper ng5-slider-left-out-selection\">\n  <span class=\"ng5-slider-span ng5-slider-bar\"></span>\n</span>\n<!-- // 1 Right selection bar outside two handles -->\n<span ng5SliderElement #rightOuterSelectionBar class=\"ng5-slider-span ng5-slider-bar-wrapper ng5-slider-right-out-selection\">\n  <span class=\"ng5-slider-span ng5-slider-bar\"></span>\n</span>\n<!-- // 2 The whole slider bar -->\n<span ng5SliderElement #fullBar [class.ng5-slider-transparent]=\"fullBarTransparentClass\" class=\"ng5-slider-span ng5-slider-bar-wrapper ng5-slider-full-bar\">\n  <span class=\"ng5-slider-span ng5-slider-bar\"></span>\n</span>\n<!-- // 3 Selection bar between two handles -->\n<span ng5SliderElement #selectionBar [class.ng5-slider-draggable]=\"selectionBarDraggableClass\" class=\"ng5-slider-span ng5-slider-bar-wrapper ng5-slider-selection-bar\">\n  <span class=\"ng5-slider-span ng5-slider-bar ng5-slider-selection\" [ngStyle]=\"barStyle\"></span>\n</span>\n<!-- // 4 Low slider handle -->\n<span ng5SliderHandle #minHandle class=\"ng5-slider-span ng5-slider-pointer ng5-slider-pointer-min\" [ngStyle]=minPointerStyle></span>\n<!-- // 5 High slider handle -->\n<span ng5SliderHandle #maxHandle [style.display]=\"range ? 'inherit' : 'none'\" class=\"ng5-slider-span ng5-slider-pointer ng5-slider-pointer-max\" [ngStyle]=maxPointerStyle></span>\n<!-- // 6 Floor label -->\n<span ng5SliderLabel #floorLabel class=\"ng5-slider-span ng5-slider-bubble ng5-slider-limit ng5-slider-floor\"></span>\n<!-- // 7 Ceiling label -->\n<span ng5SliderLabel #ceilLabel class=\"ng5-slider-span ng5-slider-bubble ng5-slider-limit ng5-slider-ceil\"></span>\n<!-- // 8 Label above the low slider handle -->\n<span ng5SliderLabel #minHandleLabel class=\"ng5-slider-span ng5-slider-bubble ng5-slider-model-value\"></span>\n<!-- // 9 Label above the high slider handle -->\n<span ng5SliderLabel #maxHandleLabel class=\"ng5-slider-span ng5-slider-bubble ng5-slider-model-high\"></span>\n<!-- // 10 Combined range label when the slider handles are close ex. 15 - 17 -->\n<span ng5SliderLabel #combinedLabel class=\"ng5-slider-span ng5-slider-bubble ng5-slider-combined\"></span>\n<!-- // 11 The ticks -->\n<span ng5SliderElement #ticksElement [hidden]=\"!showTicks\" [class.ng5-slider-ticks-values-under]=\"ticksUnderValuesClass\" class=\"ng5-slider-ticks\">\n  <span *ngFor=\"let t of ticks\" class=\"ng5-slider-tick\" [ngClass]=\"{'ng5-slider-selected': t.selected}\" [ngStyle]=\"t.style\">\n    <ng5-slider-tooltip-wrapper [template]=\"tooltipTemplate\" [tooltip]=\"t.tooltip\" [placement]=\"t.tooltipPlacement\"></ng5-slider-tooltip-wrapper>\n    <ng5-slider-tooltip-wrapper *ngIf=\"t.value != null\" class=\"ng5-slider-span ng5-slider-tick-value\"\n        [template]=\"tooltipTemplate\" [tooltip]=\"t.valueTooltip\" [placement]=\"t.valueTooltipPlacement\" [content]=\"t.value\"></ng5-slider-tooltip-wrapper>\n    <span *ngIf=\"t.legend != null\" class=\"ng5-slider-span ng5-slider-tick-legend\" [innerHTML]=\"t.legend\"></span>\n  </span>\n</span>`,\n    styles: [`::ng-deep .ng5-slider{display:inline-block;position:relative;height:4px;width:100%;margin:35px 0 15px;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-ms-touch-action:pan-y;touch-action:pan-y}::ng-deep .ng5-slider.with-legend{margin-bottom:40px}::ng-deep .ng5-slider[disabled]{cursor:not-allowed}::ng-deep .ng5-slider[disabled] .ng5-slider-pointer{cursor:not-allowed;background-color:#d8e0f3}::ng-deep .ng5-slider[disabled] .ng5-slider-draggable{cursor:not-allowed}::ng-deep .ng5-slider[disabled] .ng5-slider-selection{background:#8b91a2}::ng-deep .ng5-slider[disabled] .ng5-slider-tick{cursor:not-allowed}::ng-deep .ng5-slider[disabled] .ng5-slider-tick.ng5-slider-selected{background:#8b91a2}::ng-deep .ng5-slider .ng5-slider-span{white-space:nowrap;position:absolute;display:inline-block}::ng-deep .ng5-slider .ng5-slider-base{width:100%;height:100%;padding:0}::ng-deep .ng5-slider .ng5-slider-bar-wrapper{left:0;-webkit-box-sizing:border-box;box-sizing:border-box;margin-top:-16px;padding-top:16px;width:100%;height:32px;z-index:1}::ng-deep .ng5-slider .ng5-slider-draggable{cursor:move}::ng-deep .ng5-slider .ng5-slider-bar{left:0;width:100%;height:4px;z-index:1;background:#d8e0f3;border-radius:2px}::ng-deep .ng5-slider .ng5-slider-bar-wrapper.ng5-slider-transparent .ng5-slider-bar{background:0 0}::ng-deep .ng5-slider .ng5-slider-bar-wrapper.ng5-slider-left-out-selection .ng5-slider-bar{background:#df002d}::ng-deep .ng5-slider .ng5-slider-bar-wrapper.ng5-slider-right-out-selection .ng5-slider-bar{background:#03a688}::ng-deep .ng5-slider .ng5-slider-selection{z-index:2;background:#0db9f0;border-radius:2px}::ng-deep .ng5-slider .ng5-slider-pointer{cursor:pointer;width:32px;height:32px;top:-14px;background-color:#0db9f0;z-index:3;border-radius:16px}::ng-deep .ng5-slider .ng5-slider-pointer:after{content:'';width:8px;height:8px;position:absolute;top:12px;left:12px;border-radius:4px;background:#fff}::ng-deep .ng5-slider .ng5-slider-pointer:hover:after{background-color:#fff}::ng-deep .ng5-slider .ng5-slider-pointer.ng5-slider-active{z-index:4}::ng-deep .ng5-slider .ng5-slider-pointer.ng5-slider-active:after{background-color:#451aff}::ng-deep .ng5-slider .ng5-slider-bubble{cursor:default;bottom:16px;padding:1px 3px;color:#55637d;font-size:16px}::ng-deep .ng5-slider .ng5-slider-bubble.ng5-slider-limit{color:#55637d}::ng-deep .ng5-slider .ng5-slider-ticks{-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;height:0;position:absolute;left:0;top:-3px;margin:0;z-index:1;list-style:none}::ng-deep .ng5-slider .ng5-slider-ticks-values-under .ng5-slider-tick-value{top:auto;bottom:-36px}::ng-deep .ng5-slider .ng5-slider-tick{text-align:center;cursor:pointer;width:10px;height:10px;background:#d8e0f3;border-radius:50%;position:absolute;top:0;left:0;margin-left:11px}::ng-deep .ng5-slider .ng5-slider-tick.ng5-slider-selected{background:#0db9f0}::ng-deep .ng5-slider .ng5-slider-tick-value{position:absolute;top:-34px;-webkit-transform:translate(-50%,0);transform:translate(-50%,0)}::ng-deep .ng5-slider .ng5-slider-tick-legend{position:absolute;top:24px;-webkit-transform:translate(-50%,0);transform:translate(-50%,0);max-width:50px;white-space:normal}::ng-deep .ng5-slider.vertical{position:relative;width:4px;height:100%;margin:0 20px;padding:0;vertical-align:baseline;-ms-touch-action:pan-x;touch-action:pan-x}::ng-deep .ng5-slider.vertical .ng5-slider-base{width:100%;height:100%;padding:0}::ng-deep .ng5-slider.vertical .ng5-slider-bar-wrapper{top:auto;left:0;margin:0 0 0 -16px;padding:0 0 0 16px;height:100%;width:32px}::ng-deep .ng5-slider.vertical .ng5-slider-bar{bottom:0;left:auto;width:4px;height:100%}::ng-deep .ng5-slider.vertical .ng5-slider-pointer{left:-14px!important;top:auto;bottom:0}::ng-deep .ng5-slider.vertical .ng5-slider-bubble{left:16px!important;bottom:0}::ng-deep .ng5-slider.vertical .ng5-slider-ticks{height:100%;width:0;left:-3px;top:0;z-index:1}::ng-deep .ng5-slider.vertical .ng5-slider-tick{vertical-align:middle;margin-left:auto;margin-top:11px}::ng-deep .ng5-slider.vertical .ng5-slider-tick-value{left:24px;top:auto;-webkit-transform:translate(0,-28%);transform:translate(0,-28%)}::ng-deep .ng5-slider.vertical .ng5-slider-tick-legend{top:auto;right:24px;-webkit-transform:translate(0,-28%);transform:translate(0,-28%);max-width:none;white-space:nowrap}::ng-deep .ng5-slider.vertical .ng5-slider-ticks-values-under .ng5-slider-tick-value{bottom:auto;left:auto;right:24px}::ng-deep .ng5-slider *{-webkit-transition:none;transition:none}::ng-deep .ng5-slider.animate .ng5-slider-bar-wrapper{-webkit-transition:all linear .3s;transition:all linear .3s}::ng-deep .ng5-slider.animate .ng5-slider-selection{-webkit-transition:background-color linear .3s;transition:background-color linear .3s}::ng-deep .ng5-slider.animate .ng5-slider-pointer{-webkit-transition:all linear .3s;transition:all linear .3s}::ng-deep .ng5-slider.animate .ng5-slider-bubble{-webkit-transition:all linear .3s;transition:all linear .3s}::ng-deep .ng5-slider.animate .ng5-slider-bubble.ng5-slider-limit{-webkit-transition:opacity linear .3s;transition:opacity linear .3s}::ng-deep .ng5-slider.animate .ng5-slider-bubble.ng5-slider-combined{-webkit-transition:opacity linear .3s;transition:opacity linear .3s}::ng-deep .ng5-slider.animate .ng5-slider-tick{-webkit-transition:background-color linear .3s;transition:background-color linear .3s}`],\n    host: {\n      class: 'ng5-slider'\n    },\n    providers: [NG5_SLIDER_CONTROL_VALUE_ACCESSOR]\n  }]\n}];\n/** @nocollapse */\nSliderComponent.ctorParameters = () => [{\n  type: Renderer2\n}, {\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: NgZone\n}];\nSliderComponent.propDecorators = {\n  \"value\": [{\n    type: Input\n  }],\n  \"valueChange\": [{\n    type: Output\n  }],\n  \"highValue\": [{\n    type: Input\n  }],\n  \"highValueChange\": [{\n    type: Output\n  }],\n  \"options\": [{\n    type: Input\n  }],\n  \"userChangeStart\": [{\n    type: Output\n  }],\n  \"userChange\": [{\n    type: Output\n  }],\n  \"userChangeEnd\": [{\n    type: Output\n  }],\n  \"manualRefresh\": [{\n    type: Input\n  }],\n  \"triggerFocus\": [{\n    type: Input\n  }],\n  \"leftOuterSelectionBarElement\": [{\n    type: ViewChild,\n    args: ['leftOuterSelectionBar', {\n      read: SliderElementDirective\n    }]\n  }],\n  \"rightOuterSelectionBarElement\": [{\n    type: ViewChild,\n    args: ['rightOuterSelectionBar', {\n      read: SliderElementDirective\n    }]\n  }],\n  \"fullBarElement\": [{\n    type: ViewChild,\n    args: ['fullBar', {\n      read: SliderElementDirective\n    }]\n  }],\n  \"selectionBarElement\": [{\n    type: ViewChild,\n    args: ['selectionBar', {\n      read: SliderElementDirective\n    }]\n  }],\n  \"minHandleElement\": [{\n    type: ViewChild,\n    args: ['minHandle', {\n      read: SliderHandleDirective\n    }]\n  }],\n  \"maxHandleElement\": [{\n    type: ViewChild,\n    args: ['maxHandle', {\n      read: SliderHandleDirective\n    }]\n  }],\n  \"floorLabelElement\": [{\n    type: ViewChild,\n    args: ['floorLabel', {\n      read: SliderLabelDirective\n    }]\n  }],\n  \"ceilLabelElement\": [{\n    type: ViewChild,\n    args: ['ceilLabel', {\n      read: SliderLabelDirective\n    }]\n  }],\n  \"minHandleLabelElement\": [{\n    type: ViewChild,\n    args: ['minHandleLabel', {\n      read: SliderLabelDirective\n    }]\n  }],\n  \"maxHandleLabelElement\": [{\n    type: ViewChild,\n    args: ['maxHandleLabel', {\n      read: SliderLabelDirective\n    }]\n  }],\n  \"combinedLabelElement\": [{\n    type: ViewChild,\n    args: ['combinedLabel', {\n      read: SliderLabelDirective\n    }]\n  }],\n  \"ticksElement\": [{\n    type: ViewChild,\n    args: ['ticksElement', {\n      read: SliderElementDirective\n    }]\n  }],\n  \"tooltipTemplate\": [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }],\n  \"sliderElementVerticalClass\": [{\n    type: HostBinding,\n    args: ['class.vertical']\n  }],\n  \"sliderElementAnimateClass\": [{\n    type: HostBinding,\n    args: ['class.animate']\n  }],\n  \"sliderElementDisabledAttr\": [{\n    type: HostBinding,\n    args: ['attr.disabled']\n  }],\n  \"onResize\": [{\n    type: HostListener,\n    args: ['window:resize', ['$event']]\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass TooltipWrapperComponent {}\nTooltipWrapperComponent.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'ng5-slider-tooltip-wrapper',\n    template: `<ng-container *ngIf=\"template\">\n  <ng-template *ngTemplateOutlet=\"template; context: {tooltip: tooltip, placement: placement, content: content}\"></ng-template>\n</ng-container>\n\n<ng-container *ngIf=\"!template\">\n  <div class=\"ng5-slider-inner-tooltip\" [attr.title]=\"tooltip\" [attr.data-tooltip-placement]=\"placement\">\n    {{content}}\n  </div>\n</ng-container>`,\n    styles: [`.ng5-slider-inner-tooltip{height:100%}`]\n  }]\n}];\n/** @nocollapse */\nTooltipWrapperComponent.ctorParameters = () => [];\nTooltipWrapperComponent.propDecorators = {\n  \"template\": [{\n    type: Input\n  }],\n  \"tooltip\": [{\n    type: Input\n  }],\n  \"placement\": [{\n    type: Input\n  }],\n  \"content\": [{\n    type: Input\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Ng5Slider module\n *\n * The module exports the slider component\n */\nclass Ng5SliderModule {}\nNg5SliderModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule],\n    declarations: [SliderComponent, SliderElementDirective, SliderHandleDirective, SliderLabelDirective, TooltipWrapperComponent],\n    exports: [SliderComponent]\n  }]\n}];\n/** @nocollapse */\nNg5SliderModule.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Ng5SliderModule, ChangeContext, PointerType, LabelType, Options, SliderElementDirective as ɵb, SliderHandleDirective as ɵc, SliderLabelDirective as ɵd, SliderComponent as ɵa, TooltipWrapperComponent as ɵe };","map":{"version":3,"names":["Subject","Renderer2","Directive","ElementRef","HostBinding","ChangeDetectorRef","Component","ViewChild","HostListener","Input","EventEmitter","Output","ContentChild","forwardRef","NgZone","NgModule","throttleTime","tap","distinctUntilChanged","filter","detectPassiveEvents","NG_VALUE_ACCESSOR","CommonModule","PointerType","Min","Max","LabelType","Low","High","Floor","Ceil","TickValue","Options","constructor","floor","ceil","step","minRange","maxRange","pushRange","minLimit","maxLimit","translate","combineLabels","getLegend","stepsArray","bindIndexForStepsArray","draggableRange","draggableRangeOnly","showSelectionBar","showSelectionBarEnd","showSelectionBarFromValue","showOuterSelectionBars","hidePointerLabels","hideLimitLabels","autoHideLimitLabels","readOnly","disabled","mouseEventsInterval","touchEventsInterval","inputEventsInterval","outputEventsInterval","showTicks","showTicksValues","tickStep","tickValueStep","ticksArray","ticksTooltip","ticksValuesTooltip","vertical","getSelectionBarColor","getTickColor","getPointerColor","keyboardSupport","scale","enforceStep","enforceRange","noSwitching","onlyBindHandles","rightToLeft","reversedControls","boundPointerLabels","logScale","customValueToPosition","customPositionToValue","precisionLimit","selectionBarGradient","ariaLabel","ariaLabelledBy","ariaLabelHigh","ariaLabelledByHigh","handleDimension","barDimension","animate","ChangeContext","ValueHelper","isNullOrUndefined","value","undefined","linearValueToPosition","val","minVal","maxVal","range","logValueToPosition","Math","log","linearPositionToValue","percent","logPositionToValue","exp","findStepIndex","modelValue","differences","map","abs","minDifferenceIndex","index","length","CompatibilityHelper","isTouchEvent","event","window","TouchEvent","touches","isResizeObserverAvailable","ResizeObserver","MathHelper","roundToPrecisionLimit","toPrecision","clampToRange","min","max","EventListener","eventName","events","eventsSubscription","teardownCallback","EventListenerHelper","renderer","attachPassiveEventListener","nativeElement","callback","throttleInterval","hasSupport","attachEventListener","listener","observerCallback","next","addEventListener","passive","capture","removeEventListener","pipe","leading","trailing","subscribe","detachEventListener","eventListener","unsubscribe","complete","listen","SliderElementDirective","elemRef","changeDetectionRef","_position","_dimension","_alwaysHide","_vertical","_scale","opacity","visibility","left","bottom","height","width","eventListeners","eventListenerHelper","position","dimension","alwaysHide","setAlwaysHide","hide","show","isVisible","setVertical","setScale","setPosition","pos","isRefDestroyed","markForCheck","round","calculateDimension","getBoundingClientRect","top","right","setDimension","dim","on","debounceInterval","push","onPassive","off","listenersToKeep","listenersToRemove","decorators","type","args","selector","ctorParameters","propDecorators","SliderHandleDirective","active","role","tabindex","ariaOrientation","ariaValueNow","ariaValueText","ariaValueMin","ariaValueMax","focus","SliderLabelDirective","_value","setValue","recalculateDimension","innerHTML","Tick","selected","style","tooltip","tooltipPlacement","valueTooltip","valueTooltipPlacement","legend","Dragging","difference","lowLimit","highLimit","ModelValues","compare","x","y","highValue","ModelChange","forceChange","NG5_SLIDER_CONTROL_VALUE_ACCESSOR","provide","useExisting","SliderComponent","multi","elementRef","zone","valueChange","highValueChange","options","userChangeStart","userChange","userChangeEnd","initHasRun","inputModelChangeSubject","inputModelChangeSubscription","outputModelChangeSubject","outputModelChangeSubscription","viewLowValue","viewHighValue","viewOptions","handleHalfDimension","maxHandlePosition","currentTrackingPointer","currentFocusPointer","firstKeyDown","touchId","dragging","sliderElementVerticalClass","sliderElementAnimateClass","sliderElementDisabledAttr","barStyle","minPointerStyle","maxPointerStyle","fullBarTransparentClass","selectionBarDraggableClass","ticksUnderValuesClass","intermediateTicks","ticks","onMoveEventListener","onEndEventListener","resizeObserver","onTouchedCallback","onChangeCallback","manualRefresh","unsubscribeManualRefresh","manualRefreshSubscription","setTimeout","calculateViewDimensionsAndDetectChanges","triggerFocus","unsubscribeTriggerFocus","triggerFocusSubscription","pointerType","focusPointer","ngOnInit","Object","assign","updateDisabledState","updateVerticalState","ngAfterViewInit","applyOptions","subscribeInputModelChangeSubject","subscribeOutputModelChangeSubject","renormaliseModelValues","modelValueToViewValue","manageElementsStyle","calculateViewDimensions","addAccessibility","updateCeilLabel","updateFloorLabel","initHandles","manageEventsBindings","subscribeResizeObserver","detectChanges","ngOnChanges","changes","onChangeOptions","internalChange","ngOnDestroy","unbindEvents","unsubscribeResizeObserver","unsubscribeInputModelChangeSubject","unsubscribeOutputModelChangeSubject","writeValue","obj","Array","registerOnChange","registerOnTouched","setDisabledState","isDisabled","onResize","interval","modelChange","applyInputModelChange","publishOutputModelChange","observe","disconnect","unsubscribeOnMove","unsubscribeOnEnd","getPointerElement","minHandleElement","maxHandleElement","getCurrentTrackingValue","NaN","viewValueToModelValue","viewValue","getStepValue","sliderValue","applyViewChange","userEventInitiated","normalisedModelChange","normaliseModelValues","normalisationChange","updateLowHandle","valueToPosition","updateHighHandle","updateSelectionBar","updateTicksScale","updateAriaAttributes","updateCombinedLabel","emitOutputs","emit","getChangeContext","input","normalisedInput","roundStep","tempValue","previousModelValues","normalisedModelValues","previousInputEventsInterval","previousOutputEventsInterval","resetSlider","applyStepsArrayOptions","applyFloorCeilOptions","minValue","maxValue","Error","String","refocusPointerIfNeeded","onPointerFocus","element","updateScale","floorLabelElement","ceilLabelElement","hideLabelsForTicks","minHandleLabelElement","maxHandleLabelElement","combinedLabelElement","selectionBarElement","leftOuterSelectionBarElement","rightOuterSelectionBarElement","bindEvents","getAllSliderElements","fullBarElement","ticksElement","toString","handleWidth","getTicksArray","reverse","newTicks","translation","tick","isTickSelected","transform","getDisplayValue","i","center","updateHandles","which","newPos","getHandleLabelPos","labelType","labelDimension","nearHandlePos","endOfBarPos","backgroundColor","updateFloorAndCeilLabelsVisibility","floorLabelHidden","ceilLabelHidden","isMinLabelAtFloor","isLabelBelowFloorLabel","isMinLabelAtCeil","isLabelAboveCeilLabel","isMaxLabelAtCeil","isCombinedLabelAtFloor","isCombinedLabelAtCeil","hideCeil","hideFloor","label","floorPos","floorDim","ceilPos","ceilDim","isSelectionBarFromRight","positionForRange","centerPosition","isModelGreaterThanCenter","color","offset","reversed","direction","backgroundImage","from","to","backgroundPosition","backgroundSize","isLabelOverlap","lowDisplayValue","highDisplayValue","combinedLabelValue","customStep","steppedDifference","fn","positionToValue","getEventXY","targetTouchId","MouseEvent","clientY","clientX","touchIndex","identifier","getEventPosition","sliderElementBoundingRect","sliderPos","eventPos","getNearestHandle","distanceMin","distanceMax","onBarStart","onStart","bindMove","bindEnd","simulateImmediateMove","simulateImmediateEnd","onDragStart","stopPropagation","preventDefault","pointerElement","onMoveCallback","e","onDragMove","onMove","document","onEndCallback","onEnd","changedTouches","fromTick","touchForThisSlider","newValue","ceilValue","floorValue","positionTrackingHandle","onPointerBlur","onKeyboardEvent","onKeyUp","pointer","getKeyActions","currentValue","valueRange","increaseStep","decreaseStep","increasePage","decreasePage","actions","UP","DOWN","LEFT","RIGHT","PAGEUP","PAGEDOWN","HOME","END","keyCode","keys","key","action","actionValue","newMinValue","newMaxValue","positionTrackingBar","getMinValue","outOfBounds","isAbove","isRTL","getMaxValue","ceilLimit","floorLimit","floorHandleElement","ceilHandleElement","isUnderFloorLimit","isOverCeilLimit","applyMinMaxLimit","applyPushRange","applyMinMaxRange","oppositeValue","changeContext","template","styles","host","class","providers","read","TooltipWrapperComponent","Ng5SliderModule","imports","declarations","exports","ɵb","ɵc","ɵd","ɵa","ɵe"],"sources":["G:/FINAL PROJECT/APNALOANdashboard/ApnaLoanApp/node_modules/ng5-slider/esm2015/ng5-slider.js"],"sourcesContent":["import { Subject } from 'rxjs';\nimport { Renderer2, Directive, ElementRef, HostBinding, ChangeDetectorRef, Component, ViewChild, HostListener, Input, EventEmitter, Output, ContentChild, forwardRef, NgZone, NgModule } from '@angular/core';\nimport { throttleTime, tap, distinctUntilChanged, filter } from 'rxjs/operators';\nimport detectPassiveEvents from 'detect-passive-events';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {number} */\nconst PointerType = {\n    /** Low pointer */\n    Min: 0,\n    /** High pointer */\n    Max: 1,\n};\nPointerType[PointerType.Min] = \"Min\";\nPointerType[PointerType.Max] = \"Max\";\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {number} */\nconst LabelType = {\n    /** Label above low pointer */\n    Low: 0,\n    /** Label above high pointer */\n    High: 1,\n    /** Label for minimum slider value */\n    Floor: 2,\n    /** Label for maximum slider value */\n    Ceil: 3,\n    /** Label below legend tick */\n    TickValue: 4,\n};\nLabelType[LabelType.Low] = \"Low\";\nLabelType[LabelType.High] = \"High\";\nLabelType[LabelType.Floor] = \"Floor\";\nLabelType[LabelType.Ceil] = \"Ceil\";\nLabelType[LabelType.TickValue] = \"TickValue\";\n/**\n * Custom step definition\n *\n * This can be used to specify custom values and legend values for slider ticks\n * @record\n */\n\n/**\n * Slider options\n */\nclass Options {\n    constructor() {\n        /**\n         * Minimum value for a slider.\n         * Not applicable when using stepsArray.\n         */\n        this.floor = 0;\n        /**\n         * Maximum value for a slider.\n         * Not applicable when using stepsArray.\n         */\n        this.ceil = null;\n        /**\n         * Step between each value.\n         * Not applicable when using stepsArray.\n         */\n        this.step = 1;\n        /**\n         * The minimum range authorized on the slider.\n         * Applies to range slider only.\n         * When using stepsArray, expressed as index into stepsArray.\n         */\n        this.minRange = null;\n        /**\n         * The maximum range authorized on the slider.\n         * Applies to range slider only.\n         * When using stepsArray, expressed as index into stepsArray.\n         */\n        this.maxRange = null;\n        /**\n         * Set to true to have a push behavior. When the min handle goes above the max,\n         * the max is moved as well (and vice-versa). The range between min and max is\n         * defined by the step option (defaults to 1) and can also be overriden by\n         * the minRange option. Applies to range slider only.\n         */\n        this.pushRange = false;\n        /**\n         * The minimum value authorized on the slider.\n         * When using stepsArray, expressed as index into stepsArray.\n         */\n        this.minLimit = null;\n        /**\n         * The maximum value authorized on the slider.\n         * When using stepsArray, expressed as index into stepsArray.\n         */\n        this.maxLimit = null;\n        /**\n         * Custom translate function. Use this if you want to translate values displayed\n         * on the slider.\n         */\n        this.translate = null;\n        /**\n         * Custom function for combining overlapping labels in range slider.\n         * It takes the min and max values (already translated with translate fuction)\n         * and should return how these two values should be combined.\n         * If not provided, the default function will join the two values with\n         * ' - ' as separator.\n         */\n        this.combineLabels = null;\n        /**\n         * Use to display legend under ticks (thus, it needs to be used along with\n         * showTicks or showTicksValues). The function will be called with each tick\n         * value and returned content will be displayed under the tick as a legend.\n         * If the returned value is null, then no legend is displayed under\n         * the corresponding tick.You can also directly provide the legend values\n         * in the stepsArray option.\n         */\n        this.getLegend = null;\n        /**\n         * If you want to display a slider with non linear/number steps.\n         * Just pass an array with each slider value and that's it; the floor, ceil and step settings\n         * of the slider will be computed automatically.\n         * By default, the value model and valueHigh model values will be the value of the selected item\n         * in the stepsArray.\n         * They can also be bound to the index of the selected item by setting the bindIndexForStepsArray\n         * option to true.\n         */\n        this.stepsArray = null;\n        /**\n         * Set to true to bind the index of the selected item to value model and valueHigh model.\n         */\n        this.bindIndexForStepsArray = false;\n        /**\n         * When set to true and using a range slider, the range can be dragged by the selection bar.\n         * Applies to range slider only.\n         */\n        this.draggableRange = false;\n        /**\n         * Same as draggableRange but the slider range can't be changed.\n         * Applies to range slider only.\n         */\n        this.draggableRangeOnly = false;\n        /**\n         * Set to true to always show the selection bar before the slider handle.\n         */\n        this.showSelectionBar = false;\n        /**\n         * Set to true to always show the selection bar after the slider handle.\n         */\n        this.showSelectionBarEnd = false;\n        /**\n         * Set a number to draw the selection bar between this value and the slider handle.\n         * When using stepsArray, expressed as index into stepsArray.\n         */\n        this.showSelectionBarFromValue = null;\n        /**\n         * Only for range slider. Set to true to visualize in different colour the areas\n         * on the left/right (top/bottom for vertical range slider) of selection bar between the handles.\n         */\n        this.showOuterSelectionBars = false;\n        /**\n         * Set to true to hide pointer labels\n         */\n        this.hidePointerLabels = false;\n        /**\n         * Set to true to hide min / max labels\n         */\n        this.hideLimitLabels = false;\n        /**\n         * Set to false to disable the auto-hiding behavior of the limit labels.\n         */\n        this.autoHideLimitLabels = true;\n        /**\n         * Set to true to make the slider read-only.\n         */\n        this.readOnly = false;\n        /**\n         * Set to true to disable the slider.\n         */\n        this.disabled = false;\n        /**\n         * Throttle interval for mouse events in milliseconds.\n         * This is provided to avoid a flood of events when moving the slider with mouse.\n         */\n        this.mouseEventsInterval = 50;\n        /**\n         * Throttle interval for touch events in milliseconds.\n         * This is provided to avoid a flood of events when moving the slider with touch gesture.\n         */\n        this.touchEventsInterval = 50;\n        /**\n         * Throttle interval for input changes (changes to bindings or reactive form inputs)\n         * This is provided to avoid a flood of events on frequent input binding changes affecting performance.\n         */\n        this.inputEventsInterval = 100;\n        /**\n         * Throttle interval for output changes (signalling changes to output bindings and user callbacks)\n         * This is provided to avoid a flood of outgoing events affecting Angular app performance.\n         */\n        this.outputEventsInterval = 100;\n        /**\n         * Set to true to display a tick for each step of the slider.\n         */\n        this.showTicks = false;\n        /**\n         * Set to true to display a tick and the step value for each step of the slider..\n         */\n        this.showTicksValues = false;\n        /* The step between each tick to display. If not set, the step value is used.\n            Not used when ticksArray is specified. */\n        this.tickStep = null;\n        /* The step between displaying each tick step value. */\n        this.tickValueStep = 1;\n        /**\n         * Use to display ticks at specific positions.\n         * The array contains the index of the ticks that should be displayed.\n         * For example, [0, 1, 5] will display a tick for the first, second and sixth values.\n         */\n        this.ticksArray = null;\n        /**\n         * Used to display a tooltip when a tick is hovered.\n         * Set to a function that returns the tooltip content for a given value.\n         */\n        this.ticksTooltip = null;\n        /**\n         * Same as ticksTooltip but for ticks values.\n         */\n        this.ticksValuesTooltip = null;\n        /**\n         * Set to true to display the slider vertically.\n         * The slider will take the full height of its parent.\n         * Changing this value at runtime is not currently supported.\n         */\n        this.vertical = false;\n        /**\n         * Function that returns the current color of the selection bar.\n         * If your color won't change, don't use this option but set it through CSS.\n         * If the returned color depends on a model value (either value or valueHigh),\n         * you should use the argument passed to the function.\n         * Indeed, when the function is called, there is no certainty that the model\n         * has already been updated.\n         */\n        this.getSelectionBarColor = null;\n        /**\n         * Function that returns the color of a tick. showTicks must be enabled.\n         */\n        this.getTickColor = null;\n        /**\n         * Function that returns the current color of a pointer.\n         * If your color won't change, don't use this option but set it through CSS.\n         * If the returned color depends on a model value (either value or valueHigh),\n         * you should use the argument passed to the function.\n         * Indeed, when the function is called, there is no certainty that the model has already been updated.\n         * To handle range slider pointers independently, you should evaluate pointerType within the given\n         * function where \"min\" stands for value model and \"max\" for valueHigh model values.\n         */\n        this.getPointerColor = null;\n        /**\n         * Handles are focusable (on click or with tab) and can be modified using the following keyboard controls:\n         * Left/bottom arrows: -1\n         * Right/top arrows: +1\n         * Page-down: -10%\n         * Page-up: +10%\n         * Home: minimum value\n         * End: maximum value\n         */\n        this.keyboardSupport = true;\n        /**\n         * If you display the slider in an element that uses transform: scale(0.5), set the scale value to 2\n         * so that the slider is rendered properly and the events are handled correctly.\n         */\n        this.scale = 1;\n        /**\n         * Set to true to force the value to be rounded to the step, even when modified from the outside.\n         * When set to false, if the model values are modified from outside the slider, they are not rounded\n         * and can be between two steps.\n         */\n        this.enforceStep = true;\n        /**\n         * Set to true to force the value to be normalised to allowed range (floor to ceil), even when modified from the outside.\n         * When set to false, if the model values are modified from outside the slider, and they are outside allowed range,\n         * the slider may be rendered incorrectly. However, setting this to false may be useful if you want to perform custom normalisation.\n         */\n        this.enforceRange = true;\n        /**\n         * Set to true to prevent to user from switching the min and max handles. Applies to range slider only.\n         */\n        this.noSwitching = false;\n        /**\n         * Set to true to only bind events on slider handles.\n         */\n        this.onlyBindHandles = false;\n        /**\n         * Set to true to show graphs right to left.\n         * If vertical is true it will be from top to bottom and left / right arrow functions reversed.\n         */\n        this.rightToLeft = false;\n        /**\n         * Set to true to reverse keyboard navigation:\n         * Right/top arrows: -1\n         * Left/bottom arrows: +1\n         * Page-up: -10%\n         * Page-down: +10%\n         * End: minimum value\n         * Home: maximum value\n         */\n        this.reversedControls = false;\n        /**\n         * Set to true to keep the slider labels inside the slider bounds.\n         */\n        this.boundPointerLabels = true;\n        /**\n         * Set to true to use a logarithmic scale to display the slider.\n         */\n        this.logScale = false;\n        /**\n         * Function that returns the position on the slider for a given value.\n         * The position must be a percentage between 0 and 1.\n         * The function should be monotonically increasing or decreasing; otherwise the slider may behave incorrectly.\n         */\n        this.customValueToPosition = null;\n        /**\n         * Function that returns the value for a given position on the slider.\n         * The position is a percentage between 0 and 1.\n         * The function should be monotonically increasing or decreasing; otherwise the slider may behave incorrectly.\n         */\n        this.customPositionToValue = null;\n        /**\n         * Precision limit for calculated values.\n         * Values used in calculations will be rounded to this number of significant digits\n         * to prevent accumulating small floating-point errors.\n         */\n        this.precisionLimit = 12;\n        /**\n         * Use to display the selection bar as a gradient.\n         * The given object must contain from and to properties which are colors.\n         */\n        this.selectionBarGradient = null;\n        /**\n         * Use to add a label directly to the slider for accessibility. Adds the aria-label attribute.\n         */\n        this.ariaLabel = null;\n        /**\n         * Use instead of ariaLabel to reference the id of an element which will be used to label the slider.\n         * Adds the aria-labelledby attribute.\n         */\n        this.ariaLabelledBy = null;\n        /**\n         * Use to add a label directly to the slider range for accessibility. Adds the aria-label attribute.\n         */\n        this.ariaLabelHigh = null;\n        /**\n         * Use instead of ariaLabelHigh to reference the id of an element which will be used to label the slider range.\n         * Adds the aria-labelledby attribute.\n         */\n        this.ariaLabelledByHigh = null;\n        /**\n         * Use to increase rendering performance. If the value is not provided, the slider calculates the with/height of the handle\n         */\n        this.handleDimension = null;\n        /**\n         * Use to increase rendering performance. If the value is not provided, the slider calculates the with/height of the bar\n         */\n        this.barDimension = null;\n        /**\n         * Enable/disable CSS animations\n         */\n        this.animate = true;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass ChangeContext {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n *  Collection of functions to handle conversions/lookups of values\n */\nclass ValueHelper {\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    static isNullOrUndefined(value) {\n        return value === undefined || value === null;\n    }\n    /**\n     * @param {?} val\n     * @param {?} minVal\n     * @param {?} maxVal\n     * @return {?}\n     */\n    static linearValueToPosition(val, minVal, maxVal) {\n        const /** @type {?} */ range = maxVal - minVal;\n        return (val - minVal) / range;\n    }\n    /**\n     * @param {?} val\n     * @param {?} minVal\n     * @param {?} maxVal\n     * @return {?}\n     */\n    static logValueToPosition(val, minVal, maxVal) {\n        val = Math.log(val);\n        minVal = Math.log(minVal);\n        maxVal = Math.log(maxVal);\n        const /** @type {?} */ range = maxVal - minVal;\n        return (val - minVal) / range;\n    }\n    /**\n     * @param {?} percent\n     * @param {?} minVal\n     * @param {?} maxVal\n     * @return {?}\n     */\n    static linearPositionToValue(percent, minVal, maxVal) {\n        return percent * (maxVal - minVal) + minVal;\n    }\n    /**\n     * @param {?} percent\n     * @param {?} minVal\n     * @param {?} maxVal\n     * @return {?}\n     */\n    static logPositionToValue(percent, minVal, maxVal) {\n        minVal = Math.log(minVal);\n        maxVal = Math.log(maxVal);\n        const /** @type {?} */ value = percent * (maxVal - minVal) + minVal;\n        return Math.exp(value);\n    }\n    /**\n     * @param {?} modelValue\n     * @param {?} stepsArray\n     * @return {?}\n     */\n    static findStepIndex(modelValue, stepsArray) {\n        const /** @type {?} */ differences = stepsArray.map((step) => Math.abs(modelValue - step.value));\n        let /** @type {?} */ minDifferenceIndex = 0;\n        for (let /** @type {?} */ index = 0; index < stepsArray.length; index++) {\n            if (differences[index] !== differences[minDifferenceIndex] && differences[index] < differences[minDifferenceIndex]) {\n                minDifferenceIndex = index;\n            }\n        }\n        return minDifferenceIndex;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Helper with compatibility functions to support different browsers\n */\nclass CompatibilityHelper {\n    /**\n     * Workaround for TouchEvent constructor sadly not being available on all browsers (e.g. Firefox, Safari)\n     * @param {?} event\n     * @return {?}\n     */\n    static isTouchEvent(event) {\n        if ((/** @type {?} */ (window)).TouchEvent !== undefined) {\n            return event instanceof TouchEvent;\n        }\n        return event.touches !== undefined;\n    }\n    /**\n     * Detect presence of ResizeObserver API\n     * @return {?}\n     */\n    static isResizeObserverAvailable() {\n        return (/** @type {?} */ (window)).ResizeObserver !== undefined;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Helper with mathematical functions\n */\nclass MathHelper {\n    /**\n     * @param {?} value\n     * @param {?} precisionLimit\n     * @return {?}\n     */\n    static roundToPrecisionLimit(value, precisionLimit) {\n        return +(value.toPrecision(precisionLimit));\n    }\n    /**\n     * @param {?} value\n     * @param {?} floor\n     * @param {?} ceil\n     * @return {?}\n     */\n    static clampToRange(value, floor, ceil) {\n        return Math.min(Math.max(value, floor), ceil);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass EventListener {\n    constructor() {\n        this.eventName = null;\n        this.events = null;\n        this.eventsSubscription = null;\n        this.teardownCallback = null;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Helper class to attach event listeners to DOM elements with debounce support using rxjs\n */\nclass EventListenerHelper {\n    /**\n     * @param {?} renderer\n     */\n    constructor(renderer) {\n        this.renderer = renderer;\n    }\n    /**\n     * @param {?} nativeElement\n     * @param {?} eventName\n     * @param {?} callback\n     * @param {?=} throttleInterval\n     * @return {?}\n     */\n    attachPassiveEventListener(nativeElement, eventName, callback, throttleInterval) {\n        // Only use passive event listeners if the browser supports it\n        if (detectPassiveEvents.hasSupport !== true) {\n            return this.attachEventListener(nativeElement, eventName, callback, throttleInterval);\n        }\n        // Angular doesn't support passive event handlers (yet), so we need to roll our own code using native functions\n        const /** @type {?} */ listener = new EventListener();\n        listener.eventName = eventName;\n        listener.events = new Subject();\n        const /** @type {?} */ observerCallback = (event) => {\n            listener.events.next(event);\n        };\n        nativeElement.addEventListener(eventName, observerCallback, { passive: true, capture: false });\n        listener.teardownCallback = () => {\n            nativeElement.removeEventListener(eventName, observerCallback, { passive: true, capture: false });\n        };\n        listener.eventsSubscription = listener.events\n            .pipe((!ValueHelper.isNullOrUndefined(throttleInterval))\n            ? throttleTime(throttleInterval, undefined, { leading: true, trailing: true })\n            : tap(() => { }) // no-op\n        )\n            .subscribe((event) => {\n            callback(event);\n        });\n        return listener;\n    }\n    /**\n     * @param {?} eventListener\n     * @return {?}\n     */\n    detachEventListener(eventListener) {\n        if (!ValueHelper.isNullOrUndefined(eventListener.eventsSubscription)) {\n            eventListener.eventsSubscription.unsubscribe();\n            eventListener.eventsSubscription = null;\n        }\n        if (!ValueHelper.isNullOrUndefined(eventListener.events)) {\n            eventListener.events.complete();\n            eventListener.events = null;\n        }\n        if (!ValueHelper.isNullOrUndefined(eventListener.teardownCallback)) {\n            eventListener.teardownCallback();\n            eventListener.teardownCallback = null;\n        }\n    }\n    /**\n     * @param {?} nativeElement\n     * @param {?} eventName\n     * @param {?} callback\n     * @param {?=} throttleInterval\n     * @return {?}\n     */\n    attachEventListener(nativeElement, eventName, callback, throttleInterval) {\n        const /** @type {?} */ listener = new EventListener();\n        listener.eventName = eventName;\n        listener.events = new Subject();\n        const /** @type {?} */ observerCallback = (event) => {\n            listener.events.next(event);\n        };\n        listener.teardownCallback = this.renderer.listen(nativeElement, eventName, observerCallback);\n        listener.eventsSubscription = listener.events\n            .pipe((!ValueHelper.isNullOrUndefined(throttleInterval))\n            ? throttleTime(throttleInterval, undefined, { leading: true, trailing: true })\n            : tap(() => { }) // no-op\n        )\n            .subscribe((event) => { callback(event); });\n        return listener;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass SliderElementDirective {\n    /**\n     * @param {?} elemRef\n     * @param {?} renderer\n     * @param {?} changeDetectionRef\n     */\n    constructor(elemRef, renderer, changeDetectionRef) {\n        this.elemRef = elemRef;\n        this.renderer = renderer;\n        this.changeDetectionRef = changeDetectionRef;\n        this._position = 0;\n        this._dimension = 0;\n        this._alwaysHide = false;\n        this._vertical = false;\n        this._scale = 1;\n        this.opacity = 1;\n        this.visibility = 'visible';\n        this.left = '';\n        this.bottom = '';\n        this.height = '';\n        this.width = '';\n        this.eventListeners = [];\n        this.eventListenerHelper = new EventListenerHelper(this.renderer);\n    }\n    /**\n     * @return {?}\n     */\n    get position() {\n        return this._position;\n    }\n    /**\n     * @return {?}\n     */\n    get dimension() {\n        return this._dimension;\n    }\n    /**\n     * @return {?}\n     */\n    get alwaysHide() {\n        return this._alwaysHide;\n    }\n    /**\n     * @return {?}\n     */\n    get vertical() {\n        return this._vertical;\n    }\n    /**\n     * @return {?}\n     */\n    get scale() {\n        return this._scale;\n    }\n    /**\n     * @param {?} hide\n     * @return {?}\n     */\n    setAlwaysHide(hide) {\n        this._alwaysHide = hide;\n        if (hide) {\n            this.visibility = 'hidden';\n        }\n        else {\n            this.visibility = 'visible';\n        }\n    }\n    /**\n     * @return {?}\n     */\n    hide() {\n        this.opacity = 0;\n    }\n    /**\n     * @return {?}\n     */\n    show() {\n        if (this.alwaysHide) {\n            return;\n        }\n        this.opacity = 1;\n    }\n    /**\n     * @return {?}\n     */\n    isVisible() {\n        if (this.alwaysHide) {\n            return false;\n        }\n        return this.opacity !== 0;\n    }\n    /**\n     * @param {?} vertical\n     * @return {?}\n     */\n    setVertical(vertical) {\n        this._vertical = vertical;\n        if (this._vertical) {\n            this.left = '';\n            this.width = '';\n        }\n        else {\n            this.bottom = '';\n            this.height = '';\n        }\n    }\n    /**\n     * @param {?} scale\n     * @return {?}\n     */\n    setScale(scale) {\n        this._scale = scale;\n    }\n    /**\n     * @param {?} pos\n     * @return {?}\n     */\n    setPosition(pos) {\n        if (this._position !== pos && !this.isRefDestroyed()) {\n            this.changeDetectionRef.markForCheck();\n        }\n        this._position = pos;\n        if (this._vertical) {\n            this.bottom = Math.round(pos) + 'px';\n        }\n        else {\n            this.left = Math.round(pos) + 'px';\n        }\n    }\n    /**\n     * @return {?}\n     */\n    calculateDimension() {\n        const /** @type {?} */ val = this.getBoundingClientRect();\n        if (this.vertical) {\n            this._dimension = (val.bottom - val.top) * this.scale;\n        }\n        else {\n            this._dimension = (val.right - val.left) * this.scale;\n        }\n    }\n    /**\n     * @param {?} dim\n     * @return {?}\n     */\n    setDimension(dim) {\n        if (this._dimension !== dim && !this.isRefDestroyed()) {\n            this.changeDetectionRef.markForCheck();\n        }\n        this._dimension = dim;\n        if (this._vertical) {\n            this.height = Math.round(dim) + 'px';\n        }\n        else {\n            this.width = Math.round(dim) + 'px';\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getBoundingClientRect() {\n        return this.elemRef.nativeElement.getBoundingClientRect();\n    }\n    /**\n     * @param {?} eventName\n     * @param {?} callback\n     * @param {?=} debounceInterval\n     * @return {?}\n     */\n    on(eventName, callback, debounceInterval) {\n        const /** @type {?} */ listener = this.eventListenerHelper.attachEventListener(this.elemRef.nativeElement, eventName, callback, debounceInterval);\n        this.eventListeners.push(listener);\n    }\n    /**\n     * @param {?} eventName\n     * @param {?} callback\n     * @param {?=} debounceInterval\n     * @return {?}\n     */\n    onPassive(eventName, callback, debounceInterval) {\n        const /** @type {?} */ listener = this.eventListenerHelper.attachPassiveEventListener(this.elemRef.nativeElement, eventName, callback, debounceInterval);\n        this.eventListeners.push(listener);\n    }\n    /**\n     * @param {?=} eventName\n     * @return {?}\n     */\n    off(eventName) {\n        let /** @type {?} */ listenersToKeep;\n        let /** @type {?} */ listenersToRemove;\n        if (!ValueHelper.isNullOrUndefined(eventName)) {\n            listenersToKeep = this.eventListeners.filter((event) => event.eventName !== eventName);\n            listenersToRemove = this.eventListeners.filter((event) => event.eventName === eventName);\n        }\n        else {\n            listenersToKeep = [];\n            listenersToRemove = this.eventListeners;\n        }\n        for (const /** @type {?} */ listener of listenersToRemove) {\n            this.eventListenerHelper.detachEventListener(listener);\n        }\n        this.eventListeners = listenersToKeep;\n    }\n    /**\n     * @return {?}\n     */\n    isRefDestroyed() {\n        return ValueHelper.isNullOrUndefined(this.changeDetectionRef) || this.changeDetectionRef['destroyed'];\n    }\n}\nSliderElementDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[ng5SliderElement]'\n            },] },\n];\n/** @nocollapse */\nSliderElementDirective.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ChangeDetectorRef, },\n];\nSliderElementDirective.propDecorators = {\n    \"opacity\": [{ type: HostBinding, args: ['style.opacity',] },],\n    \"visibility\": [{ type: HostBinding, args: ['style.visibility',] },],\n    \"left\": [{ type: HostBinding, args: ['style.left',] },],\n    \"bottom\": [{ type: HostBinding, args: ['style.bottom',] },],\n    \"height\": [{ type: HostBinding, args: ['style.height',] },],\n    \"width\": [{ type: HostBinding, args: ['style.width',] },],\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass SliderHandleDirective extends SliderElementDirective {\n    /**\n     * @param {?} elemRef\n     * @param {?} renderer\n     * @param {?} changeDetectionRef\n     */\n    constructor(elemRef, renderer, changeDetectionRef) {\n        super(elemRef, renderer, changeDetectionRef);\n        this.active = false;\n        this.role = '';\n        this.tabindex = '';\n        this.ariaOrientation = '';\n        this.ariaLabel = '';\n        this.ariaLabelledBy = '';\n        this.ariaValueNow = '';\n        this.ariaValueText = '';\n        this.ariaValueMin = '';\n        this.ariaValueMax = '';\n    }\n    /**\n     * @return {?}\n     */\n    focus() {\n        this.elemRef.nativeElement.focus();\n    }\n}\nSliderHandleDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[ng5SliderHandle]'\n            },] },\n];\n/** @nocollapse */\nSliderHandleDirective.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ChangeDetectorRef, },\n];\nSliderHandleDirective.propDecorators = {\n    \"active\": [{ type: HostBinding, args: ['class.ng5-slider-active',] },],\n    \"role\": [{ type: HostBinding, args: ['attr.role',] },],\n    \"tabindex\": [{ type: HostBinding, args: ['attr.tabindex',] },],\n    \"ariaOrientation\": [{ type: HostBinding, args: ['attr.aria-orientation',] },],\n    \"ariaLabel\": [{ type: HostBinding, args: ['attr.aria-label',] },],\n    \"ariaLabelledBy\": [{ type: HostBinding, args: ['attr.aria-labelledby',] },],\n    \"ariaValueNow\": [{ type: HostBinding, args: ['attr.aria-valuenow',] },],\n    \"ariaValueText\": [{ type: HostBinding, args: ['attr.aria-valuetext',] },],\n    \"ariaValueMin\": [{ type: HostBinding, args: ['attr.aria-valuemin',] },],\n    \"ariaValueMax\": [{ type: HostBinding, args: ['attr.aria-valuemax',] },],\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass SliderLabelDirective extends SliderElementDirective {\n    /**\n     * @param {?} elemRef\n     * @param {?} renderer\n     * @param {?} changeDetectionRef\n     */\n    constructor(elemRef, renderer, changeDetectionRef) {\n        super(elemRef, renderer, changeDetectionRef);\n        this._value = null;\n    }\n    /**\n     * @return {?}\n     */\n    get value() {\n        return this._value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    setValue(value) {\n        let /** @type {?} */ recalculateDimension = false;\n        if (!this.alwaysHide &&\n            (ValueHelper.isNullOrUndefined(this.value) ||\n                this.value.length !== value.length ||\n                (this.value.length > 0 && this.dimension === 0))) {\n            recalculateDimension = true;\n        }\n        this._value = value;\n        this.elemRef.nativeElement.innerHTML = value;\n        // Update dimension only when length of the label have changed\n        if (recalculateDimension) {\n            this.calculateDimension();\n        }\n    }\n}\nSliderLabelDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[ng5SliderLabel]'\n            },] },\n];\n/** @nocollapse */\nSliderLabelDirective.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ChangeDetectorRef, },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass Tick {\n    constructor() {\n        this.selected = false;\n        this.style = {};\n        this.tooltip = null;\n        this.tooltipPlacement = null;\n        this.value = null;\n        this.valueTooltip = null;\n        this.valueTooltipPlacement = null;\n        this.legend = null;\n    }\n}\nclass Dragging {\n    constructor() {\n        this.active = false;\n        this.value = 0;\n        this.difference = 0;\n        this.position = 0;\n        this.lowLimit = 0;\n        this.highLimit = 0;\n    }\n}\nclass ModelValues {\n    /**\n     * @param {?=} x\n     * @param {?=} y\n     * @return {?}\n     */\n    static compare(x, y) {\n        if (ValueHelper.isNullOrUndefined(x) && ValueHelper.isNullOrUndefined(y)) {\n            return false;\n        }\n        if (ValueHelper.isNullOrUndefined(x) !== ValueHelper.isNullOrUndefined(y)) {\n            return false;\n        }\n        return x.value === y.value && x.highValue === y.highValue;\n    }\n}\nclass ModelChange extends ModelValues {\n    /**\n     * @param {?=} x\n     * @param {?=} y\n     * @return {?}\n     */\n    static compare(x, y) {\n        if (ValueHelper.isNullOrUndefined(x) && ValueHelper.isNullOrUndefined(y)) {\n            return false;\n        }\n        if (ValueHelper.isNullOrUndefined(x) !== ValueHelper.isNullOrUndefined(y)) {\n            return false;\n        }\n        return x.value === y.value &&\n            x.highValue === y.highValue &&\n            x.forceChange === y.forceChange;\n    }\n}\nconst NG5_SLIDER_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    /* tslint:disable-next-line: no-use-before-declare */\n    useExisting: forwardRef(() => SliderComponent),\n    multi: true,\n};\nclass SliderComponent {\n    /**\n     * @param {?} renderer\n     * @param {?} elementRef\n     * @param {?} changeDetectionRef\n     * @param {?} zone\n     */\n    constructor(renderer, elementRef, changeDetectionRef, zone) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.changeDetectionRef = changeDetectionRef;\n        this.zone = zone;\n        // Model for low value of slider. For simple slider, this is the only input. For range slider, this is the low value.\n        this.value = null;\n        // Output for low value slider to support two-way bindings\n        this.valueChange = new EventEmitter();\n        // Model for high value of slider. Not used in simple slider. For range slider, this is the high value.\n        this.highValue = null;\n        // Output for high value slider to support two-way bindings\n        this.highValueChange = new EventEmitter();\n        // An object with all the other options of the slider.\n        // Each option can be updated at runtime and the slider will automatically be re-rendered.\n        this.options = new Options();\n        // Event emitted when user starts interaction with the slider\n        this.userChangeStart = new EventEmitter();\n        // Event emitted on each change coming from user interaction\n        this.userChange = new EventEmitter();\n        // Event emitted when user finishes interaction with the slider\n        this.userChangeEnd = new EventEmitter();\n        this.initHasRun = false;\n        this.inputModelChangeSubject = new Subject();\n        this.inputModelChangeSubscription = null;\n        this.outputModelChangeSubject = new Subject();\n        this.outputModelChangeSubscription = null;\n        this.viewLowValue = null;\n        this.viewHighValue = null;\n        this.viewOptions = new Options();\n        this.handleHalfDimension = 0;\n        this.maxHandlePosition = 0;\n        this.currentTrackingPointer = null;\n        this.currentFocusPointer = null;\n        this.firstKeyDown = false;\n        this.touchId = null;\n        this.dragging = new Dragging();\n        // Host element class bindings\n        this.sliderElementVerticalClass = false;\n        this.sliderElementAnimateClass = false;\n        this.sliderElementDisabledAttr = null;\n        this.barStyle = {};\n        this.minPointerStyle = {};\n        this.maxPointerStyle = {};\n        this.fullBarTransparentClass = false;\n        this.selectionBarDraggableClass = false;\n        this.ticksUnderValuesClass = false;\n        this.intermediateTicks = false;\n        this.ticks = [];\n        this.eventListenerHelper = null;\n        this.onMoveEventListener = null;\n        this.onEndEventListener = null;\n        this.resizeObserver = null;\n        this.onTouchedCallback = null;\n        this.onChangeCallback = null;\n        this.eventListenerHelper = new EventListenerHelper(this.renderer);\n    }\n    /**\n     * @param {?} manualRefresh\n     * @return {?}\n     */\n    set manualRefresh(manualRefresh) {\n        this.unsubscribeManualRefresh();\n        this.manualRefreshSubscription = manualRefresh.subscribe(() => {\n            setTimeout(() => this.calculateViewDimensionsAndDetectChanges());\n        });\n    }\n    /**\n     * @param {?} triggerFocus\n     * @return {?}\n     */\n    set triggerFocus(triggerFocus) {\n        this.unsubscribeTriggerFocus();\n        this.triggerFocusSubscription = triggerFocus.subscribe((pointerType) => {\n            this.focusPointer(pointerType);\n        });\n    }\n    /**\n     * @return {?}\n     */\n    get range() {\n        return !ValueHelper.isNullOrUndefined(this.value) && !ValueHelper.isNullOrUndefined(this.highValue);\n    }\n    /**\n     * @return {?}\n     */\n    get showTicks() {\n        return this.viewOptions.showTicks;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.viewOptions = new Options();\n        Object.assign(this.viewOptions, this.options);\n        // We need to run these two things first, before the rest of the init in ngAfterViewInit(),\n        // because these two settings are set through @HostBinding and Angular change detection\n        // mechanism doesn't like them changing in ngAfterViewInit()\n        this.updateDisabledState();\n        this.updateVerticalState();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this.applyOptions();\n        this.subscribeInputModelChangeSubject(this.viewOptions.inputEventsInterval);\n        this.subscribeOutputModelChangeSubject(this.viewOptions.outputEventsInterval);\n        // Once we apply options, we need to normalise model values for the first time\n        this.renormaliseModelValues();\n        this.viewLowValue = this.modelValueToViewValue(this.value);\n        if (this.range) {\n            this.viewHighValue = this.modelValueToViewValue(this.highValue);\n        }\n        else {\n            this.viewHighValue = null;\n        }\n        this.updateVerticalState(); // need to run this again to cover changes to slider elements\n        this.manageElementsStyle();\n        this.updateDisabledState();\n        this.calculateViewDimensions();\n        this.addAccessibility();\n        this.updateCeilLabel();\n        this.updateFloorLabel();\n        this.initHandles();\n        this.manageEventsBindings();\n        this.subscribeResizeObserver();\n        this.initHasRun = true;\n        // Run change detection manually to resolve some issues when init procedure changes values used in the view\n        if (!this.isRefDestroyed()) {\n            this.changeDetectionRef.detectChanges();\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Always apply options first\n        if (!ValueHelper.isNullOrUndefined(changes[\"options\"])) {\n            this.onChangeOptions();\n        }\n        // Then value changes\n        if (!ValueHelper.isNullOrUndefined(changes[\"value\"]) ||\n            !ValueHelper.isNullOrUndefined(changes[\"highValue\"])) {\n            this.inputModelChangeSubject.next({\n                value: this.value,\n                highValue: this.highValue,\n                forceChange: false,\n                internalChange: false\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.unbindEvents();\n        this.unsubscribeResizeObserver();\n        this.unsubscribeInputModelChangeSubject();\n        this.unsubscribeOutputModelChangeSubject();\n        this.unsubscribeManualRefresh();\n        this.unsubscribeTriggerFocus();\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    writeValue(obj) {\n        if (obj instanceof Array) {\n            this.value = obj[0];\n            this.highValue = obj[1];\n        }\n        else {\n            this.value = obj;\n        }\n        // ngOnChanges() is not called in this instance, so we need to communicate the change manually\n        this.inputModelChangeSubject.next({\n            value: this.value,\n            highValue: this.highValue,\n            forceChange: false,\n            internalChange: false\n        });\n    }\n    /**\n     * @param {?} onChangeCallback\n     * @return {?}\n     */\n    registerOnChange(onChangeCallback) {\n        this.onChangeCallback = onChangeCallback;\n    }\n    /**\n     * @param {?} onTouchedCallback\n     * @return {?}\n     */\n    registerOnTouched(onTouchedCallback) {\n        this.onTouchedCallback = onTouchedCallback;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.viewOptions.disabled = isDisabled;\n        this.updateDisabledState();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onResize(event) {\n        this.calculateViewDimensionsAndDetectChanges();\n    }\n    /**\n     * @param {?=} interval\n     * @return {?}\n     */\n    subscribeInputModelChangeSubject(interval) {\n        this.inputModelChangeSubscription = this.inputModelChangeSubject\n            .pipe(distinctUntilChanged(ModelChange.compare),\n        // Hack to reset the status of the distinctUntilChanged() - if a \"fake\" event comes through with forceChange=true,\n        // we forcefully by-pass distinctUntilChanged(), but otherwise drop the event\n        filter((modelChange) => !modelChange.forceChange && !modelChange.internalChange), (!ValueHelper.isNullOrUndefined(interval))\n            ? throttleTime(interval, undefined, { leading: true, trailing: true })\n            : tap(() => { }) // no-op\n        )\n            .subscribe((modelChange) => this.applyInputModelChange(modelChange));\n    }\n    /**\n     * @param {?=} interval\n     * @return {?}\n     */\n    subscribeOutputModelChangeSubject(interval) {\n        this.outputModelChangeSubscription = this.outputModelChangeSubject\n            .pipe(distinctUntilChanged(ModelChange.compare), (!ValueHelper.isNullOrUndefined(interval))\n            ? throttleTime(interval, undefined, { leading: true, trailing: true })\n            : tap(() => { }) // no-op\n        )\n            .subscribe((modelChange) => this.publishOutputModelChange(modelChange));\n    }\n    /**\n     * @return {?}\n     */\n    subscribeResizeObserver() {\n        if (CompatibilityHelper.isResizeObserverAvailable()) {\n            this.resizeObserver = new ResizeObserver(() => this.calculateViewDimensionsAndDetectChanges());\n            this.resizeObserver.observe(this.elementRef.nativeElement);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    unsubscribeResizeObserver() {\n        if (CompatibilityHelper.isResizeObserverAvailable() && this.resizeObserver !== null) {\n            this.resizeObserver.disconnect();\n            this.resizeObserver = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    unsubscribeOnMove() {\n        if (!ValueHelper.isNullOrUndefined(this.onMoveEventListener)) {\n            this.eventListenerHelper.detachEventListener(this.onMoveEventListener);\n            this.onMoveEventListener = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    unsubscribeOnEnd() {\n        if (!ValueHelper.isNullOrUndefined(this.onEndEventListener)) {\n            this.eventListenerHelper.detachEventListener(this.onEndEventListener);\n            this.onEndEventListener = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    unsubscribeInputModelChangeSubject() {\n        if (!ValueHelper.isNullOrUndefined(this.inputModelChangeSubscription)) {\n            this.inputModelChangeSubscription.unsubscribe();\n            this.inputModelChangeSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    unsubscribeOutputModelChangeSubject() {\n        if (!ValueHelper.isNullOrUndefined(this.outputModelChangeSubscription)) {\n            this.outputModelChangeSubscription.unsubscribe();\n            this.outputModelChangeSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    unsubscribeManualRefresh() {\n        if (!ValueHelper.isNullOrUndefined(this.manualRefreshSubscription)) {\n            this.manualRefreshSubscription.unsubscribe();\n            this.manualRefreshSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    unsubscribeTriggerFocus() {\n        if (!ValueHelper.isNullOrUndefined(this.triggerFocusSubscription)) {\n            this.triggerFocusSubscription.unsubscribe();\n            this.triggerFocusSubscription = null;\n        }\n    }\n    /**\n     * @param {?} pointerType\n     * @return {?}\n     */\n    getPointerElement(pointerType) {\n        if (pointerType === PointerType.Min) {\n            return this.minHandleElement;\n        }\n        else if (pointerType === PointerType.Max) {\n            return this.maxHandleElement;\n        }\n        return null;\n    }\n    /**\n     * @return {?}\n     */\n    getCurrentTrackingValue() {\n        if (this.currentTrackingPointer === PointerType.Min) {\n            return this.viewLowValue;\n        }\n        else if (this.currentTrackingPointer === PointerType.Max) {\n            return this.viewHighValue;\n        }\n        return null;\n    }\n    /**\n     * @param {?} modelValue\n     * @return {?}\n     */\n    modelValueToViewValue(modelValue) {\n        if (ValueHelper.isNullOrUndefined(modelValue)) {\n            return NaN;\n        }\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) && !this.viewOptions.bindIndexForStepsArray) {\n            return ValueHelper.findStepIndex(+modelValue, this.viewOptions.stepsArray);\n        }\n        return +modelValue;\n    }\n    /**\n     * @param {?} viewValue\n     * @return {?}\n     */\n    viewValueToModelValue(viewValue) {\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) && !this.viewOptions.bindIndexForStepsArray) {\n            return this.getStepValue(viewValue);\n        }\n        return viewValue;\n    }\n    /**\n     * @param {?} sliderValue\n     * @return {?}\n     */\n    getStepValue(sliderValue) {\n        const /** @type {?} */ step = this.viewOptions.stepsArray[sliderValue];\n        return (!ValueHelper.isNullOrUndefined(step)) ? step.value : NaN;\n    }\n    /**\n     * @return {?}\n     */\n    applyViewChange() {\n        this.value = this.viewValueToModelValue(this.viewLowValue);\n        if (this.range) {\n            this.highValue = this.viewValueToModelValue(this.viewHighValue);\n        }\n        this.outputModelChangeSubject.next({\n            value: this.value,\n            highValue: this.highValue,\n            userEventInitiated: true,\n            forceChange: false\n        });\n        // At this point all changes are applied and outputs are emitted, so we should be done.\n        // However, input changes are communicated in different stream and we need to be ready to\n        // act on the next input change even if it is exactly the same as last input change.\n        // Therefore, we send a special event to reset the stream.\n        this.inputModelChangeSubject.next({\n            value: this.value,\n            highValue: this.highValue,\n            forceChange: false,\n            internalChange: true\n        });\n    }\n    /**\n     * @param {?} modelChange\n     * @return {?}\n     */\n    applyInputModelChange(modelChange) {\n        const /** @type {?} */ normalisedModelChange = this.normaliseModelValues(modelChange);\n        // If normalised model change is different, apply the change to the model values\n        const /** @type {?} */ normalisationChange = !ModelValues.compare(modelChange, normalisedModelChange);\n        if (normalisationChange) {\n            this.value = normalisedModelChange.value;\n            this.highValue = normalisedModelChange.highValue;\n        }\n        this.viewLowValue = this.modelValueToViewValue(normalisedModelChange.value);\n        if (this.range) {\n            this.viewHighValue = this.modelValueToViewValue(normalisedModelChange.highValue);\n        }\n        else {\n            this.viewHighValue = null;\n        }\n        this.updateLowHandle(this.valueToPosition(this.viewLowValue));\n        if (this.range) {\n            this.updateHighHandle(this.valueToPosition(this.viewHighValue));\n        }\n        this.updateSelectionBar();\n        this.updateTicksScale();\n        this.updateAriaAttributes();\n        if (this.range) {\n            this.updateCombinedLabel();\n        }\n        // At the end, we need to communicate the model change to the outputs as well\n        // Normalisation changes are also always forced out to ensure that subscribers always end up in correct state\n        this.outputModelChangeSubject.next({\n            value: normalisedModelChange.value,\n            highValue: normalisedModelChange.highValue,\n            forceChange: normalisationChange,\n            userEventInitiated: false\n        });\n    }\n    /**\n     * @param {?} modelChange\n     * @return {?}\n     */\n    publishOutputModelChange(modelChange) {\n        const /** @type {?} */ emitOutputs = () => {\n            this.valueChange.emit(modelChange.value);\n            if (this.range) {\n                this.highValueChange.emit(modelChange.highValue);\n            }\n            if (!ValueHelper.isNullOrUndefined(this.onChangeCallback)) {\n                if (this.range) {\n                    this.onChangeCallback([modelChange.value, modelChange.highValue]);\n                }\n                else {\n                    this.onChangeCallback(modelChange.value);\n                }\n            }\n            if (!ValueHelper.isNullOrUndefined(this.onTouchedCallback)) {\n                if (this.range) {\n                    this.onTouchedCallback([modelChange.value, modelChange.highValue]);\n                }\n                else {\n                    this.onTouchedCallback(modelChange.value);\n                }\n            }\n        };\n        if (modelChange.userEventInitiated) {\n            // If this change was initiated by a user event, we can emit outputs in the same tick\n            emitOutputs();\n            this.userChange.emit(this.getChangeContext());\n        }\n        else {\n            // But, if the change was initated by something else like a change in input bindings,\n            // we need to wait until next tick to emit the outputs to keep Angular change detection happy\n            setTimeout(() => { emitOutputs(); });\n        }\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    normaliseModelValues(input) {\n        const /** @type {?} */ normalisedInput = new ModelValues();\n        normalisedInput.value = input.value;\n        normalisedInput.highValue = input.highValue;\n        if (this.viewOptions.enforceStep) {\n            normalisedInput.value = this.roundStep(normalisedInput.value);\n            if (this.range) {\n                normalisedInput.highValue = this.roundStep(normalisedInput.highValue);\n            }\n        }\n        // Don't attempt to normalise further when using steps array (steps may be out of order and that is perfectly fine)\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) || !this.viewOptions.enforceRange) {\n            return normalisedInput;\n        }\n        normalisedInput.value = MathHelper.clampToRange(normalisedInput.value, this.viewOptions.floor, this.viewOptions.ceil);\n        if (this.range) {\n            normalisedInput.highValue = MathHelper.clampToRange(normalisedInput.highValue, this.viewOptions.floor, this.viewOptions.ceil);\n        }\n        // Make sure that range slider invariant (value <= highValue) is always satisfied\n        if (this.range && input.value > input.highValue) {\n            // We know that both values are now clamped correctly, they may just be in the wrong order\n            // So the easy solution is to swap them... except swapping is sometimes disabled in options, so we make the two values the same\n            if (this.viewOptions.noSwitching) {\n                normalisedInput.value = normalisedInput.highValue;\n            }\n            else {\n                const /** @type {?} */ tempValue = input.value;\n                normalisedInput.value = input.highValue;\n                normalisedInput.highValue = tempValue;\n            }\n        }\n        return normalisedInput;\n    }\n    /**\n     * @return {?}\n     */\n    renormaliseModelValues() {\n        const /** @type {?} */ previousModelValues = {\n            value: this.value,\n            highValue: this.highValue\n        };\n        const /** @type {?} */ normalisedModelValues = this.normaliseModelValues(previousModelValues);\n        if (!ModelValues.compare(normalisedModelValues, previousModelValues)) {\n            this.value = normalisedModelValues.value;\n            this.highValue = normalisedModelValues.highValue;\n            this.outputModelChangeSubject.next({\n                value: this.value,\n                highValue: this.highValue,\n                forceChange: true,\n                userEventInitiated: false\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onChangeOptions() {\n        if (!this.initHasRun) {\n            return;\n        }\n        const /** @type {?} */ previousInputEventsInterval = this.viewOptions.inputEventsInterval;\n        const /** @type {?} */ previousOutputEventsInterval = this.viewOptions.outputEventsInterval;\n        this.applyOptions();\n        if (previousInputEventsInterval !== this.viewOptions.inputEventsInterval) {\n            this.unsubscribeInputModelChangeSubject();\n            this.subscribeInputModelChangeSubject(this.viewOptions.inputEventsInterval);\n        }\n        if (previousOutputEventsInterval !== this.viewOptions.outputEventsInterval) {\n            this.unsubscribeInputModelChangeSubject();\n            this.subscribeInputModelChangeSubject(this.viewOptions.outputEventsInterval);\n        }\n        // With new options, we need to re-normalise model values if necessary\n        this.renormaliseModelValues();\n        this.viewLowValue = this.modelValueToViewValue(this.value);\n        if (this.range) {\n            this.viewHighValue = this.modelValueToViewValue(this.highValue);\n        }\n        else {\n            this.viewHighValue = null;\n        }\n        this.resetSlider();\n    }\n    /**\n     * @return {?}\n     */\n    applyOptions() {\n        this.viewOptions = new Options();\n        Object.assign(this.viewOptions, this.options);\n        this.viewOptions.draggableRange = this.range && this.viewOptions.draggableRange;\n        this.viewOptions.draggableRangeOnly = this.range && this.viewOptions.draggableRangeOnly;\n        if (this.viewOptions.draggableRangeOnly) {\n            this.viewOptions.draggableRange = true;\n        }\n        this.viewOptions.showTicks = this.viewOptions.showTicks ||\n            this.viewOptions.showTicksValues ||\n            !ValueHelper.isNullOrUndefined(this.viewOptions.ticksArray);\n        if (this.viewOptions.showTicks &&\n            (!ValueHelper.isNullOrUndefined(this.viewOptions.tickStep) || !ValueHelper.isNullOrUndefined(this.viewOptions.ticksArray))) {\n            this.intermediateTicks = true;\n        }\n        this.viewOptions.showSelectionBar = this.viewOptions.showSelectionBar ||\n            this.viewOptions.showSelectionBarEnd ||\n            !ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue);\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray)) {\n            this.applyStepsArrayOptions();\n        }\n        else {\n            this.applyFloorCeilOptions();\n        }\n        if (ValueHelper.isNullOrUndefined(this.viewOptions.combineLabels)) {\n            this.viewOptions.combineLabels = (minValue, maxValue) => {\n                return minValue + ' - ' + maxValue;\n            };\n        }\n        if (this.viewOptions.logScale && this.viewOptions.floor === 0) {\n            throw Error('Can\\'t use floor=0 with logarithmic scale');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    applyStepsArrayOptions() {\n        this.viewOptions.floor = 0;\n        this.viewOptions.ceil = this.viewOptions.stepsArray.length - 1;\n        this.viewOptions.step = 1;\n        if (ValueHelper.isNullOrUndefined(this.viewOptions.translate)) {\n            this.viewOptions.translate = (modelValue) => {\n                if (this.viewOptions.bindIndexForStepsArray) {\n                    return String(this.getStepValue(modelValue));\n                }\n                return String(modelValue);\n            };\n        }\n        this.viewOptions.getLegend = (index) => {\n            const /** @type {?} */ step = this.viewOptions.stepsArray[index];\n            return step.legend;\n        };\n    }\n    /**\n     * @return {?}\n     */\n    applyFloorCeilOptions() {\n        if (ValueHelper.isNullOrUndefined(this.viewOptions.step)) {\n            this.viewOptions.step = 1;\n        }\n        else {\n            this.viewOptions.step = +this.viewOptions.step;\n            if (this.viewOptions.step <= 0) {\n                this.viewOptions.step = 1;\n            }\n        }\n        if (ValueHelper.isNullOrUndefined(this.viewOptions.ceil) ||\n            ValueHelper.isNullOrUndefined(this.viewOptions.floor)) {\n            throw Error('floor and ceil options must be supplied');\n        }\n        this.viewOptions.ceil = +this.viewOptions.ceil;\n        this.viewOptions.floor = +this.viewOptions.floor;\n        if (ValueHelper.isNullOrUndefined(this.viewOptions.translate)) {\n            this.viewOptions.translate = (value) => String(value);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    resetSlider() {\n        this.manageElementsStyle();\n        this.addAccessibility();\n        this.updateCeilLabel();\n        this.updateFloorLabel();\n        this.unbindEvents();\n        this.manageEventsBindings();\n        this.updateDisabledState();\n        this.calculateViewDimensions();\n        this.refocusPointerIfNeeded();\n    }\n    /**\n     * @param {?} pointerType\n     * @return {?}\n     */\n    focusPointer(pointerType) {\n        // If not supplied, use min pointer as default\n        if (pointerType !== PointerType.Min && pointerType !== PointerType.Max) {\n            pointerType = PointerType.Min;\n        }\n        if (pointerType === PointerType.Min) {\n            this.minHandleElement.focus();\n        }\n        else if (this.range && pointerType === PointerType.Max) {\n            this.maxHandleElement.focus();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    refocusPointerIfNeeded() {\n        if (!ValueHelper.isNullOrUndefined(this.currentFocusPointer)) {\n            this.onPointerFocus(this.currentFocusPointer);\n            const /** @type {?} */ element = this.getPointerElement(this.currentFocusPointer);\n            element.focus();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    manageElementsStyle() {\n        this.updateScale();\n        this.floorLabelElement.setAlwaysHide(this.viewOptions.showTicksValues || this.viewOptions.hideLimitLabels);\n        this.ceilLabelElement.setAlwaysHide(this.viewOptions.showTicksValues || this.viewOptions.hideLimitLabels);\n        const /** @type {?} */ hideLabelsForTicks = this.viewOptions.showTicksValues && !this.intermediateTicks;\n        this.minHandleLabelElement.setAlwaysHide(hideLabelsForTicks || this.viewOptions.hidePointerLabels);\n        this.maxHandleLabelElement.setAlwaysHide(hideLabelsForTicks || !this.range || this.viewOptions.hidePointerLabels);\n        this.combinedLabelElement.setAlwaysHide(hideLabelsForTicks || !this.range || this.viewOptions.hidePointerLabels);\n        this.selectionBarElement.setAlwaysHide(!this.range && !this.viewOptions.showSelectionBar);\n        this.leftOuterSelectionBarElement.setAlwaysHide(!this.range || !this.viewOptions.showOuterSelectionBars);\n        this.rightOuterSelectionBarElement.setAlwaysHide(!this.range || !this.viewOptions.showOuterSelectionBars);\n        this.fullBarTransparentClass = this.range && this.viewOptions.showOuterSelectionBars;\n        this.selectionBarDraggableClass = this.viewOptions.draggableRange && !this.viewOptions.onlyBindHandles;\n        this.ticksUnderValuesClass = this.intermediateTicks && this.options.showTicksValues;\n        if (this.sliderElementVerticalClass !== this.viewOptions.vertical) {\n            this.updateVerticalState();\n            // The above change in host component class will not be applied until the end of this cycle\n            // However, functions calculating the slider position expect the slider to be already styled as vertical\n            // So as a workaround, we need to reset the slider once again to compute the correct values\n            setTimeout(() => { this.resetSlider(); });\n        }\n        // Changing animate class may interfere with slider reset/initialisation, so we should set it separately,\n        // after all is properly set up\n        if (this.sliderElementAnimateClass !== this.viewOptions.animate) {\n            setTimeout(() => { this.sliderElementAnimateClass = this.viewOptions.animate; });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    manageEventsBindings() {\n        if (this.viewOptions.disabled || this.viewOptions.readOnly) {\n            this.unbindEvents();\n        }\n        else {\n            this.bindEvents();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    updateDisabledState() {\n        this.sliderElementDisabledAttr = this.viewOptions.disabled ? 'disabled' : null;\n    }\n    /**\n     * @return {?}\n     */\n    updateVerticalState() {\n        this.sliderElementVerticalClass = this.viewOptions.vertical;\n        for (const /** @type {?} */ element of this.getAllSliderElements()) {\n            // This is also called before ngAfterInit, so need to check that view child bindings work\n            if (!ValueHelper.isNullOrUndefined(element)) {\n                element.setVertical(this.viewOptions.vertical);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    updateScale() {\n        for (const /** @type {?} */ element of this.getAllSliderElements()) {\n            element.setScale(this.viewOptions.scale);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getAllSliderElements() {\n        return [this.leftOuterSelectionBarElement,\n            this.rightOuterSelectionBarElement,\n            this.fullBarElement,\n            this.selectionBarElement,\n            this.minHandleElement,\n            this.maxHandleElement,\n            this.floorLabelElement,\n            this.ceilLabelElement,\n            this.minHandleLabelElement,\n            this.maxHandleLabelElement,\n            this.combinedLabelElement,\n            this.ticksElement\n        ];\n    }\n    /**\n     * @return {?}\n     */\n    initHandles() {\n        this.updateLowHandle(this.valueToPosition(this.viewLowValue));\n        /*\n           the order here is important since the selection bar should be\n           updated after the high handle but before the combined label\n           */\n        if (this.range) {\n            this.updateHighHandle(this.valueToPosition(this.viewHighValue));\n        }\n        this.updateSelectionBar();\n        if (this.range) {\n            this.updateCombinedLabel();\n        }\n        this.updateTicksScale();\n    }\n    /**\n     * @return {?}\n     */\n    addAccessibility() {\n        this.updateAriaAttributes();\n        this.minHandleElement.role = 'slider';\n        if (this.viewOptions.keyboardSupport &&\n            !(this.viewOptions.readOnly || this.viewOptions.disabled)) {\n            this.minHandleElement.tabindex = '0';\n        }\n        else {\n            this.minHandleElement.tabindex = '';\n        }\n        if (this.viewOptions.vertical) {\n            this.minHandleElement.ariaOrientation = 'vertical';\n        }\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabel)) {\n            this.minHandleElement.ariaLabel = this.viewOptions.ariaLabel;\n        }\n        else if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabelledBy)) {\n            this.minHandleElement.ariaLabelledBy = this.viewOptions.ariaLabelledBy;\n        }\n        if (this.range) {\n            this.maxHandleElement.role = 'slider';\n            if (this.viewOptions.keyboardSupport &&\n                !(this.viewOptions.readOnly || this.viewOptions.disabled)) {\n                this.maxHandleElement.tabindex = '0';\n            }\n            else {\n                this.maxHandleElement.tabindex = '';\n            }\n            this.maxHandleElement.ariaOrientation = this.viewOptions.vertical ? 'vertical' : 'horizontal';\n            if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabelHigh)) {\n                this.maxHandleElement.ariaLabel = this.viewOptions.ariaLabelHigh;\n            }\n            else if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabelledByHigh)) {\n                this.maxHandleElement.ariaLabelledBy = this.viewOptions.ariaLabelledByHigh;\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    updateAriaAttributes() {\n        this.minHandleElement.ariaValueNow = (+this.value).toString();\n        this.minHandleElement.ariaValueText = this.viewOptions.translate(+this.value, LabelType.Low);\n        this.minHandleElement.ariaValueMin = this.viewOptions.floor.toString();\n        this.minHandleElement.ariaValueMax = this.viewOptions.ceil.toString();\n        if (this.range) {\n            this.maxHandleElement.ariaValueNow = (+this.highValue).toString();\n            this.maxHandleElement.ariaValueText = this.viewOptions.translate(+this.highValue, LabelType.High);\n            this.maxHandleElement.ariaValueMin = this.viewOptions.floor.toString();\n            this.maxHandleElement.ariaValueMax = this.viewOptions.ceil.toString();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    calculateViewDimensions() {\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.handleDimension)) {\n            this.minHandleElement.setDimension(this.viewOptions.handleDimension);\n        }\n        else {\n            this.minHandleElement.calculateDimension();\n        }\n        const /** @type {?} */ handleWidth = this.minHandleElement.dimension;\n        this.handleHalfDimension = handleWidth / 2;\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.barDimension)) {\n            this.fullBarElement.setDimension(this.viewOptions.barDimension);\n        }\n        else {\n            this.fullBarElement.calculateDimension();\n        }\n        this.maxHandlePosition = this.fullBarElement.dimension - handleWidth;\n        if (this.initHasRun) {\n            this.updateFloorLabel();\n            this.updateCeilLabel();\n            this.initHandles();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    calculateViewDimensionsAndDetectChanges() {\n        this.calculateViewDimensions();\n        if (!this.isRefDestroyed()) {\n            this.changeDetectionRef.detectChanges();\n        }\n    }\n    /**\n     * If the slider reference is already destroyed\n     * @return {?} boolean - true if ref is destroyed\n     */\n    isRefDestroyed() {\n        return this.changeDetectionRef['destroyed'];\n    }\n    /**\n     * @return {?}\n     */\n    updateTicksScale() {\n        if (!this.viewOptions.showTicks) {\n            return;\n        }\n        const /** @type {?} */ ticksArray = !ValueHelper.isNullOrUndefined(this.viewOptions.ticksArray)\n            ? this.viewOptions.ticksArray\n            : this.getTicksArray();\n        const /** @type {?} */ translate = this.viewOptions.vertical ? 'translateY' : 'translateX';\n        if (this.viewOptions.rightToLeft) {\n            ticksArray.reverse();\n        }\n        const /** @type {?} */ newTicks = ticksArray.map((value) => {\n            let /** @type {?} */ position = this.valueToPosition(value);\n            if (this.viewOptions.vertical) {\n                position = this.maxHandlePosition - position;\n            }\n            const /** @type {?} */ translation = translate + '(' + Math.round(position) + 'px)';\n            const /** @type {?} */ tick = new Tick();\n            tick.selected = this.isTickSelected(value);\n            tick.style = {\n                '-webkit-transform': translation,\n                '-moz-transform': translation,\n                '-o-transform': translation,\n                '-ms-transform': translation,\n                transform: translation,\n            };\n            if (tick.selected && !ValueHelper.isNullOrUndefined(this.viewOptions.getSelectionBarColor)) {\n                tick.style['background-color'] = this.getSelectionBarColor();\n            }\n            if (!tick.selected && !ValueHelper.isNullOrUndefined(this.viewOptions.getTickColor)) {\n                tick.style['background-color'] = this.getTickColor(value);\n            }\n            if (!ValueHelper.isNullOrUndefined(this.viewOptions.ticksTooltip)) {\n                tick.tooltip = this.viewOptions.ticksTooltip(value);\n                tick.tooltipPlacement = this.viewOptions.vertical ? 'right' : 'top';\n            }\n            if (this.viewOptions.showTicksValues && (value % this.viewOptions.tickValueStep === 0)) {\n                tick.value = this.getDisplayValue(value, LabelType.TickValue);\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.ticksValuesTooltip)) {\n                    tick.valueTooltip = this.viewOptions.ticksValuesTooltip(value);\n                    tick.valueTooltipPlacement = this.viewOptions.vertical\n                        ? 'right'\n                        : 'top';\n                }\n            }\n            if (!ValueHelper.isNullOrUndefined(this.viewOptions.getLegend)) {\n                const /** @type {?} */ legend = this.viewOptions.getLegend(value);\n                if (!ValueHelper.isNullOrUndefined(legend)) {\n                    tick.legend = legend;\n                }\n            }\n            return tick;\n        });\n        // We should avoid re-creating the ticks array if possible\n        // This both improves performance and makes CSS animations work correctly\n        if (!ValueHelper.isNullOrUndefined(this.ticks) && this.ticks.length === newTicks.length) {\n            for (let /** @type {?} */ i = 0; i < newTicks.length; ++i) {\n                Object.assign(this.ticks[i], newTicks[i]);\n            }\n        }\n        else {\n            this.ticks = newTicks;\n        }\n        if (!this.isRefDestroyed()) {\n            this.changeDetectionRef.detectChanges();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getTicksArray() {\n        const /** @type {?} */ step = (!ValueHelper.isNullOrUndefined(this.viewOptions.tickStep)) ? this.viewOptions.tickStep : this.viewOptions.step;\n        const /** @type {?} */ ticksArray = [];\n        for (let /** @type {?} */ value = this.viewOptions.floor; value <= this.viewOptions.ceil; value += step) {\n            ticksArray.push(value);\n        }\n        return ticksArray;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    isTickSelected(value) {\n        if (!this.range) {\n            if (!ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue)) {\n                const /** @type {?} */ center = this.viewOptions.showSelectionBarFromValue;\n                if (this.viewLowValue > center &&\n                    value >= center &&\n                    value <= this.viewLowValue) {\n                    return true;\n                }\n                else if (this.viewLowValue < center &&\n                    value <= center &&\n                    value >= this.viewLowValue) {\n                    return true;\n                }\n            }\n            else if (this.viewOptions.showSelectionBarEnd) {\n                if (value >= this.viewLowValue) {\n                    return true;\n                }\n            }\n            else if (this.viewOptions.showSelectionBar && value <= this.viewLowValue) {\n                return true;\n            }\n        }\n        if (this.range && value >= this.viewLowValue && value <= this.viewHighValue) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * @return {?}\n     */\n    updateFloorLabel() {\n        if (!this.floorLabelElement.alwaysHide) {\n            this.floorLabelElement.setValue(this.getDisplayValue(this.viewOptions.floor, LabelType.Floor));\n            this.floorLabelElement.calculateDimension();\n            const /** @type {?} */ position = this.viewOptions.rightToLeft\n                ? this.fullBarElement.dimension - this.floorLabelElement.dimension\n                : 0;\n            this.floorLabelElement.setPosition(position);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    updateCeilLabel() {\n        if (!this.ceilLabelElement.alwaysHide) {\n            this.ceilLabelElement.setValue(this.getDisplayValue(this.viewOptions.ceil, LabelType.Ceil));\n            this.ceilLabelElement.calculateDimension();\n            const /** @type {?} */ position = this.viewOptions.rightToLeft\n                ? 0\n                : this.fullBarElement.dimension - this.ceilLabelElement.dimension;\n            this.ceilLabelElement.setPosition(position);\n        }\n    }\n    /**\n     * @param {?} which\n     * @param {?} newPos\n     * @return {?}\n     */\n    updateHandles(which, newPos) {\n        if (which === PointerType.Min) {\n            this.updateLowHandle(newPos);\n        }\n        else if (which === PointerType.Max) {\n            this.updateHighHandle(newPos);\n        }\n        this.updateSelectionBar();\n        this.updateTicksScale();\n        if (this.range) {\n            this.updateCombinedLabel();\n        }\n    }\n    /**\n     * @param {?} labelType\n     * @param {?} newPos\n     * @return {?}\n     */\n    getHandleLabelPos(labelType, newPos) {\n        const /** @type {?} */ labelDimension = (labelType === PointerType.Min)\n            ? this.minHandleLabelElement.dimension\n            : this.maxHandleLabelElement.dimension;\n        const /** @type {?} */ nearHandlePos = newPos - labelDimension / 2 + this.handleHalfDimension;\n        const /** @type {?} */ endOfBarPos = this.fullBarElement.dimension - labelDimension;\n        if (!this.viewOptions.boundPointerLabels) {\n            return nearHandlePos;\n        }\n        if ((this.viewOptions.rightToLeft && labelType === PointerType.Min) ||\n            (!this.viewOptions.rightToLeft && labelType === PointerType.Max)) {\n            return Math.min(nearHandlePos, endOfBarPos);\n        }\n        else {\n            return Math.min(Math.max(nearHandlePos, 0), endOfBarPos);\n        }\n    }\n    /**\n     * @param {?} newPos\n     * @return {?}\n     */\n    updateLowHandle(newPos) {\n        this.minHandleElement.setPosition(newPos);\n        this.minHandleLabelElement.setValue(this.getDisplayValue(this.viewLowValue, LabelType.Low));\n        this.minHandleLabelElement.setPosition(this.getHandleLabelPos(PointerType.Min, newPos));\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.getPointerColor)) {\n            this.minPointerStyle = {\n                backgroundColor: this.getPointerColor(PointerType.Min),\n            };\n        }\n        if (this.viewOptions.autoHideLimitLabels) {\n            this.updateFloorAndCeilLabelsVisibility();\n        }\n    }\n    /**\n     * @param {?} newPos\n     * @return {?}\n     */\n    updateHighHandle(newPos) {\n        this.maxHandleElement.setPosition(newPos);\n        this.maxHandleLabelElement.setValue(this.getDisplayValue(this.viewHighValue, LabelType.High));\n        this.maxHandleLabelElement.setPosition(this.getHandleLabelPos(PointerType.Max, newPos));\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.getPointerColor)) {\n            this.maxPointerStyle = {\n                backgroundColor: this.getPointerColor(PointerType.Max),\n            };\n        }\n        if (this.viewOptions.autoHideLimitLabels) {\n            this.updateFloorAndCeilLabelsVisibility();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    updateFloorAndCeilLabelsVisibility() {\n        // Show based only on hideLimitLabels if pointer labels are hidden\n        if (this.viewOptions.hidePointerLabels) {\n            return;\n        }\n        let /** @type {?} */ floorLabelHidden = false;\n        let /** @type {?} */ ceilLabelHidden = false;\n        const /** @type {?} */ isMinLabelAtFloor = this.isLabelBelowFloorLabel(this.minHandleLabelElement);\n        const /** @type {?} */ isMinLabelAtCeil = this.isLabelAboveCeilLabel(this.minHandleLabelElement);\n        const /** @type {?} */ isMaxLabelAtCeil = this.isLabelAboveCeilLabel(this.maxHandleLabelElement);\n        const /** @type {?} */ isCombinedLabelAtFloor = this.isLabelBelowFloorLabel(this.combinedLabelElement);\n        const /** @type {?} */ isCombinedLabelAtCeil = this.isLabelAboveCeilLabel(this.combinedLabelElement);\n        if (isMinLabelAtFloor) {\n            floorLabelHidden = true;\n            this.floorLabelElement.hide();\n        }\n        else {\n            floorLabelHidden = false;\n            this.floorLabelElement.show();\n        }\n        if (isMinLabelAtCeil) {\n            ceilLabelHidden = true;\n            this.ceilLabelElement.hide();\n        }\n        else {\n            ceilLabelHidden = false;\n            this.ceilLabelElement.show();\n        }\n        if (this.range) {\n            const /** @type {?} */ hideCeil = this.combinedLabelElement.isVisible() ? isCombinedLabelAtCeil : isMaxLabelAtCeil;\n            const /** @type {?} */ hideFloor = this.combinedLabelElement.isVisible() ? isCombinedLabelAtFloor : isMinLabelAtFloor;\n            if (hideCeil) {\n                this.ceilLabelElement.hide();\n            }\n            else if (!ceilLabelHidden) {\n                this.ceilLabelElement.show();\n            }\n            // Hide or show floor label\n            if (hideFloor) {\n                this.floorLabelElement.hide();\n            }\n            else if (!floorLabelHidden) {\n                this.floorLabelElement.show();\n            }\n        }\n    }\n    /**\n     * @param {?} label\n     * @return {?}\n     */\n    isLabelBelowFloorLabel(label) {\n        const /** @type {?} */ pos = label.position;\n        const /** @type {?} */ dim = label.dimension;\n        const /** @type {?} */ floorPos = this.floorLabelElement.position;\n        const /** @type {?} */ floorDim = this.floorLabelElement.dimension;\n        return this.viewOptions.rightToLeft\n            ? pos + dim >= floorPos - 2\n            : pos <= floorPos + floorDim + 2;\n    }\n    /**\n     * @param {?} label\n     * @return {?}\n     */\n    isLabelAboveCeilLabel(label) {\n        const /** @type {?} */ pos = label.position;\n        const /** @type {?} */ dim = label.dimension;\n        const /** @type {?} */ ceilPos = this.ceilLabelElement.position;\n        const /** @type {?} */ ceilDim = this.ceilLabelElement.dimension;\n        return this.viewOptions.rightToLeft\n            ? pos <= ceilPos + ceilDim + 2\n            : pos + dim >= ceilPos - 2;\n    }\n    /**\n     * @return {?}\n     */\n    updateSelectionBar() {\n        let /** @type {?} */ position = 0;\n        let /** @type {?} */ dimension = 0;\n        const /** @type {?} */ isSelectionBarFromRight = this.viewOptions.rightToLeft\n            ? !this.viewOptions.showSelectionBarEnd\n            : this.viewOptions.showSelectionBarEnd;\n        const /** @type {?} */ positionForRange = this.viewOptions.rightToLeft\n            ? this.maxHandleElement.position + this.handleHalfDimension\n            : this.minHandleElement.position + this.handleHalfDimension;\n        if (this.range) {\n            dimension = Math.abs(this.maxHandleElement.position - this.minHandleElement.position);\n            position = positionForRange;\n        }\n        else {\n            if (!ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue)) {\n                const /** @type {?} */ center = this.viewOptions.showSelectionBarFromValue;\n                const /** @type {?} */ centerPosition = this.valueToPosition(center);\n                const /** @type {?} */ isModelGreaterThanCenter = this.viewOptions.rightToLeft\n                    ? this.viewLowValue <= center\n                    : this.viewLowValue > center;\n                if (isModelGreaterThanCenter) {\n                    dimension = this.minHandleElement.position - centerPosition;\n                    position = centerPosition + this.handleHalfDimension;\n                }\n                else {\n                    dimension = centerPosition - this.minHandleElement.position;\n                    position = this.minHandleElement.position + this.handleHalfDimension;\n                }\n            }\n            else if (isSelectionBarFromRight) {\n                dimension = Math.ceil(Math.abs(this.maxHandlePosition - this.minHandleElement.position) + this.handleHalfDimension);\n                position = Math.floor(this.minHandleElement.position + this.handleHalfDimension);\n            }\n            else {\n                dimension = this.minHandleElement.position + this.handleHalfDimension;\n                position = 0;\n            }\n        }\n        this.selectionBarElement.setDimension(dimension);\n        this.selectionBarElement.setPosition(position);\n        if (this.range && this.viewOptions.showOuterSelectionBars) {\n            if (this.viewOptions.rightToLeft) {\n                this.rightOuterSelectionBarElement.setDimension(position);\n                this.rightOuterSelectionBarElement.setPosition(0);\n                this.fullBarElement.calculateDimension();\n                this.leftOuterSelectionBarElement.setDimension(this.fullBarElement.dimension - (position + dimension));\n                this.leftOuterSelectionBarElement.setPosition(position + dimension);\n            }\n            else {\n                this.leftOuterSelectionBarElement.setDimension(position);\n                this.leftOuterSelectionBarElement.setPosition(0);\n                this.fullBarElement.calculateDimension();\n                this.rightOuterSelectionBarElement.setDimension(this.fullBarElement.dimension - (position + dimension));\n                this.rightOuterSelectionBarElement.setPosition(position + dimension);\n            }\n        }\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.getSelectionBarColor)) {\n            const /** @type {?} */ color = this.getSelectionBarColor();\n            this.barStyle = {\n                backgroundColor: color,\n            };\n        }\n        else if (!ValueHelper.isNullOrUndefined(this.viewOptions.selectionBarGradient)) {\n            const /** @type {?} */ offset = (!ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue))\n                ? this.valueToPosition(this.viewOptions.showSelectionBarFromValue)\n                : 0;\n            const /** @type {?} */ reversed = (offset - position > 0 && !isSelectionBarFromRight) || (offset - position <= 0 && isSelectionBarFromRight);\n            const /** @type {?} */ direction = this.viewOptions.vertical\n                ? reversed ? 'bottom' : 'top'\n                : reversed ? 'left' : 'right';\n            this.barStyle = {\n                backgroundImage: 'linear-gradient(to ' +\n                    direction +\n                    ', ' +\n                    this.viewOptions.selectionBarGradient.from +\n                    ' 0%,' +\n                    this.viewOptions.selectionBarGradient.to +\n                    ' 100%)',\n            };\n            if (this.viewOptions.vertical) {\n                this.barStyle.backgroundPosition =\n                    'center ' +\n                        (offset +\n                            dimension +\n                            position +\n                            (reversed ? -this.handleHalfDimension : 0)) +\n                        'px';\n                this.barStyle.backgroundSize =\n                    '100% ' + (this.fullBarElement.dimension - this.handleHalfDimension) + 'px';\n            }\n            else {\n                this.barStyle.backgroundPosition =\n                    offset -\n                        position +\n                        (reversed ? this.handleHalfDimension : 0) +\n                        'px center';\n                this.barStyle.backgroundSize =\n                    this.fullBarElement.dimension - this.handleHalfDimension + 'px 100%';\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getSelectionBarColor() {\n        if (this.range) {\n            return this.viewOptions.getSelectionBarColor(this.value, this.highValue);\n        }\n        return this.viewOptions.getSelectionBarColor(this.value);\n    }\n    /**\n     * @param {?} pointerType\n     * @return {?}\n     */\n    getPointerColor(pointerType) {\n        if (pointerType === PointerType.Max) {\n            return this.viewOptions.getPointerColor(this.highValue, pointerType);\n        }\n        return this.viewOptions.getPointerColor(this.value, pointerType);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    getTickColor(value) {\n        return this.viewOptions.getTickColor(value);\n    }\n    /**\n     * @return {?}\n     */\n    updateCombinedLabel() {\n        let /** @type {?} */ isLabelOverlap = null;\n        if (this.viewOptions.rightToLeft) {\n            isLabelOverlap =\n                this.minHandleLabelElement.position - this.minHandleLabelElement.dimension - 10 <= this.maxHandleLabelElement.position;\n        }\n        else {\n            isLabelOverlap =\n                this.minHandleLabelElement.position + this.minHandleLabelElement.dimension + 10 >= this.maxHandleLabelElement.position;\n        }\n        if (isLabelOverlap) {\n            const /** @type {?} */ lowDisplayValue = this.getDisplayValue(this.viewLowValue, LabelType.Low);\n            const /** @type {?} */ highDisplayValue = this.getDisplayValue(this.viewHighValue, LabelType.High);\n            const /** @type {?} */ combinedLabelValue = this.viewOptions.rightToLeft\n                ? this.viewOptions.combineLabels(highDisplayValue, lowDisplayValue)\n                : this.viewOptions.combineLabels(lowDisplayValue, highDisplayValue);\n            this.combinedLabelElement.setValue(combinedLabelValue);\n            const /** @type {?} */ pos = this.viewOptions.boundPointerLabels\n                ? Math.min(Math.max(this.selectionBarElement.position +\n                    this.selectionBarElement.dimension / 2 -\n                    this.combinedLabelElement.dimension / 2, 0), this.fullBarElement.dimension - this.combinedLabelElement.dimension)\n                : this.selectionBarElement.position + this.selectionBarElement.dimension / 2 - this.combinedLabelElement.dimension / 2;\n            this.combinedLabelElement.setPosition(pos);\n            this.minHandleLabelElement.hide();\n            this.maxHandleLabelElement.hide();\n            this.combinedLabelElement.show();\n        }\n        else {\n            this.updateHighHandle(this.valueToPosition(this.viewHighValue));\n            this.updateLowHandle(this.valueToPosition(this.viewLowValue));\n            this.maxHandleLabelElement.show();\n            this.minHandleLabelElement.show();\n            this.combinedLabelElement.hide();\n        }\n        if (this.viewOptions.autoHideLimitLabels) {\n            this.updateFloorAndCeilLabelsVisibility();\n        }\n    }\n    /**\n     * @param {?} value\n     * @param {?} which\n     * @return {?}\n     */\n    getDisplayValue(value, which) {\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) && !this.viewOptions.bindIndexForStepsArray) {\n            value = this.getStepValue(value);\n        }\n        return this.viewOptions.translate(value, which);\n    }\n    /**\n     * @param {?} value\n     * @param {?=} customStep\n     * @return {?}\n     */\n    roundStep(value, customStep) {\n        const /** @type {?} */ step = !ValueHelper.isNullOrUndefined(customStep) ? customStep : this.viewOptions.step;\n        let /** @type {?} */ steppedDifference = MathHelper.roundToPrecisionLimit((value - this.viewOptions.floor) / step, this.viewOptions.precisionLimit);\n        steppedDifference = Math.round(steppedDifference) * step;\n        return MathHelper.roundToPrecisionLimit(this.viewOptions.floor + steppedDifference, this.viewOptions.precisionLimit);\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    valueToPosition(val) {\n        let /** @type {?} */ fn = ValueHelper.linearValueToPosition;\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.customValueToPosition)) {\n            fn = this.viewOptions.customValueToPosition;\n        }\n        else if (this.viewOptions.logScale) {\n            fn = ValueHelper.logValueToPosition;\n        }\n        val = MathHelper.clampToRange(val, this.viewOptions.floor, this.viewOptions.ceil);\n        let /** @type {?} */ percent = fn(val, this.viewOptions.floor, this.viewOptions.ceil);\n        if (ValueHelper.isNullOrUndefined(percent)) {\n            percent = 0;\n        }\n        if (this.viewOptions.rightToLeft) {\n            percent = 1 - percent;\n        }\n        return percent * this.maxHandlePosition;\n    }\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    positionToValue(position) {\n        let /** @type {?} */ percent = position / this.maxHandlePosition;\n        if (this.viewOptions.rightToLeft) {\n            percent = 1 - percent;\n        }\n        let /** @type {?} */ fn = ValueHelper.linearPositionToValue;\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.customPositionToValue)) {\n            fn = this.viewOptions.customPositionToValue;\n        }\n        else if (this.viewOptions.logScale) {\n            fn = ValueHelper.logPositionToValue;\n        }\n        const /** @type {?} */ value = fn(percent, this.viewOptions.floor, this.viewOptions.ceil);\n        return !ValueHelper.isNullOrUndefined(value) ? value : 0;\n    }\n    /**\n     * @param {?} event\n     * @param {?=} targetTouchId\n     * @return {?}\n     */\n    getEventXY(event, targetTouchId) {\n        if (event instanceof MouseEvent) {\n            return this.viewOptions.vertical ? event.clientY : event.clientX;\n        }\n        let /** @type {?} */ touchIndex = 0;\n        const /** @type {?} */ touches = event.touches;\n        if (!ValueHelper.isNullOrUndefined(targetTouchId)) {\n            for (let /** @type {?} */ i = 0; i < touches.length; i++) {\n                if (touches[i].identifier === targetTouchId) {\n                    touchIndex = i;\n                    break;\n                }\n            }\n        }\n        // Return the target touch or if the target touch was not found in the event\n        // returns the coordinates of the first touch\n        return this.viewOptions.vertical ? touches[touchIndex].clientY : touches[touchIndex].clientX;\n    }\n    /**\n     * @param {?} event\n     * @param {?=} targetTouchId\n     * @return {?}\n     */\n    getEventPosition(event, targetTouchId) {\n        const /** @type {?} */ sliderElementBoundingRect = this.elementRef.nativeElement.getBoundingClientRect();\n        const /** @type {?} */ sliderPos = this.viewOptions.vertical ?\n            sliderElementBoundingRect.bottom : sliderElementBoundingRect.left;\n        let /** @type {?} */ eventPos = 0;\n        if (this.viewOptions.vertical) {\n            eventPos = -this.getEventXY(event, targetTouchId) + sliderPos;\n        }\n        else {\n            eventPos = this.getEventXY(event, targetTouchId) - sliderPos;\n        }\n        return eventPos * this.viewOptions.scale - this.handleHalfDimension;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    getNearestHandle(event) {\n        if (!this.range) {\n            return PointerType.Min;\n        }\n        const /** @type {?} */ position = this.getEventPosition(event);\n        const /** @type {?} */ distanceMin = Math.abs(position - this.minHandleElement.position);\n        const /** @type {?} */ distanceMax = Math.abs(position - this.maxHandleElement.position);\n        if (distanceMin < distanceMax) {\n            return PointerType.Min;\n        }\n        else if (distanceMin > distanceMax) {\n            return PointerType.Max;\n        }\n        else if (!this.viewOptions.rightToLeft) {\n            // if event is at the same distance from min/max then if it's at left of minH, we return minH else maxH\n            return position < this.minHandleElement.position ? PointerType.Min : PointerType.Max;\n        }\n        // reverse in rtl\n        return position > this.minHandleElement.position ? PointerType.Min : PointerType.Max;\n    }\n    /**\n     * @return {?}\n     */\n    bindEvents() {\n        const /** @type {?} */ draggableRange = this.viewOptions.draggableRange;\n        if (!this.viewOptions.onlyBindHandles) {\n            this.selectionBarElement.on('mousedown', (event) => this.onBarStart(null, draggableRange, event, true, true, true));\n        }\n        if (this.viewOptions.draggableRangeOnly) {\n            this.minHandleElement.on('mousedown', (event) => this.onBarStart(PointerType.Min, draggableRange, event, true, true));\n            this.maxHandleElement.on('mousedown', (event) => this.onBarStart(PointerType.Max, draggableRange, event, true, true));\n        }\n        else {\n            this.minHandleElement.on('mousedown', (event) => this.onStart(PointerType.Min, event, true, true));\n            if (this.range) {\n                this.maxHandleElement.on('mousedown', (event) => this.onStart(PointerType.Max, event, true, true));\n            }\n            if (!this.viewOptions.onlyBindHandles) {\n                this.fullBarElement.on('mousedown', (event) => this.onStart(null, event, true, true, true));\n                this.ticksElement.on('mousedown', (event) => this.onStart(null, event, true, true, true, true));\n            }\n        }\n        if (!this.viewOptions.onlyBindHandles) {\n            this.selectionBarElement.onPassive('touchstart', (event) => this.onBarStart(null, draggableRange, event, true, true, true));\n        }\n        if (this.viewOptions.draggableRangeOnly) {\n            this.minHandleElement.onPassive('touchstart', (event) => this.onBarStart(PointerType.Min, draggableRange, event, true, true));\n            this.maxHandleElement.onPassive('touchstart', (event) => this.onBarStart(PointerType.Max, draggableRange, event, true, true));\n        }\n        else {\n            this.minHandleElement.onPassive('touchstart', (event) => this.onStart(PointerType.Min, event, true, true));\n            if (this.range) {\n                this.maxHandleElement.onPassive('touchstart', (event) => this.onStart(PointerType.Max, event, true, true));\n            }\n            if (!this.viewOptions.onlyBindHandles) {\n                this.fullBarElement.onPassive('touchstart', (event) => this.onStart(null, event, true, true, true));\n                this.ticksElement.onPassive('touchstart', (event) => this.onStart(null, event, false, false, true, true));\n            }\n        }\n        if (this.viewOptions.keyboardSupport) {\n            this.minHandleElement.on('focus', () => this.onPointerFocus(PointerType.Min));\n            if (this.range) {\n                this.maxHandleElement.on('focus', () => this.onPointerFocus(PointerType.Max));\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    unbindEvents() {\n        this.unsubscribeOnMove();\n        this.unsubscribeOnEnd();\n        for (const /** @type {?} */ element of this.getAllSliderElements()) {\n            if (!ValueHelper.isNullOrUndefined(element)) {\n                element.off();\n            }\n        }\n    }\n    /**\n     * @param {?} pointerType\n     * @param {?} draggableRange\n     * @param {?} event\n     * @param {?} bindMove\n     * @param {?} bindEnd\n     * @param {?=} simulateImmediateMove\n     * @param {?=} simulateImmediateEnd\n     * @return {?}\n     */\n    onBarStart(pointerType, draggableRange, event, bindMove, bindEnd, simulateImmediateMove, simulateImmediateEnd) {\n        if (draggableRange) {\n            this.onDragStart(pointerType, event, bindMove, bindEnd);\n        }\n        else {\n            this.onStart(pointerType, event, bindMove, bindEnd, simulateImmediateMove, simulateImmediateEnd);\n        }\n    }\n    /**\n     * @param {?} pointerType\n     * @param {?} event\n     * @param {?} bindMove\n     * @param {?} bindEnd\n     * @param {?=} simulateImmediateMove\n     * @param {?=} simulateImmediateEnd\n     * @return {?}\n     */\n    onStart(pointerType, event, bindMove, bindEnd, simulateImmediateMove, simulateImmediateEnd) {\n        event.stopPropagation();\n        // Only call preventDefault() when handling non-passive events (passive events don't need it)\n        if (!CompatibilityHelper.isTouchEvent(event) || !detectPassiveEvents.hasSupport) {\n            event.preventDefault();\n        }\n        // We have to do this in case the HTML where the sliders are on\n        // have been animated into view.\n        this.calculateViewDimensions();\n        if (ValueHelper.isNullOrUndefined(pointerType)) {\n            pointerType = this.getNearestHandle(event);\n        }\n        this.currentTrackingPointer = pointerType;\n        const /** @type {?} */ pointerElement = this.getPointerElement(pointerType);\n        pointerElement.active = true;\n        if (this.viewOptions.keyboardSupport) {\n            pointerElement.focus();\n        }\n        if (bindMove) {\n            this.unsubscribeOnMove();\n            const /** @type {?} */ onMoveCallback = (e) => this.dragging.active ? this.onDragMove(e) : this.onMove(e);\n            if (CompatibilityHelper.isTouchEvent(event)) {\n                this.onMoveEventListener = this.eventListenerHelper.attachPassiveEventListener(document, 'touchmove', onMoveCallback, this.viewOptions.touchEventsInterval);\n            }\n            else {\n                this.onMoveEventListener = this.eventListenerHelper.attachEventListener(document, 'mousemove', onMoveCallback, this.viewOptions.mouseEventsInterval);\n            }\n        }\n        if (bindEnd) {\n            this.unsubscribeOnEnd();\n            const /** @type {?} */ onEndCallback = (e) => this.onEnd(e);\n            if (CompatibilityHelper.isTouchEvent(event)) {\n                this.onEndEventListener = this.eventListenerHelper.attachPassiveEventListener(document, 'touchend', onEndCallback);\n            }\n            else {\n                this.onEndEventListener = this.eventListenerHelper.attachEventListener(document, 'mouseup', onEndCallback);\n            }\n        }\n        this.userChangeStart.emit(this.getChangeContext());\n        if (CompatibilityHelper.isTouchEvent(event) && !ValueHelper.isNullOrUndefined((/** @type {?} */ (event)).changedTouches)) {\n            // Store the touch identifier\n            if (ValueHelper.isNullOrUndefined(this.touchId)) {\n                this.touchId = (/** @type {?} */ (event)).changedTouches[0].identifier;\n            }\n        }\n        // Click events, either with mouse or touch gesture are weird. Sometimes they result in full\n        // start, move, end sequence, and sometimes, they don't - they only invoke mousedown\n        // As a workaround, we simulate the first move event and the end event if it's necessary\n        if (simulateImmediateMove) {\n            this.onMove(event, true);\n        }\n        if (simulateImmediateEnd) {\n            this.onEnd(event);\n        }\n    }\n    /**\n     * @param {?} event\n     * @param {?=} fromTick\n     * @return {?}\n     */\n    onMove(event, fromTick) {\n        let /** @type {?} */ touchForThisSlider = null;\n        if (CompatibilityHelper.isTouchEvent(event)) {\n            const /** @type {?} */ changedTouches = (/** @type {?} */ (event)).changedTouches;\n            for (let /** @type {?} */ i = 0; i < changedTouches.length; i++) {\n                if (changedTouches[i].identifier === this.touchId) {\n                    touchForThisSlider = changedTouches[i];\n                    break;\n                }\n            }\n            if (ValueHelper.isNullOrUndefined(touchForThisSlider)) {\n                return;\n            }\n        }\n        const /** @type {?} */ newPos = !ValueHelper.isNullOrUndefined(touchForThisSlider)\n            ? this.getEventPosition(event, touchForThisSlider.identifier)\n            : this.getEventPosition(event);\n        let /** @type {?} */ newValue;\n        const /** @type {?} */ ceilValue = this.viewOptions.rightToLeft\n            ? this.viewOptions.floor\n            : this.viewOptions.ceil;\n        const /** @type {?} */ floorValue = this.viewOptions.rightToLeft ? this.viewOptions.ceil : this.viewOptions.floor;\n        if (newPos <= 0) {\n            newValue = floorValue;\n        }\n        else if (newPos >= this.maxHandlePosition) {\n            newValue = ceilValue;\n        }\n        else {\n            newValue = this.positionToValue(newPos);\n            if (fromTick && !ValueHelper.isNullOrUndefined(this.viewOptions.tickStep)) {\n                newValue = this.roundStep(newValue, this.viewOptions.tickStep);\n            }\n            else {\n                newValue = this.roundStep(newValue);\n            }\n        }\n        this.positionTrackingHandle(newValue);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onEnd(event) {\n        if (CompatibilityHelper.isTouchEvent(event)) {\n            const /** @type {?} */ changedTouches = (/** @type {?} */ (event)).changedTouches;\n            if (changedTouches[0].identifier !== this.touchId) {\n                return;\n            }\n        }\n        this.touchId = null;\n        if (!this.viewOptions.keyboardSupport) {\n            this.minHandleElement.active = false;\n            this.maxHandleElement.active = false;\n            this.currentTrackingPointer = null;\n        }\n        this.dragging.active = false;\n        this.unsubscribeOnMove();\n        this.unsubscribeOnEnd();\n        this.userChangeEnd.emit(this.getChangeContext());\n    }\n    /**\n     * @param {?} pointerType\n     * @return {?}\n     */\n    onPointerFocus(pointerType) {\n        const /** @type {?} */ pointerElement = this.getPointerElement(pointerType);\n        pointerElement.on('blur', () => this.onPointerBlur(pointerElement));\n        pointerElement.on('keydown', (event) => this.onKeyboardEvent(event));\n        pointerElement.on('keyup', () => this.onKeyUp());\n        pointerElement.active = true;\n        this.currentTrackingPointer = pointerType;\n        this.currentFocusPointer = pointerType;\n        this.firstKeyDown = true;\n    }\n    /**\n     * @return {?}\n     */\n    onKeyUp() {\n        this.firstKeyDown = true;\n        this.userChangeEnd.emit(this.getChangeContext());\n    }\n    /**\n     * @param {?} pointer\n     * @return {?}\n     */\n    onPointerBlur(pointer) {\n        pointer.off('blur');\n        pointer.off('keydown');\n        pointer.off('keyup');\n        pointer.active = false;\n        if (ValueHelper.isNullOrUndefined(this.touchId)) {\n            this.currentTrackingPointer = null;\n            this.currentFocusPointer = null;\n        }\n    }\n    /**\n     * @param {?} currentValue\n     * @return {?}\n     */\n    getKeyActions(currentValue) {\n        const /** @type {?} */ valueRange = this.viewOptions.ceil - this.viewOptions.floor;\n        let /** @type {?} */ increaseStep = currentValue + this.viewOptions.step;\n        let /** @type {?} */ decreaseStep = currentValue - this.viewOptions.step;\n        let /** @type {?} */ increasePage = currentValue + valueRange / 10;\n        let /** @type {?} */ decreasePage = currentValue - valueRange / 10;\n        if (this.viewOptions.reversedControls) {\n            increaseStep = currentValue - this.viewOptions.step;\n            decreaseStep = currentValue + this.viewOptions.step;\n            increasePage = currentValue - valueRange / 10;\n            decreasePage = currentValue + valueRange / 10;\n        }\n        // Left to right default actions\n        const /** @type {?} */ actions = {\n            UP: increaseStep,\n            DOWN: decreaseStep,\n            LEFT: decreaseStep,\n            RIGHT: increaseStep,\n            PAGEUP: increasePage,\n            PAGEDOWN: decreasePage,\n            HOME: this.viewOptions.reversedControls ? this.viewOptions.ceil : this.viewOptions.floor,\n            END: this.viewOptions.reversedControls ? this.viewOptions.floor : this.viewOptions.ceil,\n        };\n        // right to left means swapping right and left arrows\n        if (this.viewOptions.rightToLeft) {\n            actions[\"LEFT\"] = increaseStep;\n            actions[\"RIGHT\"] = decreaseStep;\n            // right to left and vertical means we also swap up and down\n            if (this.viewOptions.vertical) {\n                actions[\"UP\"] = decreaseStep;\n                actions[\"DOWN\"] = increaseStep;\n            }\n        }\n        return actions;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onKeyboardEvent(event) {\n        const /** @type {?} */ currentValue = this.getCurrentTrackingValue();\n        const /** @type {?} */ keyCode = !ValueHelper.isNullOrUndefined(event.keyCode)\n            ? event.keyCode\n            : event.which;\n        const /** @type {?} */ keys = {\n            38: 'UP',\n            40: 'DOWN',\n            37: 'LEFT',\n            39: 'RIGHT',\n            33: 'PAGEUP',\n            34: 'PAGEDOWN',\n            36: 'HOME',\n            35: 'END',\n        };\n        const /** @type {?} */ actions = this.getKeyActions(currentValue);\n        const /** @type {?} */ key = keys[keyCode];\n        const /** @type {?} */ action = actions[key];\n        if (ValueHelper.isNullOrUndefined(action) || ValueHelper.isNullOrUndefined(this.currentTrackingPointer)) {\n            return;\n        }\n        event.preventDefault();\n        if (this.firstKeyDown) {\n            this.firstKeyDown = false;\n            this.userChangeStart.emit(this.getChangeContext());\n        }\n        const /** @type {?} */ actionValue = MathHelper.clampToRange(action, this.viewOptions.floor, this.viewOptions.ceil);\n        const /** @type {?} */ newValue = this.roundStep(actionValue);\n        if (!this.viewOptions.draggableRangeOnly) {\n            this.positionTrackingHandle(newValue);\n        }\n        else {\n            const /** @type {?} */ difference = this.viewHighValue - this.viewLowValue;\n            let /** @type {?} */ newMinValue;\n            let /** @type {?} */ newMaxValue;\n            if (this.currentTrackingPointer === PointerType.Min) {\n                newMinValue = newValue;\n                newMaxValue = newValue + difference;\n                if (newMaxValue > this.viewOptions.ceil) {\n                    newMaxValue = this.viewOptions.ceil;\n                    newMinValue = newMaxValue - difference;\n                }\n            }\n            else if (this.currentTrackingPointer === PointerType.Max) {\n                newMaxValue = newValue;\n                newMinValue = newValue - difference;\n                if (newMinValue < this.viewOptions.floor) {\n                    newMinValue = this.viewOptions.floor;\n                    newMaxValue = newMinValue + difference;\n                }\n            }\n            this.positionTrackingBar(newMinValue, newMaxValue);\n        }\n    }\n    /**\n     * @param {?} pointerType\n     * @param {?} event\n     * @param {?} bindMove\n     * @param {?} bindEnd\n     * @return {?}\n     */\n    onDragStart(pointerType, event, bindMove, bindEnd) {\n        const /** @type {?} */ position = this.getEventPosition(event);\n        this.dragging = new Dragging();\n        this.dragging.active = true;\n        this.dragging.value = this.positionToValue(position);\n        this.dragging.difference = this.viewHighValue - this.viewLowValue;\n        this.dragging.lowLimit = this.viewOptions.rightToLeft\n            ? this.minHandleElement.position - position\n            : position - this.minHandleElement.position;\n        this.dragging.highLimit = this.viewOptions.rightToLeft\n            ? position - this.maxHandleElement.position\n            : this.maxHandleElement.position - position;\n        this.onStart(pointerType, event, bindMove, bindEnd);\n    }\n    /**\n     * Get min value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft\n     * @param {?} newPos\n     * @param {?} outOfBounds\n     * @param {?} isAbove\n     * @return {?}\n     */\n    getMinValue(newPos, outOfBounds, isAbove) {\n        const /** @type {?} */ isRTL = this.viewOptions.rightToLeft;\n        let /** @type {?} */ value = null;\n        if (outOfBounds) {\n            if (isAbove) {\n                value = isRTL\n                    ? this.viewOptions.floor\n                    : this.viewOptions.ceil - this.dragging.difference;\n            }\n            else {\n                value = isRTL\n                    ? this.viewOptions.ceil - this.dragging.difference\n                    : this.viewOptions.floor;\n            }\n        }\n        else {\n            value = isRTL\n                ? this.positionToValue(newPos + this.dragging.lowLimit)\n                : this.positionToValue(newPos - this.dragging.lowLimit);\n        }\n        return this.roundStep(value);\n    }\n    /**\n     * Get max value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft\n     * @param {?} newPos\n     * @param {?} outOfBounds\n     * @param {?} isAbove\n     * @return {?}\n     */\n    getMaxValue(newPos, outOfBounds, isAbove) {\n        const /** @type {?} */ isRTL = this.viewOptions.rightToLeft;\n        let /** @type {?} */ value = null;\n        if (outOfBounds) {\n            if (isAbove) {\n                value = isRTL\n                    ? this.viewOptions.floor + this.dragging.difference\n                    : this.viewOptions.ceil;\n            }\n            else {\n                value = isRTL\n                    ? this.viewOptions.ceil\n                    : this.viewOptions.floor + this.dragging.difference;\n            }\n        }\n        else {\n            if (isRTL) {\n                value =\n                    this.positionToValue(newPos + this.dragging.lowLimit) +\n                        this.dragging.difference;\n            }\n            else {\n                value =\n                    this.positionToValue(newPos - this.dragging.lowLimit) +\n                        this.dragging.difference;\n            }\n        }\n        return this.roundStep(value);\n    }\n    /**\n     * @param {?=} event\n     * @return {?}\n     */\n    onDragMove(event) {\n        const /** @type {?} */ newPos = this.getEventPosition(event);\n        let /** @type {?} */ ceilLimit, /** @type {?} */\n        floorLimit, /** @type {?} */\n        floorHandleElement, /** @type {?} */\n        ceilHandleElement;\n        if (this.viewOptions.rightToLeft) {\n            ceilLimit = this.dragging.lowLimit;\n            floorLimit = this.dragging.highLimit;\n            floorHandleElement = this.maxHandleElement;\n            ceilHandleElement = this.minHandleElement;\n        }\n        else {\n            ceilLimit = this.dragging.highLimit;\n            floorLimit = this.dragging.lowLimit;\n            floorHandleElement = this.minHandleElement;\n            ceilHandleElement = this.maxHandleElement;\n        }\n        const /** @type {?} */ isUnderFloorLimit = (newPos <= floorLimit);\n        const /** @type {?} */ isOverCeilLimit = (newPos >= this.maxHandlePosition - ceilLimit);\n        let /** @type {?} */ newMinValue;\n        let /** @type {?} */ newMaxValue;\n        if (isUnderFloorLimit) {\n            if (floorHandleElement.position === 0) {\n                return;\n            }\n            newMinValue = this.getMinValue(newPos, true, false);\n            newMaxValue = this.getMaxValue(newPos, true, false);\n        }\n        else if (isOverCeilLimit) {\n            if (ceilHandleElement.position === this.maxHandlePosition) {\n                return;\n            }\n            newMaxValue = this.getMaxValue(newPos, true, true);\n            newMinValue = this.getMinValue(newPos, true, true);\n        }\n        else {\n            newMinValue = this.getMinValue(newPos, false, false);\n            newMaxValue = this.getMaxValue(newPos, false, false);\n        }\n        this.positionTrackingBar(newMinValue, newMaxValue);\n    }\n    /**\n     * @param {?} newMinValue\n     * @param {?} newMaxValue\n     * @return {?}\n     */\n    positionTrackingBar(newMinValue, newMaxValue) {\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.minLimit) &&\n            newMinValue < this.viewOptions.minLimit) {\n            newMinValue = this.viewOptions.minLimit;\n            newMaxValue = MathHelper.roundToPrecisionLimit(newMinValue + this.dragging.difference, this.viewOptions.precisionLimit);\n        }\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.maxLimit) &&\n            newMaxValue > this.viewOptions.maxLimit) {\n            newMaxValue = this.viewOptions.maxLimit;\n            newMinValue = MathHelper.roundToPrecisionLimit(newMaxValue - this.dragging.difference, this.viewOptions.precisionLimit);\n        }\n        this.viewLowValue = newMinValue;\n        this.viewHighValue = newMaxValue;\n        this.applyViewChange();\n        this.updateHandles(PointerType.Min, this.valueToPosition(newMinValue));\n        this.updateHandles(PointerType.Max, this.valueToPosition(newMaxValue));\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    positionTrackingHandle(newValue) {\n        newValue = this.applyMinMaxLimit(newValue);\n        if (this.range) {\n            if (this.viewOptions.pushRange) {\n                newValue = this.applyPushRange(newValue);\n            }\n            else {\n                if (this.viewOptions.noSwitching) {\n                    if (this.currentTrackingPointer === PointerType.Min &&\n                        newValue > this.viewHighValue) {\n                        newValue = this.applyMinMaxRange(this.viewHighValue);\n                    }\n                    else if (this.currentTrackingPointer === PointerType.Max &&\n                        newValue < this.viewLowValue) {\n                        newValue = this.applyMinMaxRange(this.viewLowValue);\n                    }\n                }\n                newValue = this.applyMinMaxRange(newValue);\n                /* This is to check if we need to switch the min and max handles */\n                if (this.currentTrackingPointer === PointerType.Min && newValue > this.viewHighValue) {\n                    this.viewLowValue = this.viewHighValue;\n                    this.applyViewChange();\n                    this.updateHandles(PointerType.Min, this.maxHandleElement.position);\n                    this.updateAriaAttributes();\n                    this.currentTrackingPointer = PointerType.Max;\n                    this.minHandleElement.active = false;\n                    this.maxHandleElement.active = true;\n                    if (this.viewOptions.keyboardSupport) {\n                        this.maxHandleElement.focus();\n                    }\n                }\n                else if (this.currentTrackingPointer === PointerType.Max &&\n                    newValue < this.viewLowValue) {\n                    this.viewHighValue = this.viewLowValue;\n                    this.applyViewChange();\n                    this.updateHandles(PointerType.Max, this.minHandleElement.position);\n                    this.updateAriaAttributes();\n                    this.currentTrackingPointer = PointerType.Min;\n                    this.maxHandleElement.active = false;\n                    this.minHandleElement.active = true;\n                    if (this.viewOptions.keyboardSupport) {\n                        this.minHandleElement.focus();\n                    }\n                }\n            }\n        }\n        if (this.getCurrentTrackingValue() !== newValue) {\n            if (this.currentTrackingPointer === PointerType.Min) {\n                this.viewLowValue = newValue;\n                this.applyViewChange();\n            }\n            else if (this.currentTrackingPointer === PointerType.Max) {\n                this.viewHighValue = newValue;\n                this.applyViewChange();\n            }\n            this.updateHandles(this.currentTrackingPointer, this.valueToPosition(newValue));\n            this.updateAriaAttributes();\n        }\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    applyMinMaxLimit(newValue) {\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.minLimit) && newValue < this.viewOptions.minLimit) {\n            return this.viewOptions.minLimit;\n        }\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.maxLimit) && newValue > this.viewOptions.maxLimit) {\n            return this.viewOptions.maxLimit;\n        }\n        return newValue;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    applyMinMaxRange(newValue) {\n        const /** @type {?} */ oppositeValue = (this.currentTrackingPointer === PointerType.Min)\n            ? this.viewHighValue\n            : this.viewLowValue;\n        const /** @type {?} */ difference = Math.abs(newValue - oppositeValue);\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.minRange)) {\n            if (difference < this.viewOptions.minRange) {\n                if (this.currentTrackingPointer === PointerType.Min) {\n                    return MathHelper.roundToPrecisionLimit(this.viewHighValue - this.viewOptions.minRange, this.viewOptions.precisionLimit);\n                }\n                else if (this.currentTrackingPointer === PointerType.Max) {\n                    return MathHelper.roundToPrecisionLimit(this.viewLowValue + this.viewOptions.minRange, this.viewOptions.precisionLimit);\n                }\n            }\n        }\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.maxRange)) {\n            if (difference > this.viewOptions.maxRange) {\n                if (this.currentTrackingPointer === PointerType.Min) {\n                    return MathHelper.roundToPrecisionLimit(this.viewHighValue - this.viewOptions.maxRange, this.viewOptions.precisionLimit);\n                }\n                else if (this.currentTrackingPointer === PointerType.Max) {\n                    return MathHelper.roundToPrecisionLimit(this.viewLowValue + this.viewOptions.maxRange, this.viewOptions.precisionLimit);\n                }\n            }\n        }\n        return newValue;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    applyPushRange(newValue) {\n        const /** @type {?} */ difference = (this.currentTrackingPointer === PointerType.Min)\n            ? this.viewHighValue - newValue\n            : newValue - this.viewLowValue;\n        const /** @type {?} */ minRange = (!ValueHelper.isNullOrUndefined(this.viewOptions.minRange))\n            ? this.viewOptions.minRange\n            : this.viewOptions.step;\n        const /** @type {?} */ maxRange = this.viewOptions.maxRange;\n        // if smaller than minRange\n        if (difference < minRange) {\n            if (this.currentTrackingPointer === PointerType.Min) {\n                this.viewHighValue = MathHelper.roundToPrecisionLimit(Math.min(newValue + minRange, this.viewOptions.ceil), this.viewOptions.precisionLimit);\n                newValue = MathHelper.roundToPrecisionLimit(this.viewHighValue - minRange, this.viewOptions.precisionLimit);\n                this.applyViewChange();\n                this.updateHandles(PointerType.Max, this.valueToPosition(this.viewHighValue));\n            }\n            else if (this.currentTrackingPointer === PointerType.Max) {\n                this.viewLowValue = MathHelper.roundToPrecisionLimit(Math.max(newValue - minRange, this.viewOptions.floor), this.viewOptions.precisionLimit);\n                newValue = MathHelper.roundToPrecisionLimit(this.viewLowValue + minRange, this.viewOptions.precisionLimit);\n                this.applyViewChange();\n                this.updateHandles(PointerType.Min, this.valueToPosition(this.viewLowValue));\n            }\n            this.updateAriaAttributes();\n        }\n        else if (!ValueHelper.isNullOrUndefined(maxRange) && difference > maxRange) {\n            // if greater than maxRange\n            if (this.currentTrackingPointer === PointerType.Min) {\n                this.viewHighValue = MathHelper.roundToPrecisionLimit(newValue + maxRange, this.viewOptions.precisionLimit);\n                this.applyViewChange();\n                this.updateHandles(PointerType.Max, this.valueToPosition(this.viewHighValue));\n            }\n            else if (this.currentTrackingPointer === PointerType.Max) {\n                this.viewLowValue = MathHelper.roundToPrecisionLimit(newValue - maxRange, this.viewOptions.precisionLimit);\n                this.applyViewChange();\n                this.updateHandles(PointerType.Min, this.valueToPosition(this.viewLowValue));\n            }\n            this.updateAriaAttributes();\n        }\n        return newValue;\n    }\n    /**\n     * @return {?}\n     */\n    getChangeContext() {\n        const /** @type {?} */ changeContext = new ChangeContext();\n        changeContext.pointerType = this.currentTrackingPointer;\n        changeContext.value = +this.value;\n        if (this.range) {\n            changeContext.highValue = +this.highValue;\n        }\n        return changeContext;\n    }\n}\nSliderComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ng5-slider',\n                template: `<!-- // 0 Left selection bar outside two handles -->\n<span ng5SliderElement #leftOuterSelectionBar class=\"ng5-slider-span ng5-slider-bar-wrapper ng5-slider-left-out-selection\">\n  <span class=\"ng5-slider-span ng5-slider-bar\"></span>\n</span>\n<!-- // 1 Right selection bar outside two handles -->\n<span ng5SliderElement #rightOuterSelectionBar class=\"ng5-slider-span ng5-slider-bar-wrapper ng5-slider-right-out-selection\">\n  <span class=\"ng5-slider-span ng5-slider-bar\"></span>\n</span>\n<!-- // 2 The whole slider bar -->\n<span ng5SliderElement #fullBar [class.ng5-slider-transparent]=\"fullBarTransparentClass\" class=\"ng5-slider-span ng5-slider-bar-wrapper ng5-slider-full-bar\">\n  <span class=\"ng5-slider-span ng5-slider-bar\"></span>\n</span>\n<!-- // 3 Selection bar between two handles -->\n<span ng5SliderElement #selectionBar [class.ng5-slider-draggable]=\"selectionBarDraggableClass\" class=\"ng5-slider-span ng5-slider-bar-wrapper ng5-slider-selection-bar\">\n  <span class=\"ng5-slider-span ng5-slider-bar ng5-slider-selection\" [ngStyle]=\"barStyle\"></span>\n</span>\n<!-- // 4 Low slider handle -->\n<span ng5SliderHandle #minHandle class=\"ng5-slider-span ng5-slider-pointer ng5-slider-pointer-min\" [ngStyle]=minPointerStyle></span>\n<!-- // 5 High slider handle -->\n<span ng5SliderHandle #maxHandle [style.display]=\"range ? 'inherit' : 'none'\" class=\"ng5-slider-span ng5-slider-pointer ng5-slider-pointer-max\" [ngStyle]=maxPointerStyle></span>\n<!-- // 6 Floor label -->\n<span ng5SliderLabel #floorLabel class=\"ng5-slider-span ng5-slider-bubble ng5-slider-limit ng5-slider-floor\"></span>\n<!-- // 7 Ceiling label -->\n<span ng5SliderLabel #ceilLabel class=\"ng5-slider-span ng5-slider-bubble ng5-slider-limit ng5-slider-ceil\"></span>\n<!-- // 8 Label above the low slider handle -->\n<span ng5SliderLabel #minHandleLabel class=\"ng5-slider-span ng5-slider-bubble ng5-slider-model-value\"></span>\n<!-- // 9 Label above the high slider handle -->\n<span ng5SliderLabel #maxHandleLabel class=\"ng5-slider-span ng5-slider-bubble ng5-slider-model-high\"></span>\n<!-- // 10 Combined range label when the slider handles are close ex. 15 - 17 -->\n<span ng5SliderLabel #combinedLabel class=\"ng5-slider-span ng5-slider-bubble ng5-slider-combined\"></span>\n<!-- // 11 The ticks -->\n<span ng5SliderElement #ticksElement [hidden]=\"!showTicks\" [class.ng5-slider-ticks-values-under]=\"ticksUnderValuesClass\" class=\"ng5-slider-ticks\">\n  <span *ngFor=\"let t of ticks\" class=\"ng5-slider-tick\" [ngClass]=\"{'ng5-slider-selected': t.selected}\" [ngStyle]=\"t.style\">\n    <ng5-slider-tooltip-wrapper [template]=\"tooltipTemplate\" [tooltip]=\"t.tooltip\" [placement]=\"t.tooltipPlacement\"></ng5-slider-tooltip-wrapper>\n    <ng5-slider-tooltip-wrapper *ngIf=\"t.value != null\" class=\"ng5-slider-span ng5-slider-tick-value\"\n        [template]=\"tooltipTemplate\" [tooltip]=\"t.valueTooltip\" [placement]=\"t.valueTooltipPlacement\" [content]=\"t.value\"></ng5-slider-tooltip-wrapper>\n    <span *ngIf=\"t.legend != null\" class=\"ng5-slider-span ng5-slider-tick-legend\" [innerHTML]=\"t.legend\"></span>\n  </span>\n</span>`,\n                styles: [`::ng-deep .ng5-slider{display:inline-block;position:relative;height:4px;width:100%;margin:35px 0 15px;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-ms-touch-action:pan-y;touch-action:pan-y}::ng-deep .ng5-slider.with-legend{margin-bottom:40px}::ng-deep .ng5-slider[disabled]{cursor:not-allowed}::ng-deep .ng5-slider[disabled] .ng5-slider-pointer{cursor:not-allowed;background-color:#d8e0f3}::ng-deep .ng5-slider[disabled] .ng5-slider-draggable{cursor:not-allowed}::ng-deep .ng5-slider[disabled] .ng5-slider-selection{background:#8b91a2}::ng-deep .ng5-slider[disabled] .ng5-slider-tick{cursor:not-allowed}::ng-deep .ng5-slider[disabled] .ng5-slider-tick.ng5-slider-selected{background:#8b91a2}::ng-deep .ng5-slider .ng5-slider-span{white-space:nowrap;position:absolute;display:inline-block}::ng-deep .ng5-slider .ng5-slider-base{width:100%;height:100%;padding:0}::ng-deep .ng5-slider .ng5-slider-bar-wrapper{left:0;-webkit-box-sizing:border-box;box-sizing:border-box;margin-top:-16px;padding-top:16px;width:100%;height:32px;z-index:1}::ng-deep .ng5-slider .ng5-slider-draggable{cursor:move}::ng-deep .ng5-slider .ng5-slider-bar{left:0;width:100%;height:4px;z-index:1;background:#d8e0f3;border-radius:2px}::ng-deep .ng5-slider .ng5-slider-bar-wrapper.ng5-slider-transparent .ng5-slider-bar{background:0 0}::ng-deep .ng5-slider .ng5-slider-bar-wrapper.ng5-slider-left-out-selection .ng5-slider-bar{background:#df002d}::ng-deep .ng5-slider .ng5-slider-bar-wrapper.ng5-slider-right-out-selection .ng5-slider-bar{background:#03a688}::ng-deep .ng5-slider .ng5-slider-selection{z-index:2;background:#0db9f0;border-radius:2px}::ng-deep .ng5-slider .ng5-slider-pointer{cursor:pointer;width:32px;height:32px;top:-14px;background-color:#0db9f0;z-index:3;border-radius:16px}::ng-deep .ng5-slider .ng5-slider-pointer:after{content:'';width:8px;height:8px;position:absolute;top:12px;left:12px;border-radius:4px;background:#fff}::ng-deep .ng5-slider .ng5-slider-pointer:hover:after{background-color:#fff}::ng-deep .ng5-slider .ng5-slider-pointer.ng5-slider-active{z-index:4}::ng-deep .ng5-slider .ng5-slider-pointer.ng5-slider-active:after{background-color:#451aff}::ng-deep .ng5-slider .ng5-slider-bubble{cursor:default;bottom:16px;padding:1px 3px;color:#55637d;font-size:16px}::ng-deep .ng5-slider .ng5-slider-bubble.ng5-slider-limit{color:#55637d}::ng-deep .ng5-slider .ng5-slider-ticks{-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;height:0;position:absolute;left:0;top:-3px;margin:0;z-index:1;list-style:none}::ng-deep .ng5-slider .ng5-slider-ticks-values-under .ng5-slider-tick-value{top:auto;bottom:-36px}::ng-deep .ng5-slider .ng5-slider-tick{text-align:center;cursor:pointer;width:10px;height:10px;background:#d8e0f3;border-radius:50%;position:absolute;top:0;left:0;margin-left:11px}::ng-deep .ng5-slider .ng5-slider-tick.ng5-slider-selected{background:#0db9f0}::ng-deep .ng5-slider .ng5-slider-tick-value{position:absolute;top:-34px;-webkit-transform:translate(-50%,0);transform:translate(-50%,0)}::ng-deep .ng5-slider .ng5-slider-tick-legend{position:absolute;top:24px;-webkit-transform:translate(-50%,0);transform:translate(-50%,0);max-width:50px;white-space:normal}::ng-deep .ng5-slider.vertical{position:relative;width:4px;height:100%;margin:0 20px;padding:0;vertical-align:baseline;-ms-touch-action:pan-x;touch-action:pan-x}::ng-deep .ng5-slider.vertical .ng5-slider-base{width:100%;height:100%;padding:0}::ng-deep .ng5-slider.vertical .ng5-slider-bar-wrapper{top:auto;left:0;margin:0 0 0 -16px;padding:0 0 0 16px;height:100%;width:32px}::ng-deep .ng5-slider.vertical .ng5-slider-bar{bottom:0;left:auto;width:4px;height:100%}::ng-deep .ng5-slider.vertical .ng5-slider-pointer{left:-14px!important;top:auto;bottom:0}::ng-deep .ng5-slider.vertical .ng5-slider-bubble{left:16px!important;bottom:0}::ng-deep .ng5-slider.vertical .ng5-slider-ticks{height:100%;width:0;left:-3px;top:0;z-index:1}::ng-deep .ng5-slider.vertical .ng5-slider-tick{vertical-align:middle;margin-left:auto;margin-top:11px}::ng-deep .ng5-slider.vertical .ng5-slider-tick-value{left:24px;top:auto;-webkit-transform:translate(0,-28%);transform:translate(0,-28%)}::ng-deep .ng5-slider.vertical .ng5-slider-tick-legend{top:auto;right:24px;-webkit-transform:translate(0,-28%);transform:translate(0,-28%);max-width:none;white-space:nowrap}::ng-deep .ng5-slider.vertical .ng5-slider-ticks-values-under .ng5-slider-tick-value{bottom:auto;left:auto;right:24px}::ng-deep .ng5-slider *{-webkit-transition:none;transition:none}::ng-deep .ng5-slider.animate .ng5-slider-bar-wrapper{-webkit-transition:all linear .3s;transition:all linear .3s}::ng-deep .ng5-slider.animate .ng5-slider-selection{-webkit-transition:background-color linear .3s;transition:background-color linear .3s}::ng-deep .ng5-slider.animate .ng5-slider-pointer{-webkit-transition:all linear .3s;transition:all linear .3s}::ng-deep .ng5-slider.animate .ng5-slider-bubble{-webkit-transition:all linear .3s;transition:all linear .3s}::ng-deep .ng5-slider.animate .ng5-slider-bubble.ng5-slider-limit{-webkit-transition:opacity linear .3s;transition:opacity linear .3s}::ng-deep .ng5-slider.animate .ng5-slider-bubble.ng5-slider-combined{-webkit-transition:opacity linear .3s;transition:opacity linear .3s}::ng-deep .ng5-slider.animate .ng5-slider-tick{-webkit-transition:background-color linear .3s;transition:background-color linear .3s}`],\n                host: { class: 'ng5-slider' },\n                providers: [NG5_SLIDER_CONTROL_VALUE_ACCESSOR]\n            },] },\n];\n/** @nocollapse */\nSliderComponent.ctorParameters = () => [\n    { type: Renderer2, },\n    { type: ElementRef, },\n    { type: ChangeDetectorRef, },\n    { type: NgZone, },\n];\nSliderComponent.propDecorators = {\n    \"value\": [{ type: Input },],\n    \"valueChange\": [{ type: Output },],\n    \"highValue\": [{ type: Input },],\n    \"highValueChange\": [{ type: Output },],\n    \"options\": [{ type: Input },],\n    \"userChangeStart\": [{ type: Output },],\n    \"userChange\": [{ type: Output },],\n    \"userChangeEnd\": [{ type: Output },],\n    \"manualRefresh\": [{ type: Input },],\n    \"triggerFocus\": [{ type: Input },],\n    \"leftOuterSelectionBarElement\": [{ type: ViewChild, args: ['leftOuterSelectionBar', { read: SliderElementDirective },] },],\n    \"rightOuterSelectionBarElement\": [{ type: ViewChild, args: ['rightOuterSelectionBar', { read: SliderElementDirective },] },],\n    \"fullBarElement\": [{ type: ViewChild, args: ['fullBar', { read: SliderElementDirective },] },],\n    \"selectionBarElement\": [{ type: ViewChild, args: ['selectionBar', { read: SliderElementDirective },] },],\n    \"minHandleElement\": [{ type: ViewChild, args: ['minHandle', { read: SliderHandleDirective },] },],\n    \"maxHandleElement\": [{ type: ViewChild, args: ['maxHandle', { read: SliderHandleDirective },] },],\n    \"floorLabelElement\": [{ type: ViewChild, args: ['floorLabel', { read: SliderLabelDirective },] },],\n    \"ceilLabelElement\": [{ type: ViewChild, args: ['ceilLabel', { read: SliderLabelDirective },] },],\n    \"minHandleLabelElement\": [{ type: ViewChild, args: ['minHandleLabel', { read: SliderLabelDirective },] },],\n    \"maxHandleLabelElement\": [{ type: ViewChild, args: ['maxHandleLabel', { read: SliderLabelDirective },] },],\n    \"combinedLabelElement\": [{ type: ViewChild, args: ['combinedLabel', { read: SliderLabelDirective },] },],\n    \"ticksElement\": [{ type: ViewChild, args: ['ticksElement', { read: SliderElementDirective },] },],\n    \"tooltipTemplate\": [{ type: ContentChild, args: ['tooltipTemplate',] },],\n    \"sliderElementVerticalClass\": [{ type: HostBinding, args: ['class.vertical',] },],\n    \"sliderElementAnimateClass\": [{ type: HostBinding, args: ['class.animate',] },],\n    \"sliderElementDisabledAttr\": [{ type: HostBinding, args: ['attr.disabled',] },],\n    \"onResize\": [{ type: HostListener, args: ['window:resize', ['$event'],] },],\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass TooltipWrapperComponent {\n}\nTooltipWrapperComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ng5-slider-tooltip-wrapper',\n                template: `<ng-container *ngIf=\"template\">\n  <ng-template *ngTemplateOutlet=\"template; context: {tooltip: tooltip, placement: placement, content: content}\"></ng-template>\n</ng-container>\n\n<ng-container *ngIf=\"!template\">\n  <div class=\"ng5-slider-inner-tooltip\" [attr.title]=\"tooltip\" [attr.data-tooltip-placement]=\"placement\">\n    {{content}}\n  </div>\n</ng-container>`,\n                styles: [`.ng5-slider-inner-tooltip{height:100%}`]\n            },] },\n];\n/** @nocollapse */\nTooltipWrapperComponent.ctorParameters = () => [];\nTooltipWrapperComponent.propDecorators = {\n    \"template\": [{ type: Input },],\n    \"tooltip\": [{ type: Input },],\n    \"placement\": [{ type: Input },],\n    \"content\": [{ type: Input },],\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Ng5Slider module\n *\n * The module exports the slider component\n */\nclass Ng5SliderModule {\n}\nNg5SliderModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule\n                ],\n                declarations: [\n                    SliderComponent,\n                    SliderElementDirective,\n                    SliderHandleDirective,\n                    SliderLabelDirective,\n                    TooltipWrapperComponent\n                ],\n                exports: [\n                    SliderComponent\n                ]\n            },] },\n];\n/** @nocollapse */\nNg5SliderModule.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Ng5SliderModule, ChangeContext, PointerType, LabelType, Options, SliderElementDirective as ɵb, SliderHandleDirective as ɵc, SliderLabelDirective as ɵd, SliderComponent as ɵa, TooltipWrapperComponent as ɵe };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}